Ein Tabellenblatt ist eine Computeranwendung für die Organisation, Analyse und Speicherung von Daten in tabellarischer Form. Die Tabellen wurden als computergestützte Analoga der Arbeitsblätter für die Papierrechnung entwickelt. Das Programm arbeitet auf Daten, die in Zellen einer Tabelle eingegeben werden. Jede Zelle kann numerische oder Textdaten enthalten, oder die Ergebnisse von Formeln, die automatisch einen Wert basierend auf den Inhalten anderer Zellen berechnen und anzeigen. Ein Tabellenblatt kann sich auch auf ein solches elektronisches Dokument beziehen. Spreadsheet-Benutzer können jeden gespeicherten Wert einstellen und die Auswirkungen auf berechnete Werte beobachten. Dies macht die Tabellenkalkulation für die What-If-Analyse nützlich, da viele Fälle ohne manuelle Neuberechnung schnell untersucht werden können. Moderne Tabellenkalkulationssoftware kann mehrere interagierende Blätter aufweisen und Daten entweder als Text und Ziffern oder in grafischer Form anzeigen. Neben den grundlegenden arithmetischen und mathematischen Funktionen bieten moderne Tabellenkalkulationen in Funktionen für gemeinsame Finanzbuchhaltung und statistische Operationen gebaut. Solche Berechnungen als Netto- oder Standardabweichung können auf tabellarische Daten mit einer vorprogrammierten Funktion in einer Formel angewendet werden. Spreadsheet-Programme bieten auch bedingte Ausdrücke, Funktionen, die zwischen Text und Zahlen umwandeln, und Funktionen, die auf Textfolgen arbeiten. Spreadsheets haben papierbasierte Systeme in der gesamten Geschäftswelt ersetzt. Obwohl sie zunächst für Buchhaltungs- oder Buchhaltungsaufgaben entwickelt wurden, werden sie jetzt in jedem Kontext, in dem tabellarische Listen erstellt, sortiert und geteilt werden, umfassend genutzt. LANPAR, erhältlich im Jahr 1969, war das erste elektronische Tabellenkalkulation auf Mainframe- und Zeitaustausch-Computern. LANPAR war ein Akronym: LANguage for Programming Arrays at Random. VisiCalc (1979) war das erste elektronische Tabellenblatt auf einem Mikrocomputer, und es half, den Apple II-Computer in ein populäres und weit verbreitetes System zu verwandeln. Lotus 1-2-3 war die führende Tabellenkalkulation, als DOS das dominante Betriebssystem war. Microsoft Excel hat nun den größten Marktanteil auf den Windows- und Macintosh-Plattformen. Ein Tabellenkalkulationsprogramm ist ein Standardmerkmal einer Office-Produktivitätssuite, da das Aufkommen von Web-Apps nun auch Office-Suiten im Web-App-Formular existieren. Verwendung Ein Tabellenblatt besteht aus einer Tabelle von Zellen, die in Zeilen und Spalten angeordnet sind und von den X- und Y-Standorten bezeichnet werden. X-Positionen, die Spalten, sind normalerweise durch Buchstaben A, B, C usw. dargestellt, während Zeilen normalerweise durch Zahlen, 1, 2, 3 usw. dargestellt sind. Eine einzelne Zelle kann durch Ansprechen ihrer Zeile und Spalte, C10" bezeichnet werden. Dieses elektronische Konzept von Zellreferenzen wurde zunächst in LANPAR (Sprache für Programmierarrays bei Random) (entwickelt von Rene Pardo und Remy Landau) und einer Variante, die in VisiCalc verwendet und als "A1-Notation" bekannt ist, eingeführt. Zusätzlich haben Tabellenblätter das Konzept eines Bereichs, einer Gruppe von Zellen, normalerweise zusammenhängend. Beispielsweise kann man sich auf die ersten zehn Zellen in der ersten Spalte mit dem Bereich A1:A10" beziehen. LANPAR innovierte Vorwärtsreferenzierung/natürliche Auftragsberechnung, die bis Lotus 123 und Microsofts MultiPlan Version nicht wieder erschienen 2. In modernen Tabellenkalkulationsanwendungen werden mehrere Tabellenkalkulationen, die oft als Arbeitsblätter oder einfach als Blätter bezeichnet werden, zu einem Arbeitsbuch zusammengefasst. Ein Arbeitsbuch wird physisch durch eine Datei dargestellt, die alle Daten für das Buch, die Blätter und die Zellen mit den Blättern enthält. Arbeitsblätter werden in der Regel durch Tabs dargestellt, die zwischen Seiten umblättern, die jeweils eine der Blätter enthalten, obwohl Numbers dieses Modell deutlich ändert. Zellen in einem Mehrblattbuch fügen den Blattnamen zu ihrer Referenz hinzu, z.B. "Sheet 1!C10". Einige Systeme erweitern diese Syntax, um Zellreferenzen auf verschiedene Arbeitsmappen zu ermöglichen. Benutzer interagieren mit Blättern vor allem durch die Zellen. Eine vorgegebene Zelle kann Daten halten, indem sie einfach eingeben oder eine Formel, die normalerweise durch vorangehenden Text mit gleichem Zeichen erstellt wird. Daten können die Zeichenfolge der Text-Hallo-Welt, die Nummer 5 oder das Datum 16-Dec-91 enthalten. Eine Formel würde mit dem gleichen Zeichen beginnen, = 5 * 3, aber dies wäre normalerweise unsichtbar, weil die Anzeige das Ergebnis der Berechnung zeigt, 15 in diesem Fall nicht die Formel selbst. Dies kann in einigen Fällen zu Verwirrung führen. Das Schlüsselmerkmal von Tabellenkalkulationen ist die Fähigkeit, eine Formel auf den Inhalt anderer Zellen zu beziehen, die wiederum das Ergebnis einer Formel sein kann. Um eine solche Formel zu machen, ersetzt man eine Zahl durch eine Zellreferenz. Beispielsweise würde die Formel = 5*C10 das Ergebnis der Multiplikation des Wertes in Zelle C10 mit der Zahl 5 erzeugen. Wenn C10 den Wert 3 hält, wird das Ergebnis 15 sein. Aber C10 könnte auch seine Formel in Bezug auf andere Zellen halten, und so weiter. Die Fähigkeit, Formeln zusammen zu ketten, ist, was ein Tabellenblatt seine Macht gibt. Viele Probleme können in eine Reihe einzelner mathematischer Schritte zerlegt werden, die einzelnen Formeln in Zellen zugeordnet werden können. Einige dieser Formeln können auch für Bereiche gelten, wie die SUM-Funktion, die alle Zahlen in einem Bereich addiert. Spreadsheets teilen viele Prinzipien und Eigenschaften von Datenbanken, aber Tabellenkalkulationen und Datenbanken sind nicht dasselbe. Ein Tabellenblatt ist im Wesentlichen nur eine Tabelle, während eine Datenbank eine Sammlung von vielen Tabellen mit maschinenlesbaren semantischen Beziehungen ist. Obwohl es wahr ist, dass ein Arbeitsbuch, das drei Blätter enthält, tatsächlich eine Datei ist, die mehrere Tabellen enthält, die miteinander interagieren können, fehlt es an der relationalen Struktur einer Datenbank. Tabellen und Datenbanken sind interoperabel – Blätter können in Datenbanken importiert werden, um Tabellen in ihnen zu werden, und Datenbankabfragen können in Tabellenblätter für weitere Analysen exportiert werden. Ein Tabellenkalkulationsprogramm ist eine der Hauptkomponenten einer Büroproduktivitätssuite, die in der Regel auch einen Wortprozessor, ein Präsentationsprogramm und ein Datenbankmanagementsystem enthält. Programme innerhalb einer Suite verwenden ähnliche Befehle für ähnliche Funktionen. Üblicherweise ist das Teilen von Daten zwischen den Komponenten einfacher als bei einer nicht integrierten Sammlung von funktionell äquivalenten Programmen. Dies war besonders ein Vorteil zu einer Zeit, in der viele Personalcomputersysteme anstelle einer grafischen Benutzeroberfläche Text-Mode-Anzeigen und Befehle verwendet haben. Geschichte Papier-Tabellen Das Wort-Spreadsheet stammt aus der Verbreitung im Sinne eines Zeitungs- oder Zeitschriftenartikels (Text oder Grafik), der zwei gegenüberliegende Seiten abdeckt, sich über die Mitte erstreckt und die beiden Seiten als eine große Seite behandelt. Unter dem Verbundwort-Spreadsheet wurde das Format verstanden, das verwendet wurde, um Buchführungen zu präsentieren – mit Spalten für Ausgabenkategorien über die Oberseite, Rechnungen unten die linke Marge aufgeführt, und die Menge jeder Zahlung in der Zelle, in der sich ihre Zeile und Spalte schneiden –, die traditionell über Seiten einer gebundenen Leiste (Buch zur Buchhaltung von Bilanzen) oder auf gewöhnlichen doppelten Papierblättern verteilt waren (geregelt "Analysepapier"). Frühe Umsetzungen Batch-Tabellen-Report-Generator BSRG Ein Batch-Spreadsheet ist aus einem Batch-Compiler mit zusätzlichen Eingabedaten unlösbar, wodurch ein Ausgabebericht, d.h. ein 4GL oder herkömmliches, nicht-interaktives, Batch-Computerprogramm erstellt wird. Dieses Konzept einer elektronischen Tabellenkalkulation wurde jedoch in der Zeitschrift "Budgeting Models and System Simulation" von Richard Mattessich 1961 skizziert. Die anschließende Arbeit von Mattessich (1964a, Chpt. 9, Accounting and Analytical Methods) und dessen Begleitband, Mattessich (1964b, Simulation der Firm durch ein Budget-Computerprogramm) bezogene Tabellenkalkulationen auf Buchhaltungs- und Budgetierungssysteme (auf in FORTRAN IV programmierten Computern). Diese Batch-Spreadsheets behandelten in erster Linie die Addition oder Subtraktion von ganzen Spalten oder Zeilen (von Eingangsvariablen), anstatt einzelner Zellen. 1962 wurde dieses Konzept der Tabellenkalkulation, BCL for Business Computer Language, auf einem IBM 1130 implementiert und 1963 auf einen IBM 7040 von R. Brian Walsh an der Marquette University, Wisconsin portiert. Dieses Programm wurde in Fortran geschrieben. Primitive Timesharing war auf diesen Maschinen verfügbar. 1968 wurde BCL von Walsh an die IBM 360/67 Malharing-Maschine an der Washington State University portiert. Es wurde verwendet, um in der Lehre von Finanzen für Geschäftsstudenten zu helfen. Die Schüler konnten die vom Professor vorbereiteten Informationen einnehmen und sie manipulieren, um sie darzustellen und Verhältnisse zu zeigen. 1964 wurde ein Buch mit dem Titel Business Computer Language von Kimball, Stoffells und Walsh geschrieben und 1966 und Jahre später wurde das Urheberrecht erneuert. Angewandte Datenressourcen hatten einen FORTRAN-Vorprozessor namens Empires. In den späten 1960er Jahren nutzte Xerox BCL, um eine anspruchsvollere Version für ihr Timesharing-System zu entwickeln. LANPAR Tabellenkalkulierer Eine wesentliche Erfindung bei der Entwicklung von elektronischen Tabellenkalkulationen wurde von Rene K. Pardo und Remy Landau gemacht, die 1970 US-Patent 4,398,249 auf einem Tabellenkalkulationsalgorithmus der automatischen natürlichen Ordnung eingereicht. Während das Patent ursprünglich von der Patentstelle als rein mathematische Erfindung zurückgewiesen wurde, gewannen Pardo und Landau nach 12 Jahren Berufungen am Vorurteilsgericht der Federal Circuit (CCPA) 1983 ein Urteil des Patentamts und stellten fest, dass "manchmal nicht aufhört, nur patentierbar zu werden, weil der Neuheitspunkt in einem Algorithmus ist. "Aber 1995 entschied das Berufungsgericht der Vereinigten Staaten für den Bundeskreislauf das Patent undurchsetzbar. Die eigentliche Software wurde LANPAR genannt — LANguage for Programming Arrays at Random. Diese wurde im Sommer 1969 nach Pardo und Landaus neuer Abschluss der Harvard University konzipiert und vollständig entwickelt. Co-Erfinder Rene Pardo erinnert daran, dass er der Meinung war, dass ein Manager bei Bell Canada nicht von Programmierern abhängen muss, um Budgetierungsformulare zu programmieren und zu ändern, und er dachte, dass Benutzer Formulare in beliebiger Reihenfolge ausgeben und einen elektronischen Computer Ergebnisse in der richtigen Reihenfolge berechnen lassen ("Forward Referencing/Natural Order Calculation"). Pardo und Landau haben die Software 1969 entwickelt und implementiert. LANPAR wurde von Bell Canada, AT&T und den 18 betriebsfähigen Telefongesellschaften bundesweit für ihre lokalen und nationalen Budgetierungsoperationen verwendet. LANPAR wurde auch von General Motors verwendet. Seine Einzigartigkeit war Pardo's Co-Invention mit Vorwärtsbezugs-/Naturauftragsberechnung (eines der ersten nicht-verfahrensbezogenen Computersprachen) im Gegensatz zu links-rechts, oben-zu-unten Sequenz zur Berechnung der Ergebnisse in jeder Zelle, die von VisiCalc, SuperCalc, und der ersten Version von MultiPlan verwendet wurde. Ohne Vorwärtsreferenzierung/natürliche Auftragsberechnung musste der Benutzer das Tabellenblatt aktualisieren, bis die Werte in allen Zellen unverändert blieben. Sobald die Zellenwerte konstant blieben, wurde der Benutzer versichert, dass es innerhalb des Tabellenblatts keine weiteren Vorwärtsbezüge gab. Autoplan/Autotab Tabellenblatt Programmiersprache 1968 haben drei ehemalige Mitarbeiter des General Electric Computer-Unternehmens mit Sitz in Phoenix, Arizona, ihr eigenes Software-Entwicklungshaus gegründet. Ein Leroy Ellison, Harry N. Cantrell und Russell E. Edwards fanden sich eine große Anzahl von Berechnungen, wenn sie Tische für die Geschäftspläne machten, die sie den Risikokapitalisten vorstellten. Sie beschlossen, sich viel Mühe zu sparen und schrieb ein Computerprogramm, das ihre Tabellen für sie produziert. Dieses Programm, ursprünglich als einfaches Dienstprogramm für ihren persönlichen Gebrauch konzipiert, würde sich als erstes Softwareprodukt des Unternehmens, das als Capex Corporation bekannt werden würde, herausstellen. AutoPlan lief auf GEs Time-sharing-Service; danach wurde eine Version, die auf IBM Mainframes lief, unter dem Namen AutoTab eingeführt. (National CSS bot ein ähnliches Produkt, CSSTAB, die eine moderate malharing Benutzerbasis bis Anfang der 1970er Jahre hatte. Eine wichtige Anwendung war Meinungsforschung Tabulation.) AutoPlan/AutoTab war kein interaktives WYSIWYG-Tabellenprogramm, es war eine einfache Skriptsprache für Tabellenkalkulationen. Die benutzerdefinierten Namen und Etiketten für die Zeilen und Spalten, dann die Formeln, die jede Zeile oder Spalte definiert. Im Jahr 1975 wurde Autotab-II als Erweiterung des Originals auf maximal " 1.500 Zeilen und Spalten, kombiniert in jedem Verhältnis der Benutzer benötigt..."GE Information Services, die den Zeit-Sharing-Service betrieben, startete auch ein eigenes Tabellenkalksystem, Financial Analysis Language (FAL), um 1974. Es wurde später durch eine zusätzliche Tabellenkalkulationssprache ergänzt, TABOL, die von einem unabhängigen Autor, Oliver Vellacott in Großbritannien entwickelt wurde. Sowohl FAL als auch TABOL wurden in das Datenbanksystem von GEIS, DMS, integriert. IBM Finanzplanung und Control System Das IBM Financial Planning and Control System wurde 1976 von Brian Ingham bei IBM Canada entwickelt. Es wurde von IBM in mindestens 30 Ländern umgesetzt. Es lief auf einem IBM-Mainframe und war unter den ersten Anwendungen für die Finanzplanung entwickelt mit APL, die die Programmiersprache komplett vom Endbenutzer versteckt. Durch das VM-Betriebssystem von IBM gehörte es zu den ersten Programmen, jede Kopie der Anwendung automatisch zu aktualisieren, da neue Versionen veröffentlicht wurden. Benutzer können einfache mathematische Beziehungen zwischen Zeilen und zwischen Spalten festlegen. Im Vergleich zu allen zeitgenössischen Alternativen könnte es sehr große Tabellenkalkulationen unterstützen. Es hat die tatsächlichen Finanzplanungsdaten aus dem Legacy-Ansatzsystem in das Tabellenblatt jedes Benutzers monatlich geladen. Es wurde entwickelt, um die Leistung von APL durch Objektkerne zu optimieren, die Programmeffizienz um bis zu 50 Falten über traditionelle Programmieransätze zu erhöhen. APLDOTmodeling Sprache Ein Beispiel für ein frühes "Industriegewicht"-Spreadsheet war APLDOT, das 1976 an der United States Railway Association auf einem IBM 360/91 entwickelt wurde und am Johns Hopkins University Applied Physics Laboratory in Laurel, MD läuft. Die Anwendung wurde seit vielen Jahren erfolgreich in der Entwicklung von Anwendungen wie Finanz- und Kostenmodellen für den US-Kongress und für Conrail eingesetzt. APLDOT wurde ein Tabellenkalkulationsblatt gegraben, weil Finanzanalysten und strategische Planer es verwendet, um die gleichen Probleme zu lösen, die sie mit Papier-Tabellen-Pads behandelt. VisiCalc Da Dan Bricklin und Bob Frankston 1979 VisiCalc auf dem Apple II und 1981 den IBM PC implementierten, wurde das Tabellenkalkulationskonzept in den frühen 1980er Jahren weit verbreitet. VisiCalc war das erste Tabellenkalkulationsblatt, das alle wesentlichen Merkmale moderner Tabellenkalkulationen kombinierte (mit Ausnahme der Weiterberechnung/natürlicher Auftragsrekalkulation), wie WYSIWYG interaktive Benutzeroberfläche, automatische Neuberechnung, Status- und Formellinien, Range-Kopier mit relativen und absoluten Referenzen, Formel-Gebäude durch Auswahl von Referenzzellen. Unaware von LANPAR zur Zeit PC World Magazin genannt VisiCalc das erste elektronische Tabellenkalkulation. Bricklin hat darüber gesprochen, wie sein Universitätsprofessor einen Tisch mit Berechnungsergebnissen an einem Blackboard erstellt. Als der Professor einen Fehler fand, musste er einige sequentielle Einträge in der Tabelle tediously löschen und neu schreiben, was Bricklin auslöste, um zu denken, dass er den Prozess auf einem Computer replizieren könnte, mit dem Blackboard als Modell, um Ergebnisse der zugrunde liegenden Formeln zu sehen. Seine Idee wurde VisiCalc, die erste Anwendung, die den Personalcomputer von einem Hobby für Computer-Enthusiasten in ein Business-Tool verwandelte. VisiCalc ging weiter, um die erste "Killer-Anwendung" zu werden, eine Anwendung, die so zwingend war, würden die Menschen einen bestimmten Computer nur kaufen, um es zu verwenden. VisiCalc war in keinem kleinen Teil für den Erfolg des Apple II verantwortlich. Das Programm wurde später auf eine Reihe von anderen frühen Computern, insbesondere CP/M Maschinen, die Atari 8-bit Familie und verschiedene Commodore Plattformen portiert. Dennoch bleibt VisiCalc am besten als Apple II Programm bekannt. Super! Calc SuperCalc war eine Tabellenkalkulation, die 1980 von Sorcim veröffentlicht wurde und ursprünglich (zusammen mit WordStar) im Rahmen des CP/M Softwarepakets mit dem Osborne 1 tragbaren Computer gebündelt wurde. Es wurde schnell die de facto Standard-Tabelle für CP/M und wurde 1982 an MS-DOS portiert. Lotus 1-2-3 und andere MS-DOS-Tabellen Die Akzeptanz des IBM PC nach seiner Einführung im August 1981 begann langsam, weil die meisten der dafür verfügbaren Programme Übersetzungen aus anderen Computermodellen waren. Die Dinge änderten sich dramatisch mit der Einführung von Lotus 1-2-3 im November 1982 und Veröffentlichung zum Verkauf im Januar 1983. Da es speziell für den IBM PC geschrieben wurde, hatte es eine gute Leistung und wurde die Killer-App für diesen PC. Lotus 1-2-3 fuhr den Verkauf des PC durch die Verbesserung der Geschwindigkeit und Grafik im Vergleich zu VisiCalc auf dem Apple II.Lotus 1-2-3, zusammen mit seinem Wettbewerber Borland Quattro, bald verschoben VisiCalc. Lotus 1-2-3 wurde am 26. Januar 1983 veröffentlicht, begann im selben Jahr mit dem Outselling von dann-most-popularem VisiCalc, und seit einigen Jahren war die führende Tabellenkalkulation für DOS. Microsoft Excel Microsoft veröffentlichte die erste Version von Excel für den Macintosh am 30. September 1985 und portierte es dann auf Windows, wobei die erste Version 2.05 (um mit der Macintosh Version 2.2 zu synchronisieren) und im November 1987 veröffentlicht wurde. Die Windows 3.x-Plattformen der frühen 1990er Jahre ermöglichten es Excel, Marktanteile von Lotus zu nehmen. Als Lotus mit nutzbaren Windows-Produkten reagierte, hatte Microsoft begonnen, ihre Office-Suite zu montieren. Mit 1995, Excel war der Marktführer, kreuzte Lotus 1-2-3, und in 2013, IBM unterbrochen Lotus 1-2-3 insgesamt. Webbasierte Tabellenkalkulationen Notable aktuelle webbasierte Tabellenkalkulationssoftware: Collabora Online Calc ist eine kostenlose, Open-Source- und plattformübergreifende unternehmensbereite Edition von LibreOffice. Google PlattenMicrosoft Excel Online Mainframe Tabellenkalkulationen Das Works Records System von ICI entwickelte 1974 auf IBM 370/145 Andere Tabellenblätter Notable aktuelle Tabellenkalkulationssoftware: A.A. Calc ist eine freie und offene Quelle. Calligra Sheets (früher KCalc)Collabora Online Calc für mobile und Desktop-Apps sind kostenlos, Open-Source, plattformübergreifende unternehmensbereite Editionen von LibreOffice. Corel Quattro Pro (WordPerfect Office) Gnumeric ist frei und plattformübergreifend, es ist Teil des GNOME Free Software Desktop Project. Kingsoft Tabellen LibreOffice Calc ist kostenlos, Open-Source- und Cross-Plattform, .NeoOffice Numbers ist Apple Inc.s Tabellenkalkulationssoftware, Teil von iWork. PlanMaker (SoftMaker Office)PyspreadDiscontinued Tabellenkalkulationssoftware: 20/20 3D-Calc für Atari ST Computer Framework von Forefront Corporation/Ashton-Tate (1983/84)GNU Oleo – Eine traditionelle Terminal-Modus-Tabelle für UNIX/UNIX-ähnliche Systeme IBM Lotus Symphony (2007)Javelin Software KCells Lucid 3-D Lotus Improv Lotus Jazz für Macintosh Lotus Symphony (1984)MultiPlan Claris' Resolve (Macintosh)Resolver One Borlands Quattro Pro SIAG SuperCalc T/Maker Target Planner Calc für CP/ Andere Produkte Mehrere Unternehmen haben versucht, in den Tabellenkalkmarkt mit Programmen auf der Grundlage sehr unterschiedlicher Paradigmen zu brechen. Lotus stellte ein, was wahrscheinlich das erfolgreichste Beispiel ist, Lotus Improv, das einige kommerzielle Erfolge sah, vor allem in der Finanzwelt, wo seine leistungsstarken Daten Bergbau-Fähigkeiten bis heute gut respektiert. Spreadsheet 2000 versuchte, die Formelbau drastisch zu vereinfachen, war aber im Allgemeinen nicht erfolgreich. Konzepte Die Hauptkonzepte sind die eines Gitters von Zellen, genannt ein Blatt, mit entweder Rohdaten, Namenswerte oder Formeln in den Zellen. Formeln sagen, wie man neue Werte aus bestehenden Werten mechanisch berechnet. Werte sind allgemeine Zahlen, können aber auch reiner Text, Daten, Monate usw. sein. Erweiterungen dieser Konzepte umfassen logische Tabellenkalkulationen. Häufig werden verschiedene Werkzeuge zur Programmierung von Blättern, zur Visualisierung von Daten, zur Fernverbindung von Blättern, zur Anzeige von Abhängigkeiten von Zellen usw. bereitgestellt. Zellen Eine Zelle kann als Box zur Datenhaltung gedacht werden. Eine einzelne Zelle wird üblicherweise mit ihrer Spalte und Zeile bezeichnet (C2 würde die Zelle mit dem Wert 30 in der nachfolgenden Beispieltabelle repräsentieren). In der Regel werden Zeilen, die die abhängigen Variablen darstellen, ausgehend von 1 in der Dezimalausschreibung bezeichnet, während Spalten, die die unabhängigen Variablen repräsentieren, 26-adische bijektive Zählung mit den Buchstaben A-Z als Ziffern verwenden.Seine physikalische Größe kann in der Regel durch Ziehen seiner Höhe oder Breite an Feldkreuzungen (oder für ganze Spalten oder Zeilen durch Ziehen der Spalten- oder Zeilenköpfe) auf ihren Inhalt zugeschnitten werden. Eine Reihe von Zellen wird als Blatt oder Arbeitsblatt bezeichnet. Es ist analog zu einem Array von Variablen in einem herkömmlichen Computerprogramm (obgleich bestimmte, einmal eingegebene, unveränderliche Werte durch die gleiche Analogie, Konstanten betrachtet werden konnten). In den meisten Implementierungen können viele Arbeitsblätter innerhalb eines einzigen Tabellenkalkulats liegen. Ein Arbeitsblatt ist einfach eine Untermenge des Tabellenblatts, die der Übersichtlichkeit halber geteilt ist. Funktionell arbeitet die Tabellenkalkulation als Ganzes und alle Zellen arbeiten als globale Variablen innerhalb der Tabellenkalkulation (jede Variable mit Lesezugriff nur mit Ausnahme der enthaltenen Zelle). Eine Zelle kann einen Wert oder eine Formel enthalten, oder sie kann einfach leer gelassen werden. Mit Konvention beginnen Formeln in der Regel mit = Zeichen. Werte Ein Wert kann von der Computertastatur eingegeben werden, indem man direkt in die Zelle selbst eingibt. Alternativ kann ein Wert auf einer Formel (siehe unten) basieren, die eine Berechnung durchführen, das aktuelle Datum oder die Uhrzeit anzeigen oder externe Daten wie ein Aktienangebot oder einen Datenbankwert abrufen könnte. Das Spreadsheet Wertregel Informatiker Alan Kay nutzte den Begriff Wertregel, um die Operation eines Tabellenblatts zusammenzufassen: Der Wert einer Zelle beruht ausschließlich auf der Formel, die der Benutzer in die Zelle eingegeben hat. Die Formel kann sich auf den Wert anderer Zellen verlassen, aber diese Zellen sind ebenfalls auf benutzergestützte Daten oder Formeln beschränkt. Zur Berechnung einer Formel gibt es keine 'Nebeneffekte': Die einzige Ausgabe ist, das berechnete Ergebnis innerhalb der besetzenden Zelle anzuzeigen. Es gibt keinen natürlichen Mechanismus zur dauerhaften Änderung des Inhalts einer Zelle, es sei denn, der Benutzer ändert den Inhalt der Zelle manuell. Dies ergibt im Rahmen der Programmiersprachen eine begrenzte Form der funktionellen Programmierung erster Ordnung. Automatische Neuberechnung Ein Standard der Tabellen seit den 1980er Jahren, dieses optionale Feature eliminiert die Notwendigkeit, das Tabellenkalkulationsprogramm manuell anzufordern, um Werte neu zu berechnen (heute typischerweise die Standardoption, es sei denn speziell "ausgeschaltet" für große Tabellenkalkulationen, in der Regel um die Leistung zu verbessern). Einige frühere Tabellenkalkulationen erforderten eine manuelle Anfrage, um neu zu berechnen, da die Neuberechnung von großen oder komplexen Tabellenkalkulationen häufig die Dateneingabegeschwindigkeit reduzierte. Viele moderne Tabellenblätter behalten diese Option noch. Die Neuberechnung erfordert in der Regel keine kreisförmigen Abhängigkeiten in einem Tabellenblatt. Ein Abhängigkeitsdiagramm ist ein Diagramm, das für jedes zu aktualisierende Objekt einen Scheitel hat, und eine Kante, die zwei Objekte verbindet, wenn eines davon früher aktualisiert werden muss als das andere. Abhängigkeitsdiagramme ohne kreisförmige Abhängigkeiten bilden gerichtete acyclische Graphen, Darstellungen von Teilaufträgen (hier über ein Tabellenblatt), auf die ein bestimmtes Ergebnis zurückgegriffen werden kann. Echtzeit-Update Diese Funktion bezieht sich auf die Aktualisierung der Inhalte einer Zelle periodisch mit einem Wert aus einer externen Quelle, wie einer Zelle in einem Remote-Tabelle. Für geteilte, webbasierte Tabellenkalkulationen gilt es, Zellen sofort zu aktualisieren, ein anderer Benutzer hat aktualisiert. Alle abhängigen Zellen müssen auch aktualisiert werden. Gesperrte Zelle Nach der Eingabe können ausgewählte Zellen (oder das gesamte Tabellenblatt) optional gesperrt werden, um ein versehentliches Überschreiben zu verhindern. Typischerweise würde dies für Zellen mit Formeln gelten, die jedoch für Zellen mit Konstanten wie einem Kilogramm/Pfund-Umrechnungsfaktor (2.20462262 bis acht Dezimalstellen) gelten könnten. Obwohl einzelne Zellen als gesperrt markiert sind, werden die Tabellenkalkulationsdaten nicht geschützt, bis das Feature in den Dateieinstellungen aktiviert ist. Datenformat Optional kann eine Zelle oder ein Bereich definiert werden, um festzulegen, wie der Wert angezeigt wird. Das Standard-Display-Format wird in der Regel durch seinen Anfangsinhalt eingestellt, wenn nicht speziell zuvor festgelegt, so dass zum Beispiel 31/12/2007 oder "31 Dez 2007" auf das Zellenformat des Datums Standard wäre. Ebenso würde das Hinzufügen eines %-Zeichens nach einem numerischen Wert die Zelle als prozentuales Zellformat markieren. Die Zelleninhalte werden durch dieses Format nicht geändert, nur der angezeigte Wert. Einige Zellformate wie numerische oder Währung können auch die Anzahl der Dezimalstellen angeben. Dies kann ungültige Operationen ermöglichen (z.B. Multiplikation an einer Zelle mit einem Datum), was zu unlogischen Ergebnissen ohne entsprechende Warnung führt. Zellformatierung Abhängig von der Fähigkeit der Tabellenkalkulation kann jede Zelle (wie ihr Gegenstück in einem Wortprozessor) mit den Attributen entweder des Inhalts (Punktgröße, Farbe, fett oder italic) oder der Zelle (Grenzdicke, Hintergrundschattierung, Farbe) separat formatiert werden. Um die Lesbarkeit einer Tabellenkalkulation zu unterstützen, kann die Zellformatierung bedingt auf Daten angewendet werden; beispielsweise kann eine negative Zahl rot angezeigt werden. Die Formatierung einer Zelle wirkt sich typischerweise nicht auf ihren Inhalt aus und hängt davon ab, wie Zellen auf andere Arbeitsblätter oder Anwendungen referiert oder kopiert werden, darf die Formatierung nicht mit dem Inhalt getragen werden. Name der Zellen In den meisten Implementierungen kann eine Zelle oder Gruppe von Zellen in einer Spalte oder Zeile benannt werden, so dass der Benutzer diese Zellen nicht durch eine Gitterreferenz auf diese Zellen verweisen kann. Namen müssen innerhalb der Tabellenkalkulation eindeutig sein, aber bei Verwendung von mehreren Blättern in einer Tabellenkalkulationsdatei kann ein identisch benannter Zellbereich auf jedem Blatt verwendet werden, wenn es durch Hinzufügen des Blattnamens unterschieden wird. Ein Grund für diese Nutzung ist die Erstellung oder Ausführung von Makros, die einen Befehl über viele Blätter wiederholen. Ein weiterer Grund ist, dass Formeln mit benannten Variablen leicht gegen die Algebra überprüft werden, die sie implementieren sollen (sie ähneln Fortran-Expressionen). Die Verwendung von benannten Variablen und benannten Funktionen macht auch die Tabellenkalkstruktur transparenter. Zellreferenz Anstelle einer benannten Zelle besteht ein alternativer Ansatz darin, eine Zelle (oder Gitter) Referenz zu verwenden. Die meisten Zellreferenzen geben eine andere Zelle im selben Tabellenblatt an, aber eine Zellreferenz kann sich auch auf eine Zelle in einem anderen Blatt innerhalb desselben Tabellenblatts oder (je nach Implementierung) auf eine Zelle in einem anderen Tabellenblatt vollständig oder einen Wert aus einer entfernten Anwendung beziehen. Eine typische Zellreferenz im A1-Stil besteht aus einem oder zwei case-insensitiven Buchstaben zur Identifizierung der Spalte (wenn es bis zu 256 Spalten gibt: A–Z und AA–IV), gefolgt von einer Zeilennummer (z.B. im Bereich 1–65536). Entweder kann ein Teil relativ sein (es ändert sich, wenn die Formel sie bewegt oder kopiert wird), oder absolut (mit $ vor dem betreffenden Teil der Zellreferenz angegeben). Der alternative R1C1-Referenzstil besteht aus dem Buchstaben R, der Zeilennummer, dem Buchstaben C und der Spaltennummer; relative Zeilen- oder Spaltennummern sind durch Umschließen der Nummer in quadratischen Klammern angegeben. Die meisten aktuellen Tabellen verwenden den A1-Stil, einige bieten den R1C1-Stil als Kompatibilitätsoption. Wenn der Computer eine Formel in einer Zelle berechnet, um den angezeigten Wert dieser Zelle zu aktualisieren, führt Zellreferenz(en) in dieser Zelle, Namen einer anderen Zelle(n), den Computer dazu, den Wert der genannten Zelle(n) zu holen. Eine Zelle auf dem gleichen Blatt wird in der Regel wie: = A1 Eine Zelle auf einem anderen Blatt desselben Tabellenblatts wird in der Regel wie: = SHEET2!A1 (d.h. die erste Zelle in Blatt 2 desselben Tabellenblatts) adressiert. Einige Tabellenkalkulationen in Excel erlauben Zellreferenzen auf einem anderen Tabellenkalk (nicht die aktuell geöffnete und aktive Datei) auf demselben Computer oder einem lokalen Netzwerk. Es kann auch auf eine Zelle in einer anderen offenen und aktiven Tabellenkalkulation auf demselben Computer oder Netzwerk, die als austauschbar definiert ist, verweisen. Diese Referenzen enthalten den vollständigen Dateinamen, wie: ='C:\Dokumente und Einstellungen\Username\Meine Tabellenkalkulationen\[Hauptblatt]Sheet1!A1 In einem Tabellenblatt aktualisieren die Referenzen auf Zellen automatisch, wenn neue Zeilen oder Spalten eingefügt oder gelöscht werden. Beim Hinzufügen einer Zeile unmittelbar vor einem Satz von Spaltensummen muss jedoch darauf geachtet werden, dass die Summen die Werte der zusätzlichen Zeilen widerspiegeln – was sie oft nicht tun. Eine kreisrunde Referenz tritt auf, wenn die Formel in einer Zelle - direkt oder indirekt über eine Kette von Zellreferenzen - auf eine andere Zelle verweist, die auf die erste Zelle zurückgeht. Viele häufige Fehler verursachen kreisförmige Referenzen. Einige gültige Techniken verwenden jedoch kreisförmige Referenzen. Diese Techniken, nach vielen Tabellenkalkulationen, (in der Regel) konvergieren auf die richtigen Werte für diese Zellen. Zellbereiche Ebenso kann anstelle eines genannten Zellbereiches eine Rangereferenz verwendet werden. Für die Form (A1:A6) ist ein Bereich von Zellen typisch, der alle Zellen im Bereich A1 bis A6 angibt. Eine Formel wie = SUM(A1:A6) würde alle angegebenen Zellen addieren und das Ergebnis in der Zelle mit der Formel selbst abgeben. Blatt In den frühesten Tabellenkalkulationen waren Zellen ein einfaches zweidimensionales Raster. Im Laufe der Zeit hat sich das Modell auf eine dritte Dimension erweitert, und in einigen Fällen eine Reihe von benannten Gittern, genannt Blätter. Die am weitesten fortgeschrittenen Beispiele erlauben Inversions- und Rotationsoperationen, die den Datensatz auf verschiedene Weise schneiden und projizieren können. Formeln Eine Formel identifiziert die Berechnung, die erforderlich ist, um das Ergebnis in der Zelle zu platzieren, in der sie enthalten ist. Eine Zelle mit einer Formel weist daher zwei Anzeigekomponenten auf, die Formel selbst und den resultierenden Wert. Die Formel wird normalerweise nur angezeigt, wenn die Zelle durch Anklicken der Maus über eine bestimmte Zelle ausgewählt wird; andernfalls enthält sie das Ergebnis der Berechnung. Eine Formel ordnet Werte einer Zelle oder einem Zellbereich zu und weist typischerweise das Format auf: wobei die Expression aus: Werten wie 2, 9.14 oder 6.67E-11 besteht; Bezug auf andere Zellen, wie z.B. A1 für eine einzelne Zelle oder B1:B3 für eine Reichweite; arithmetische Operatoren wie +, -, *, / und andere; relationale Operatoren, wie >=, <, <, und andere; Wenn eine Zelle eine Formel enthält, enthält sie oft Verweise auf andere Zellen. Eine solche Zellreferenz ist eine Art Variable. Sein Wert ist der Wert der referenzierten Zelle oder eine Ableitung davon. Wenn diese Zelle wiederum andere Zellen bezeichnet, hängt der Wert davon ab. Referenzen können relativ sein (z.B. A1, oder B1:B3), absolut (z.B. A$1, oder B$1:$B$3) oder gemischte Zeile– oder spaltenweise absolut/relativ (z.B. $A1 ist spaltenweise absolut und A$1 ist zeilenmäßig absolut). Die verfügbaren Optionen für gültige Formeln hängen von der jeweiligen Tabellenkalkulation ab, aber im Allgemeinen können die meisten arithmetischen Operationen und ziemlich komplexe verschachtelte bedingte Operationen von den meisten heutigen kommerziellen Tabellenkalkulationen durchgeführt werden. Moderne Implementierungen bieten auch Funktionen für den Zugriff auf benutzerdefinierte Build-Funktionen, Remote-Daten und Anwendungen. Eine Formel kann eine Bedingung (oder verschachtelte Bedingungen) - mit oder ohne tatsächliche Berechnung - enthalten und wird manchmal rein verwendet, um Fehler zu identifizieren und hervorzuheben. Im folgenden Beispiel wird angenommen, dass die Summe einer Prozentspalte (A1 bis A6) auf Gültigkeit und eine explizite Nachricht in die benachbarte Rechtszelle geprüft wird. =IF(SUM(A1:A6) > 100, "Mehr als 100%", SUM(A1:A6)) Andere Beispiele: =IF(AND(A1>>"",B1>>""),A1/B1 bedeutet, dass, wenn beide Zellen A1 und B1 nicht <> leer " sind, dann A1 durch B1 und Anzeige, andere nichts anzeigen.=IF(AND(A1>"",B1>""),IF(B1>>0,A1/B1, "Division by Zero") Der beste Weg, um bedingte Aussagen zu erstellen, ist Schritt für Schritt komponieren, gefolgt von Test- und Fehlertests und Refining-Code. Eine Tabellenkalkulation muss überhaupt keine Formeln enthalten, wobei in diesem Fall lediglich eine Datensammlung in Zeilen und Spalten (eine Datenbank) wie ein Kalender, Zeitplan oder einfache Liste betrachtet werden könnte. Aufgrund seiner einfachen Nutzungs-, Formatierungs- und Hyperlinkfähigkeiten werden viele Tabellenblätter ausschließlich für diesen Zweck verwendet. Funktionen Spreadsheets enthalten in der Regel mehrere mitgelieferte Funktionen, wie arithmetische Operationen (z.B. Summen, Durchschnittswerte usw.), trigonometrische Funktionen, statistische Funktionen usw. Darüber hinaus gibt es oft eine Bereitstellung für benutzerdefinierte Funktionen. In Microsoft Excel werden diese Funktionen mit Visual Basic für Applikationen im mitgelieferten Visual Basic-Editor definiert und diese Funktionen werden automatisch im Arbeitsblatt zugänglich. Auch können Programme geschrieben werden, die Informationen aus dem Arbeitsblatt ziehen, einige Berechnungen durchführen und die Ergebnisse in das Arbeitsblatt melden. In der Figur wird der Name sq benützt und die Funktion sq mit dem mit Excel gelieferten Visual Basic Editor eingeführt. Name Manager zeigt die Tabellenkalkulation der genannten Variablen x & y an. Subroutines Funktionen selbst können nicht in das Arbeitsblatt schreiben, sondern einfach ihre Auswertung zurückgeben. In Microsoft Excel können Subroutinen jedoch Werte oder Text im Unterprogramm direkt in das Tabellenblatt schreiben. Die Figur zeigt den Visual Basic-Code für ein Unterprogramm, das jedes Mitglied der genannten Spaltenvariable x liest, sein Quadrat berechnet und diesen Wert in das entsprechende Element der genannten Spaltenvariable y schreibt. Die y-Säule enthält keine Formel, weil ihre Werte im Unterprogramm berechnet werden, nicht auf dem Tabellenblatt, und einfach eingeschrieben werden. Remote-Tabelle Wenn auf eine Zelle oder Gruppe von Zellen verwiesen wird, die sich nicht innerhalb der aktuellen physischen Tabellenkalkulationsdatei befinden, wird sie als Zugriff auf ein Remote-Tabelle betrachtet. Der Inhalt der referenzierten Zelle kann entweder auf der ersten Referenz mit einem manuellen Update oder neuer auf webbasierte Tabellenblätter als naher Echtzeitwert mit einem vorgegebenen automatischen Refresh-Intervall aufgerufen werden. Diagramme Viele Tabellenkalkulationen erlauben es, Diagramme und Graphen (z.B. Histogramme, Pie-Charts) aus bestimmten Gruppen von Zellen zu erzeugen, die als Zellinhaltsänderung dynamisch wieder aufgebaut werden. Die generierte grafische Komponente kann entweder in das aktuelle Blatt eingebettet oder als separates Objekt hinzugefügt werden. Um ein Excel Histogramm zu erstellen, kann eine auf der REPT-Funktion basierende Formel verwendet werden. Mehrdimensionale Tabellenblätter In den späten 1980er und frühen 1990er Jahren erschienen erste Javelin Software und Lotus Improv. Im Gegensatz zu Modellen in einer herkömmlichen Tabellenkalkulation nutzten sie Modelle auf Objekten, die Variablen genannt werden, nicht auf Daten in Zellen eines Berichts. Diese mehrdimensionalen Tabellen ermöglichten das Betrachten von Daten und Algorithmen in verschiedenen selbstdokumentierenden Weisen, einschließlich gleichzeitiger mehrfach synchronisierter Ansichten. Zum Beispiel könnten sich Benutzer von Javelin durch die Verbindungen zwischen Variablen auf einem Diagramm bewegen, während die logischen Wurzeln und Zweige jeder Variablen sehen. Dies ist ein Beispiel dessen, was vielleicht sein primärer Beitrag des früheren Javelin ist – das Konzept der Rückverfolgbarkeit der Logik oder Modellstruktur eines Benutzers durch seine zwölf Ansichten. Ein komplexes Modell kann von anderen, die keine Rolle in seiner Schöpfung hatten, abgelenkt und verstanden werden. In diesen Programmen war eine Zeitreihe oder eine beliebige Variable ein Objekt an sich, nicht eine Sammlung von Zellen, die in einer Zeile oder Spalte auftreten. Variablen könnten viele Attribute haben, einschließlich vollständiges Bewusstsein für ihre Verbindungen zu allen anderen Variablen, Datenreferenzen und Text- und Bildnotizen. An diesen Objekten wurden Berechnungen vorgenommen, im Gegensatz zu einer Reihe von Zellen, so dass das Hinzufügen von Zwei-Zeit-Serien sie automatisch in Kalenderzeit oder in einem benutzerdefinierten Zeitrahmen ausrichtet. Daten waren unabhängig von Arbeitsblättern – Variablen und damit Daten konnten durch Löschen einer Zeile, Spalte oder des gesamten Arbeitsblatts nicht zerstört werden. So werden die Kosten des Januars von den Einnahmen des Januars abgezogen, unabhängig davon, wo oder ob sie in einem Arbeitsblatt erscheinen. Dies ermöglicht spätere Aktionen in Schwenktischen, mit Ausnahme der flexiblen Manipulation von Berichtstabellen, war aber eine von vielen Fähigkeiten, die von Variablen unterstützt wurden. Darüber hinaus, wenn die Kosten pro Woche und Einnahmen pro Monat eingegeben wurden, könnte das Programm entsprechend zuordnen oder interpolieren. Mit diesem Objektdesign konnten Variablen und ganze Modelle einander mit benutzerdefinierten Variablennamen referenzieren und multidimensionale Analysen und massive, aber leicht editierbare Konsolidierungen durchführen. Trapeze, ein Tabellenblatt auf dem Mac, ging weiter und unterstützte explizit nicht nur Tabellenspalten, sondern auch Matrix-Operatoren. Logische Tabellenkalkulationen Spreadsheets, die eine auf logischen Ausdrucken basierende Formelsprache haben, anstatt arithmetische Ausdrücke sind als logische Tabellenkalkulationen bekannt. Solche Tabellenkalkulationen können verwendet werden, um ihre Zellenwerte deduktiv zu begründen. Programmierprobleme So wie die frühen Programmiersprachen zur Erstellung von Tabellenkalkulationen entwickelt wurden, haben sich Programmiertechniken selbst entwickelt, um Tabellen (auch als Tabellenkalkulation oder Matrizen bezeichnet) von Daten effizienter im Computer selbst zu verarbeiten. Endverbraucherentwicklung Spreadsheets sind ein beliebtes Endbenutzer-Entwicklungstool. EUD bezeichnet Aktivitäten oder Techniken, bei denen Menschen, die nicht professionelle Entwickler sind, automatisiertes Verhalten und komplexe Datenobjekte ohne wesentliche Kenntnisse einer Programmiersprache erstellen. Viele Menschen finden es einfacher, Berechnungen in Tabellenkalkulationen durchzuführen, als indem sie das äquivalente Folgeprogramm schreiben. Dies ist auf mehrere Eigenschaften von Tabellenkalkulationen zurückzuführen. Sie verwenden räumliche Zusammenhänge, um Programmbeziehungen zu definieren. Menschen haben hoch entwickelte Intuitionen über Räume und Abhängigkeiten zwischen den Gegenständen. Die sequentielle Programmierung erfordert gewöhnlich eine Eingabezeile nach Textzeile, die langsam und sorgfältig gelesen werden muss, um verstanden und geändert zu werden. Sie sind vergeben, so dass Teilergebnisse und Funktionen funktionieren. Ein oder mehrere Teile eines Programms können richtig funktionieren, auch wenn andere Teile unfertig oder gebrochen sind. Dies erleichtert das Schreiben und Debuggen von Programmen und schneller. Die sequentielle Programmierung benötigt in der Regel jede Programmzeile und jedes Zeichen, um korrekt für ein Programm zu laufen. Ein Fehler stoppt normalerweise das ganze Programm und verhindert jedes Ergebnis. Obwohl diese Benutzerfreundlichkeit von der Tabellenkalkulation profitiert, kommt es oft mit einem erhöhten Fehlerrisiko. Moderne Tabellenkalkulationen ermöglichen eine Sekundärnotation. Das Programm kann mit Farben, Schriften, Linien usw. versehen werden, um visuelle Hinweise über die Bedeutung von Elementen im Programm zu geben. Erweiterungen, die es Benutzern ermöglichen, neue Funktionen zu erstellen, können die Fähigkeiten einer Funktionssprache bereitstellen. Erweiterungen, die es Benutzern ermöglichen, Modelle aus der Domain des maschinellen Lernens zu erstellen und anzuwenden. Spreadsheets sind vielseitig. Mit ihren booleschen Logik- und Grafikfunktionen ist auch die elektronische Schaltungsgestaltung möglich. Spreadsheets können relationale Daten speichern und Tabellenkalkulationen können alle Abfragen von SQL ausdrücken. Es gibt einen Abfrageübersetzer, der automatisch die Tabellenkalkulation aus dem SQL-Code generiert. Spreadsheet-Programme Ein "Spreadsheet-Programm" ist entworfen, um allgemeine Rechenaufgaben mit räumlichen Beziehungen statt Zeit als primäres Organisationsprinzip auszuführen. Es ist oft bequem, an ein Tabellenblatt als mathematisches Diagramm zu denken, wo die Knoten sind Tabellenkalkulation Zellen, und die Kanten sind Referenzen auf andere Zellen in Formeln angegeben. Dies wird oft als Abhängigkeitsdiagramm des Tabellenblatts bezeichnet. Referenzen zwischen Zellen können räumliche Konzepte wie relative Position und absolute Position sowie benannte Orte nutzen, um die Tabellenkalkulationen leichter zu verstehen und zu verwalten. Spreadsheets versuchen in der Regel, Zellen automatisch zu aktualisieren, wenn die Zellen von der Änderung abhängig sind. Die frühesten Tabellenkalkulationen verwendet einfache Taktiken wie die Auswertung von Zellen in einer bestimmten Reihenfolge, aber moderne Tabellenkalkulation nach einer minimalen Recomputationsreihenfolge aus dem Abhängigkeitsdiagramm. Spätere Tabellenkalkulationen umfassen auch eine begrenzte Fähigkeit, Werte in umgekehrter Richtung zu propagieren, Quellwerte zu ändern, so dass eine bestimmte Antwort in einer bestimmten Zelle erreicht wird. Da Tabellenkalkulationszellenformeln im allgemeinen nicht invertierbar sind, ist diese Technik jedoch etwas begrenzt. Viele der Konzepte, die für sequentielle Programmiermodelle üblich sind, haben Analoga in der Tabellenkalkulationswelt.Beispielsweise ist das sequentielle Modell der indizierten Schleife in der Regel als Zelltabelle mit ähnlichen Formeln dargestellt (in der Regel nur in welchen Zellen sie referenzieren). Spreadsheets haben sich entwickelt, um Scripting-Programmiersprachen wie VBA als Werkzeug für die Erweiterbarkeit zu verwenden, über das, was die Tabellenkalkulationssprache einfach macht. Mängel Während die Tabellen einen großen Schritt nach vorne bei der quantitativen Modellierung darstellten, haben sie Mängel. Ihre Mängel beinhalten die wahrgenommene Unfreundlichkeit alpha-numerischer Zelladressen. Die Forschung von ClusterSeven hat große Diskrepanzen in der Weise gezeigt, wie Finanzinstitute und Unternehmen ihre oft riesigen Nachkommen von Tabellenkalkulationen und unstrukturierten Finanzdaten (einschließlich Komma-separierte Werte (CSV) Dateien und Microsoft Access Datenbanken) verstehen, verwalten und polizeilich verwalten. Eine Studie Anfang 2011 von fast 1.500 Menschen in Großbritannien fand, dass 57% der Tabellenkalkulation Benutzer nie eine formale Ausbildung auf dem Tabellenkalkulation Paket erhalten haben, das sie verwenden. 72% sagten, dass keine interne Abteilung ihre Tabellenblätter für die Genauigkeit überprüft. Nur 13% sagten, dass Interne Audit ihre Tabellenkalkulationen überprüft, während nur 1% von ihrer Risikoabteilung überprüft werden. Spreadsheets haben erhebliche Zuverlässigkeitsprobleme. Forschungsstudien schätzen, dass etwa 94 % der im Feld bereitgestellten Tabellen Fehler enthalten und 5,2 % der Zellen in nicht geprüften Tabellenkalkulationen Fehler enthalten. Trotz der hohen Fehlerrisiken, die oft mit der Tabellenkalkulation und der Verwendung verbunden sind, können bestimmte Schritte unternommen werden, um die Kontrolle und Zuverlässigkeit deutlich zu verbessern, indem die Wahrscheinlichkeit eines Fehlers an ihrer Quelle strukturell reduziert wird. Die praktische Ausdruckskraft von Tabellenkalkulationen kann nur begrenzt werden, wenn ihre modernen Merkmale verwendet werden. Mehrere Faktoren tragen zu dieser Einschränkung bei. Die Realisierung eines komplexen Modells auf Zell-zu-Zeit-Basis erfordert eine mühsame Liebe zum Detail. Autoren haben Schwierigkeiten, sich an die Bedeutungen von Hunderten oder Tausenden von Zelladressen zu erinnern, die in Formeln erscheinen. Diese Nachteile werden durch die Verwendung von genannten Variablen für Zellbezeichnungen gemildert und Variablen in Formeln anstelle von Zellstellen und Zell-by-Zell-Manipulationen verwendet. Mit Graphen lässt sich sofort zeigen, wie sich die Ergebnisse durch Änderungen der Parameterwerte ändern. Die Tabellenkalkulation kann außer einer transparenten Benutzeroberfläche unsichtbar gemacht werden, die die entsprechende Eingabe des Benutzers anfordert, vom Benutzer angeforderte Ergebnisse anzeigt, Berichte erstellt und Fehlerfallen eingebaut hat, um die Eingabe zu korrigieren. Ebenso sind Formeln, die in Bezug auf Zelladressen ausgedrückt werden, schwer, gerade und schwer zu überprüfen. Die Forschung zeigt, dass Tabellenkalkulatoren, die numerische Ergebnisse und Zellformeln überprüfen, keine Fehler mehr als Auditoren finden, die nur numerische Ergebnisse überprüfen. Das ist ein weiterer Grund, um benannte Variablen und Formeln zu verwenden, die benannte Variablen verwenden. Konkret enthalten Tabellenkalkulationen typischerweise viele Kopien derselben Formel. Wenn die Formel geändert wird, muss der Benutzer jede Zelle mit dieser Formel ändern. Die meisten Computersprachen erlauben demgegenüber, eine Formel nur einmal im Code zu erscheinen und Wiederholungen mit Schleifen zu erreichen: sie einfacher zu implementieren und zu auditieren. Die Veränderung einer Dimension erfordert eine große Operation. Wenn Zeilen (oder Spalten) aus einer Tabelle hinzugefügt oder gelöscht werden, muss man die Größe vieler nachgeschalteter Tabellen, die von der Tabelle abhängig sind, anpassen. Dabei ist es oft erforderlich, andere Zellen herum zu bewegen, um Platz für die neuen Spalten oder Zeilen zu machen und Graphdatenquellen einzustellen. In großen Tabellenblättern kann dies extrem zeitaufwendig sein. Das Hinzufügen oder Entfernen einer Dimension ist so schwierig, man muss im Allgemeinen beginnen. Die Tabellenkalkulation als Paradigmen zwingt, über die Dimensionalität rechts vom Beginn der Tabellenkalkulation zu entscheiden, obwohl es oft natürlich ist, diese Entscheidungen zu treffen, nachdem das Tabellenkalkulationsmodell ausgereift ist. Der Wunsch, Dimensionen hinzuzufügen und zu entfernen, entsteht auch in parametrischen und Sensitivitätsanalysen. Die Zusammenarbeit bei der Erstellung von Tabellenkalkulationen kann schwierig sein, wenn eine solche Zusammenarbeit auf der Ebene von Zellen und Zelladressen auftritt. Weitere Probleme im Zusammenhang mit Tabellenkalkulationen sind: Einige Quellen befürworten die Verwendung spezialisierter Software anstelle von Tabellenkalkulationen für einige Anwendungen (Budgeting, Statistiken) Viele Tabellenkalkulationssoftwareprodukte wie Microsoft Excel (Versionen vor 2007) und OpenOffice.org Calc (Versionen vor 2008) hat eine Kapazitätsgrenze von 65,536 Zeilen um 256 Spalten (216 bzw. 28). Dies kann ein Problem für Menschen mit sehr großen Datensätzen darstellen und kann zu Datenverlust führen. Trotz der verstrichenen Zeit ist ein jüngstes Beispiel der Verlust von COVID-19 positiven in den britischen Statistiken für September und Oktober 2020. Mangelnde Prüfung und Revisionskontrolle. Das macht es schwierig zu bestimmen, wer was und wann geändert hat. Dies kann Probleme mit der regulatorischen Compliance verursachen. Die mangelnde Revisionskontrolle erhöht das Fehlerrisiko aufgrund der Unfähigkeit, Änderungen in einem Dokument zu verfolgen, zu isolieren und zu testen. Mangel an Sicherheit. Spreadsheets fehlen Kontrollen, die bestimmte Daten sehen und ändern können. Dies, kombiniert mit dem Mangel an Auditing oben, kann es für jemanden leicht machen, Betrug zu begehen. Da sie lose strukturiert sind, ist es für jemanden leicht, einen Fehler, versehentlich oder absichtlich, durch Eingabe von Informationen an der falschen Stelle oder Ausdrücken von Abhängigkeiten zwischen Zellen (wie in einer Formel) falsch einzuführen. Die Ergebnisse einer Formel (Beispiel = A1*B1) gelten nur für eine einzelne Zelle (d.h. die Zelle, in der sich die Formel befindet - in diesem Fall vielleicht C1), obwohl sie Daten aus vielen anderen Zellen und sogar Echtzeitdaten und tatsächliche Zeiten extrahieren kann. Dies bedeutet, dass, um eine ähnliche Berechnung auf einem Zellenfeld zu verursachen, für jede Zeile des Eingabefeldes eine nahezu identische Formel (aber in einer eigenen Ausgangszelle zurückliegt) wiederholt werden muss. Dies unterscheidet sich von einer Formel in einem herkömmlichen Computerprogramm, das typischerweise eine Berechnung macht, dass sie für alle Eingaben wiederum gilt. Mit aktuellen Tabellenkalkulationen kann diese erzwungene Wiederholung von nahidentischen Formeln nachteilige Folgen aus der Qualitätssicherung haben und ist oft die Ursache vieler Tabellenkalkulationsfehler. Einige Tabellenblätter haben Array-Formeln, um dieses Problem zu lösen. Versuchen Sie, das schiere Volumen von Tabellenkalkulationen zu verwalten, die in einer Organisation ohne richtige Sicherheit, Audit-Strecken, die unbeabsichtigte Einführung von Fehlern und andere oben aufgeführte Elemente kann überwältigend werden. Während es integrierte und Drittanbieter-Tools für Desktop-Tabellen-Anwendungen gibt, die einige dieser Mängel ansprechen, ist das Bewusstsein, und die Verwendung dieser ist in der Regel niedrig. Ein gutes Beispiel dafür ist, dass 55% der Kapitalmarktprofis "nicht wissen", wie ihre Tabellenkalkulationen geprüft werden; nur 6% investieren in eine Drittlösung Spreadsheet-Risiko Spreadsheet-Risiko ist das Risiko, dass ein erheblich falscher Wert aus einer Tabellenkalkulation abgeleitet wird, die bei der Erstellung einer entsprechenden (in der Regel numerischen) Entscheidung verwendet wird. Beispiele sind die Bewertung eines Vermögenswerts, die Ermittlung von Finanzkonten, die Berechnung von medizinischen Dosen oder die Größe eines tragenden Balkens für die Strukturtechnik. Das Risiko kann sich aus der Eingabe fehlerhafter oder betrügerischer Datenwerte, aus Fehlern (oder fehlerhaften Änderungen) innerhalb der Logik des Tabellenkalkulationsblatts oder dem Verzicht auf relevante Aktualisierungen (z.B. aus Terminkursen) ergeben. Einige Einzelinstanzfehler haben über 1 Milliarde US-Dollar. Da das Tabellenkalkulationsrisiko hauptsächlich mit den Handlungen (oder Untätigkeit) von Individuen verknüpft ist, wird es als Unterkategorie des operationellen Risikos definiert. Dennoch ergaben die von ClusterSeven durchgeführten Untersuchungen, dass rund die Hälfte (48%) der c-Level-Exekutive und Senior-Manager bei Unternehmen, die einen Jahresumsatz von über 50 Millionen Pfund berichten, entweder keine Verwendungskontrollen oder schlecht angewandte manuelle Prozesse über die Verwendung von Tabellenkalkulationen bei den Unternehmen. Im Jahr 2013 fand Thomas Herndon, Absolvent der Wirtschaftswissenschaften an der University of Massachusetts Amherst in der Tabellenkalkulation, die von den Ökonomen Carmen Reinhart und Kenneth Rogoff in Growth in a Time of Debt verwendet wurde, einen sehr einflussreichen Journalartikel 2010. Der Reinhart- und Rogoff-Artikel wurde weithin als Rechtfertigung verwendet, um 2010–2013 europäische Sparprogramme zu betreiben. Siehe auch Attribut-Wert-System Vergleich der Tabellenkalkulationssoftware Bewegen und Kopieren in Tabellenkalkulationen Liste der Tabellenkalkulationssoftware Modellaudits Referenzen Externe Links comp.apps.spreadsheets FAQ von Russell Schulz Extending the Concept of Spreadsheet by Jocelyn Paine Spreadsheet at Curlie Spreadsheet – Seine erste Computerisierung (1961–1964) von Richard Mattessich CICS Geschichte und Einführung von IBM 3270 von Bob Yelavich Autoplan & Autotab Artikel von Creative Karma Spreadsheets in Science