Python ist eine interpretierte Programmiersprache auf hohem Niveau. Seine Designphilosophie betont die Codelesbarkeit mit der Verwendung von signifikanter Einbuchtung. Seine Sprachkonstrukte sowie sein objektorientierter Ansatz zielen darauf ab, Programmierern dabei zu helfen, klaren, logischen Code für kleine und groß angelegte Projekte zu schreiben. Python ist dynamisch eingegeben und Müll gesammelt. Es unterstützt mehrere Programmierparadigmen, einschließlich strukturierter (insbesondere verfahrenstechnischer) objektorientierter und funktionaler Programmierung. Es wird oft als "Batterien enthalten" Sprache aufgrund seiner umfassenden Standardbibliothek beschrieben. Guido van Rossum begann in den späten 1980er Jahren an Python zu arbeiten, als Nachfolger der ABC Programmiersprache und veröffentlichte sie 1991 als Python 0.9.0. Python 2.0 wurde im Jahr 2000 veröffentlicht und hat neue Funktionen wie Listenverstehen und ein Müllsammelsystem mit Referenzzählung eingeführt. Python 3.0 wurde 2008 veröffentlicht und war eine große Revision der Sprache, die nicht völlig rückwärtskompatibel ist. Python 2 wurde 2020 mit Version 2.7.18 eingestellt. Python zählt konsequent zu den beliebtesten Programmiersprachen. Geschichte Python wurde in den späten 1980er Jahren von Guido van Rossum in Centrum Wiskunde & Informatica (CWI) in den Niederlanden als Nachfolger von ABC Programmiersprache konzipiert, die von SETL inspiriert wurde, die in der Lage ist, mit dem Amoeba Betriebssystem zu umgehen. Seine Umsetzung begann im Dezember 1989. Van Rossum war bis zum 12. Juli 2018 alleinige Verantwortung für das Projekt, als der Lead-Entwickler, als er seinen "permanenten Urlaub" aus seiner Verantwortung als Pythons Benevolent Dictator For Life bekannt gab, ein Titel, den die Python-Gemeinde ihm zuteilte, um sein langfristiges Engagement als den Hauptentscheidungsmacher des Projekts zu reflektieren. Im Januar 2019 wählten aktive Python-Kernentwickler einen 5-köpfigen "Steering Council", um das Projekt zu leiten. Ab 2021 sind die aktuellen Mitglieder dieses Rates Barry Warsaw, Brett Cannon, Carol Willing, Thomas Wouters und Pablo Galindo Salgado. Python 2.0 wurde am 16. Oktober 2000 veröffentlicht, mit vielen wichtigen neuen Features, darunter ein zyklussicherer Müllsammler und Unterstützung für Unicode. Python 3.0 wurde am 3. Dezember 2008 veröffentlicht. Es war eine große Revision der Sprache, die nicht völlig rückwärtskompatibel ist. Viele seiner Hauptmerkmale wurden in die Python 2.6.x und 2.7.x-Versionsserie zurückgeschoben. Die Freigaben von Python 3 umfassen das 2to3-Dienstprogramm, das die Übersetzung von Python 2 Code zu Python 3 automatisiert (zumindest teilweise). Python 2.7's End-of-Life-Datum wurde Anfang 2015 dann auf 2020 aus Sorge verschoben, dass ein großer Körper bestehender Code nicht leicht an Python 3 weitergeleitet werden konnte. Es werden keine Sicherheitspatches oder andere Verbesserungen mehr freigegeben. Mit dem Lebensende von Python 2 werden nur Python 3.6.x und später unterstützt. Python 3.9.2 und 3.8.8 wurden als alle Versionen von Python (einschließlich 2.7) Sicherheitsprobleme, die zu einer möglichen Remotecode-Ausführung und Web-Cache-Vergiftung führten, beschleunigt. Designphilosophie und Features Python ist eine multiparadigme Programmiersprache. Objektorientierte Programmierung und strukturierte Programmierung werden vollständig unterstützt, und viele seiner Funktionen unterstützen die funktionelle Programmierung und die aspektorientierte Programmierung (einschließlich Metaprogrammierung und Metaobjekte (magische Methoden)). Viele andere Paradigmen werden über Erweiterungen unterstützt, einschließlich Design durch Vertrags- und Logikprogrammierung. Python verwendet dynamisches Tippen und eine Kombination aus Referenzzählung und einem zyklusweisen Müllsammler für das Speichermanagement. Es verfügt auch über dynamische Namensauflösung (späte Bindung), die Verfahren und variable Namen während der Programmausführung bindet. Das Design von Python unterstützt die funktionelle Programmierung in der Lisp-Tradition. Es hat Filter,mapandreduce Funktionen; Listenverständnisse, Wörterbücher, Sätze und Generatorausdrücke. Die Standardbibliothek verfügt über zwei Module (Erzeuge und Functools), die Funktionswerkzeuge von Haskell und Standard ML implementieren. Die Kernphilosophie der Sprache ist in dem Dokument The Zen of Python (PEP 20), das Aphorismen wie: Schöne ist besser als hässlich. Explicit ist besser als implizit. Einfach ist besser als komplex. Komplex ist besser als kompliziert. Lesbarkeit zählt. Anstatt all seine Funktionalität in seinen Kern eingebaut zu haben, wurde Python als sehr erweiterbar (mit Modulen) konzipiert. Diese kompakte Modularität hat es besonders beliebt gemacht, um programmierbare Schnittstellen zu bestehenden Anwendungen hinzuzufügen. Van Rossums Vision einer kleinen Kernsprache mit einer großen Standard-Bibliothek und leicht erweiterbaren Dolmetscher entstammten seinen Frustrationen mit ABC, die den entgegengesetzten Ansatz verarmten. Python strebt nach einer einfacheren, weniger kumulierten Syntax und Grammatik und gibt Entwicklern eine Wahl in ihrer Codierungsmethodik. Im Gegensatz zu Perls "es gibt mehr als eine Möglichkeit, es zu tun" Motto, Python umarmt eine "es sollte eine - und vorzugsweise nur eine -obvious Weise, es zu tun" Designphilosophie. Alex Martelli, Fellow der Python Software Foundation und Python Buchautor, schreibt: "Um etwas als clever zu beschreiben, gilt nicht als Kompliment in der Python-Kultur. " Die Entwickler von Python bemühen sich, eine vorzeitige Optimierung zu vermeiden und Patches an unkritische Teile der CPython-Referenz-Implementierung abzulehnen, die zu den Kosten der Klarheit marginale Geschwindigkeitserhöhungen bieten würde. Wenn Geschwindigkeit wichtig ist, kann ein Python Programmierer zeitkritische Funktionen auf Erweiterungsmodule, die in Sprachen wie C geschrieben sind, verschieben oder PyPy, einen Just-in-Time-Compiler verwenden. Cython ist auch verfügbar, was ein Python-Skript in C übersetzt und direkte C-Level-API-Anrufe in den Python-Interpreter macht. Pythons Entwickler wollen die Sprache Spaß zu benutzen. Dies spiegelt sich in seinem Namen – einer Hommage an die britische Komödiegruppe Monty Python – und in gelegentlich spielerischen Ansätzen für Tutorials und Referenzmaterialien wider, wie beispielsweise Beispiele, die auf Spam und Eier (ein Hinweis auf eine Monty Python Skizze) anstatt auf den Standard foo und Bar beziehen. Ein häufiger Neologismus in der Python-Gemeinschaft ist pythonic, die eine breite Palette von Bedeutungen im Zusammenhang mit Programmstil haben kann. Um zu sagen, dass Code pythonic ist zu sagen, dass es Python-Idiomen gut verwendet, dass es natürlich ist oder zeigt fließend in der Sprache, dass es mit Pythons minimalistische Philosophie und Betonung auf Lesbarkeit entspricht. Im Gegensatz dazu wird Code genannt, der schwer zu verstehen ist oder wie eine grobe Transkription aus einer anderen Programmiersprache liest. Benutzer und Bewunderer von Python, insbesondere diejenigen, die als kenntnisreich oder erfahren angesehen werden, werden oft als Pythonistas bezeichnet. Syntax und Semantik Python soll eine leicht lesbare Sprache sein. Seine Formatierung ist visuell unkluttert, und es verwendet oft englische Schlüsselwörter, wo andere Sprachen Pünctuation verwenden. Im Gegensatz zu vielen anderen Sprachen, es verwendet nicht lockige Klammern, um Blöcke zu begrenzen, und Semikolonen nach Aussagen sind erlaubt, aber sind selten, wenn überhaupt, verwendet. Es hat weniger syntaktische Ausnahmen und Sonderfälle als C oder Pascal. Indentation Python verwendet Whitespace-Einbuchtung, anstatt Locken oder Schlüsselwörter, um Blöcke zu begrenzen. Eine Erhöhung der Einbuchtung kommt nach bestimmten Aussagen; eine Abnahme der Einbuchtung bedeutet das Ende des Stromblocks. So stellt die visuelle Struktur des Programms die semantische Struktur des Programms genau dar. Diese Funktion wird manchmal als Off-side-Regel bezeichnet, die einige andere Sprachen teilen, aber in den meisten Sprachen hat die Einbuchtung keine semantische Bedeutung. Die empfohlene Einschnittgröße beträgt vier Räume. Aussagen und Kontrollfluss Pythons Aussagen beinhalten (u.a.): Die Zuordnungserklärung mit einem einzigen Gleichzeichen .=Die if-Anweisung, die bedingt einen Codeblock ausführt, zusammen mit anderen und elif (eine Kontraktion von sonst-if). Die Aussage, die über ein iterables Objekt iteriert, erfasst jedes Element zu einer lokalen Variable für den Einsatz durch den beigefügten Block. Die währende Aussage, die einen Codeblock ausführt, solange seine Bedingung wahr ist. Die Testaussage, mit der Ausnahme von Klauseln Ausnahmen in seinem beigefügten Codeblock erwischt und behandelt werden können; sie sorgt auch dafür, dass der Clean-up-Code in einem endlichen Block immer laufen wird, unabhängig davon, wie der Block austritt. Die Anhebungserklärung, die verwendet wird, um eine bestimmte Ausnahme zu erheben oder eine erwischte Ausnahme neu zu erschüttern. Die Klassenerklärung, die einen Codeblock ausführt und seinen lokalen Namensraum einer Klasse anschließt, zur Verwendung in objektorientierter Programmierung. Die def-Anweisung, die eine Funktion oder Methode definiert. Die mit Angabe, die einen Codeblock innerhalb eines Kontextmanagers umschließt (z.B. das Erfassen eines Schlosses vor Ablauf des Codeblocks und das Lösen des Schlosses danach oder Öffnen einer Datei und anschließendes Schließen), wodurch eine ressourcenakquisition-is-initialization (RAII)-ähnliche Verhaltensweise ermöglicht und ein gemeinsames Try/final-Idiom ersetzt wird. Die Bruchaussage, aus einer Schleife. Die weitere Aussage, überspringt diese Iteration und geht mit dem nächsten Artikel weiter. Die del-Anweisung entfernt eine Variable, was bedeutet, dass die Referenz vom Namen auf den Wert gelöscht wird und versuchen, diese Variable zu verwenden, wird einen Fehler verursachen. Eine gelöschte Variable kann wieder zugewiesen werden. Die Passerklärung, die als NOP dient. Es wird syntaktisch benötigt, um einen leeren Codeblock zu erstellen. Die während des Debuggings verwendete Erklärung zur Überprüfung der Bedingungen, die gelten sollten. Die Ausbeuteangabe, die einen Wert aus einer Generatorfunktion und -ausbeute zurückgibt, ist auch ein Bediener. Diese Form wird zur Durchführung von Koroutinen verwendet. Die Rückgabeanweisung, verwendet, um einen Wert aus einer Funktion zurückzugeben. Die Importerklärung, die verwendet wird, um Module zu importieren, deren Funktionen oder Variablen im aktuellen Programm verwendet werden können. Die Zuordnungserklärung (=) arbeitet durch Bindung eines Namens als Referenz an ein separates, dynamisch arretiertes Objekt. Variablen können anschließend jederzeit an jedes Objekt zurückgebunden werden. In Python ist ein variabler Name ein gattungsgemäßer Referenzhalter und weist keinen ihm zugeordneten festen Datentyp auf. Eine Variable bezieht sich jedoch zu einem bestimmten Zeitpunkt auf ein Objekt, das einen Typ hat. Dies wird als dynamische Schreibweise bezeichnet und wird mit statisch eingegebenen Programmiersprachen kontrastiert, wobei jede Variable nur Werte eines bestimmten Typs enthalten kann. Python unterstützt nicht die Endanrufoptimierung oder erstklassige Fortführungen, und nach Guido van Rossum wird es nie. Allerdings ist eine bessere Unterstützung für koroutineähnliche Funktionalität vorgesehen, indem Pythons Generatoren erweitert werden. Vor 2.5 waren Generatoren faul Iteratoren; Informationen wurden unidirektional aus dem Generator geleitet. Von Python 2.5 ist es möglich, Informationen wieder in eine Generatorfunktion zu übertragen, und von Python 3.3 kann die Information durch mehrere Stackebenen geleitet werden. ExpressionsSome Python-Expressionen sind ähnlich wie in Sprachen wie C und Java, während einige nicht sind: Addition, Subtraktion und Multiplikation sind gleich, aber das Verhalten der Division unterscheidet sich. Es gibt zwei Arten von Divisionen in Python. Sie sind Bodenaufteilung (oder ganze Teilung) // und Floating-Point/Division. Python nutzt auch den **-Operator für Exponentiation. Von Python 3.5 wurde der neue @ infix Operator eingeführt. Es soll von Bibliotheken wie NumPy zur Matrixmultiplikation verwendet werden. Aus Python 3.8 wurde die Syntax :=, genannt "walrus operator" eingeführt. Es gibt Werte für Variablen als Teil eines größeren Ausdrucks. In Python, == vergleicht nach Wert, versus Java, die Zahlen nach Wert und Objekte nach Referenz vergleicht. (Wertvergleiche in Java auf Objekten können mit der gleichs() Methode durchgeführt werden.) Python's ist der Bediener kann verwendet werden, um Objektidentitäten zu vergleichen (vgl. Referenz). In Python können Vergleiche gekettet werden, z.B. a <=b <= c.Python verwendet die Wörter und, oder, nicht für seine boolean Operatoren anstelle der symbolischen &&, ||, !util in Java und C. Python hat eine Art Ausdruck, der als Listenverständnis bezeichnet wird, sowie eine allgemeinere Ausdrucksform, die als Generatorausdruck bezeichnet wird. Anonyme Funktionen werden mit Lambda-Ausdrücken implementiert; diese sind jedoch begrenzt, indem der Körper nur ein Ausdruck sein kann. Bedingte Ausdrücke in Python werden wie x geschrieben, wenn c sonst y (verschieden in der Reihenfolge der Operanden aus dem c ?x : y Operator common to many other languages). Python unterscheidet zwischen Listen und Tupeln. Listen werden als [1, 2, 3,] geschrieben und können nicht als Schlüssel der Wörterbücher verwendet werden (diktionäre Schlüssel müssen in Python unveränderlich sein). Die Tupel werden als (1, 2, 3,) geschrieben, sind unveränderlich und können somit als Schlüssel der Wörterbücher verwendet werden, sofern alle Elemente des Tupels unveränderlich sind. Der + Operator kann verwendet werden, um zwei Tupel zu kontaminieren, die ihren Inhalt nicht direkt ändern, sondern eine neue Tupel, die die Elemente beider bereitgestellten Tupel enthält. Da also die Größe t zunächst gleich (1, 2, 3) ausführt t = t + (4, 5) zunächst t + (4, 5) auswertet, die dann t (1, 2, 3, 4, 5) zurückgegeben wird, wodurch der Inhalt t effektiv "modifiziert wird, während sie der unveränderlichen Natur von Tupelobjekten entspricht. Parenthesen sind optional für Schüler in eindeutigen Kontexten. Python verfügt über Sequenz-Entpacken, wobei mehrere Ausdrücke, jede Bewertung zu allem, was zugeordnet werden kann (eine Variable, eine beschreibbare Eigenschaft, etc.), identisch mit denen, die Tupel-Litale bilden und insgesamt auf der linken Seite des gleichen Zeichens in einer Zuordnungserklärung gesetzt werden. Die Aussage erwartet ein iterables Objekt auf der rechten Seite des gleichen Zeichens, das die gleiche Anzahl von Werten wie die bereitgestellten schreibbaren Ausdrücke erzeugt, wenn es durch iteriert und durch es iteriert wird, wobei jeder der erzeugten Werte dem entsprechenden Ausdruck auf der linken Seite zuordnet. Python hat einen "String-Format" Operator 0% Dies funktioniert analog zu Printf-Formatketten in C, z.B. "spam=%s Eggs=%d" % (blah, 2) wertet auf "spam=blah Eggs=2". In Python 3 und 2.6,+ wurde dies durch die Format()-Methode der Str-Klasse ergänzt, z.B. "spam={0} Eggs={1}".format("blah, 2). Python 3.6 hinzugefügt f-strings: blah = blah; Eier = 2; f'spam={blah} Eier={eggs}'. Strings in Python können konkatiert werden, indem sie (gleiche Bediener wie zum Hinzufügen von Ganzzahlen und Schwimmern) hinzugefügt werden. E.g Spam + Eier kehrt Spameggs zurück". Auch wenn Ihre Strings Zahlen enthalten, werden sie immer noch als Strings anstatt als ganze Zahlen hinzugefügt. E.g 2 + 2 kehrt 22" zurück. Python hat verschiedene Arten von String-Literaturen: Strings begrenzt durch einzelne oder doppelte Anführungszeichen. Im Gegensatz zu Unix Shells funktionieren Perl- und Perl-beeinflusste Sprachen, einzelne Zitatmarken und doppelte Zitatmarken identisch. Beide Arten von String verwenden den Backslash (\) als Fluchtzeichen. String-Interpolation wurde in Python 3.6 als "formatierte String-Literals" zur Verfügung gestellt. Dreifach zitierte Strings, die mit einer Serie von drei einzelnen oder doppelten Zitatmarken beginnen und enden. Sie können mehrere Zeilen und Funktionen wie hier Dokumente in Shells, Perl und Ruby überspannen. Raw String-Sorten, gekennzeichnet durch Präfixieren der String-Literal mit r. Escape-Sequenzen werden nicht interpretiert; daher sind rohe Strings nützlich, wo buchstäbliche Backslashes üblich sind, wie regelmäßige Ausdrücke und Windows-Stil Pfade. Vergleichen Sie @-quoting in C#.Python hat Array-Index und Array-Slicing-Expressionen auf Listen, die als ein[key,] a[start:stop] oder ein[start:stop:step] bezeichnet werden. Indexe sind nullbasiert und negative Indexe sind relativ zum Ende. Slices nimmt Elemente vom Startindex bis zum Stop-Index, aber nicht inklusive. Der dritte Schichtparameter, Schritt oder Schritt genannt, erlaubt es, Elemente übersprungen und rückgängig zu machen. Slice-Indizes können entfallen, beispielsweise a][: gibt eine Kopie der gesamten Liste zurück. Jedes Element einer Scheibe ist ein flaches Exemplar. In Python wird eine Unterscheidung zwischen Ausdrücken und Aussagen im Gegensatz zu Sprachen wie Common Lisp, Scheme oder Ruby starr durchgesetzt. Dies führt dazu, einige Funktionalitäten zu duplizieren. Zum Beispiel: Listenverstehen vs. for-loops Bedingte Ausdrücke vs. wenn Blöcke Das eval() vs. exec() eingebaute Funktionen (in Python 2, Exec ist eine Aussage); das ehemalige ist für Ausdrücke, Letzteres ist für Aussagen. Aussagen können nicht Teil eines Ausdrucks sein, so dass Listen und andere Verständnisse oder Lambda-Ausdrücke, alle Ausdrucksformen, keine Aussagen enthalten können. Ein besonderer Fall ist, dass eine Zuordnungserklärung wie a = 1 nicht Teil der bedingten Expression einer bedingten Aussage sein kann. Dies hat den Vorteil, dass ein klassischer C-Fehler beim Fehlverhalten eines Zuordnungsoperators = für einen Gleichheitsoperator == unter Bedingungen vermieden wird: wenn (c = 1) { ... } syntaktisch gültig ist (aber wahrscheinlich unbeabsichtigt) C-Code, wenn c = 1: ... einen Syntaxfehler in Python verursacht. Methoden Methoden auf Objekten sind Funktionen, die an der Objektklasse angebracht sind, die Syntax-Instanz. Methode(Argument) ist für normale Methoden und Funktionen syntaktischer Zucker für Class.method(Instanz, Argument). Python-Methoden haben einen expliziten Selbstparameter, um auf Instanzdaten zuzugreifen, im Gegensatz zum impliziten Selbst (oder das) in einigen anderen objektorientierten Programmiersprachen (z.B. C,+ Java, Ziel-C oder Ruby). Abgesehen von diesem Python bietet auch Methoden, manchmal als Dünenmethoden aufgrund ihrer Namen beginnen und enden mit Doppel-Unterstrichen, um die Funktionalität der benutzerdefinierten Klasse zu unterstützen native Funktionen wie Druck, Länge, Vergleich, Unterstützung für arithmetische Operationen, Typ-Konvertierung und vieles mehr. Typing Python verwendet Ententyping und hat Objekte, aber nicht eingegebene Variablennamen eingegeben. Typ-Zwänge werden nicht zu kompilieren Zeit überprüft; vielmehr können Operationen auf einem Objekt scheitern, was bedeutet, dass das angegebene Objekt nicht von einem geeigneten Typ ist. Obwohl Python dynamisch eingegeben wird, ist Python stark geschrieben, forbidding-Operationen, die nicht gut definiert sind (z.B. eine Zahl zu einem String hinzufügen), anstatt still zu versuchen, Sinn zu machen. Python ermöglicht es Programmierern, ihre eigenen Typen mit Klassen zu definieren, die am häufigsten für objektorientierte Programmierung verwendet werden. Neue Klasseninstanzen werden aufgebaut, indem man die Klasse (z.B. SpamClass() oder EggsClass,() anruft, und die Klassen sind Instanzen des Metaklassentyps (es selbst eine Instanz von sich selbst), die eine Metaprogrammierung und Reflexion ermöglichen. Vor der Version 3.0, Python hatte zwei Arten von Klassen: alt-style und neu-style. Die Syntax beider Stile ist gleich, wobei der Unterschied darin besteht, ob das Klassenobjekt direkt oder indirekt vererbt wird (alle neuen Stilklassen erben sich aus Objekt und sind Instanzen des Typs). In Versionen von Python 2 ab Python 2.2 können beide Arten von Klassen verwendet werden. Old-style-Klassen wurden in Python 3.0 eliminiert.Der langfristige Plan ist die schrittweise Eingabe zu unterstützen und von Python 3.5, die Syntax der Sprache erlaubt die Angabe statischer Typen, aber sie werden nicht in der Standard-Implementierung, CPython überprüft. Ein experimenteller optionaler statischer Typ-Checker namens mypy unterstützt die Konfigurations-Zeit-Typprüfung.^a nicht direkt mit dem Namen Arithmetik erreichbar Python hat die üblichen Symbole für arithmetische Operatoren (+, -, *, /), den Bodenteiler // und den Modulo-Betrieb % (wo der Rest negativ sein kann, z.B. 4 % -3= -2). Es hat auch ** für die Exponentiation, z.B. 5**3= 125 und 9*0.5 == 3.0, und eine Matrix multiplizieren Operator @ .Diese Operatoren arbeiten wie bei herkömmlichen Mathematik; mit den gleichen Regeln, die Operatoren infix (+ und - können auch nicht nur positive bzw. negative Zahlen darstellen). Die Aufteilung zwischen Ganzzahlen führt zu Floating-Point-Ergebnissen. Das Verhalten der Division hat sich im Laufe der Zeit deutlich geändert: Aktueller Python (d.h. seit 3.0) hat sich geändert / immer als Floating-Point-Division, z.B. 5/2 == 2.5.Python 2.2 änderte die ganze Teilung in Richtung negativer Unendlichkeit, z.B. 7/3 == 2and -7/3= -3.Die Bodenabteilung // Operator wurde eingeführt. So 7//3 == 2, -7//3= -3, 7,5//3 == 2,0 und -7,5//3= -3,0. Durch die Hinzufügung aus der zukünftigen Importabteilung wird ein Modul die Python 3.0-Regeln für die Division verwenden (siehe nächstes). Python 2.1 und früher verwendet C's Division Verhalten. Der/Operator ist eine ganze Teilung, wenn beide Operanden ganze Zahlen sind, und andernfalls eine Floating-Point Teilung. Integer Division Runden in Richtung 0, z.B. 7/3 == 2 und 7/3===-2.InPython Begriffe, / ist wahre Teilung (oder einfach Teilung,) und // ist Bodenteilung./ bevor Version 3.0 ist klassische Teilung. Die Abrundung auf negative Unendlichkeit, wenn auch anders als die meisten Sprachen, fügt Konsistenz. So bedeutet es beispielsweise, dass die Gleichung (a + b)/b = a//b + 1 stets wahr ist. Es bedeutet auch, dass die Gleichung b*(a/b) + a%b = a sowohl für positive als auch für negative Werte a gilt. Die Aufrechterhaltung der Gültigkeit dieser Gleichung bedeutet jedoch, dass während das Ergebnis von a%b, wie erwartet, im halboffenen Intervall [0, b,), in dem b eine positive ganze Zahl ist, es im Intervall (b, 0] liegen muss, wenn b negativ ist. Python bietet eine runde Funktion zum Runden eines Schwimmers auf die nächste ganze Zahl. Python 3 verwendet zum Krawattenbruch rund bis sogar: rund (1.5) und rund (2.5) produzieren beide 2.Versionen vor 3 gebrauchtem Rund-aus-Null: rund(0.5) beträgt 1.0, rund(-0.5) beträgt -1.0. Python erlaubt booleische Ausdrücke mit mehreren Gleichheitsverhältnissen in einer Weise, die mit der allgemeinen Verwendung in der Mathematik konsistent ist. Der Ausdruck a < b < c prüft beispielsweise, ob a kleiner als b ist und b kleiner als c ist. C-vermittelte Sprachen interpretieren diesen Ausdruck unterschiedlich: In C würde der Ausdruck zunächst eine < b auswerten, was zu 0 oder 1 führt und dieses Ergebnis dann mit c.Python für alle Ganzzahloperationen willkürlich-präzis arithmetic verglichen würde. Der Decimal Typ/Klasse im Dezimalmodul liefert dezimale Floating-Point-Nummern auf eine vordefinierte willkürliche Präzision und mehrere Rundungsmodi. Die Fraktionsklasse im Fraktionsmodul liefert für rationale Zahlen willkürliche Präzision. Aufgrund der umfangreichen Mathematik-Bibliothek von Python und der Drittbibliothek NumPy, die die nativen Fähigkeiten weiter erweitert, wird es häufig als wissenschaftliche Schriftsprache verwendet, um Probleme wie numerische Datenverarbeitung und Manipulation zu helfen. Programmierbeispiele Hallo Weltprogramm: Programm zur Berechnung des Faktors einer positiven Ganzzahl: LibrariesPythons große Standardbibliothek, die allgemein als eine ihrer größten Stärken bezeichnet wird, bietet Werkzeuge, die für viele Aufgaben geeignet sind. Für internetorientierte Anwendungen werden viele Standardformate und Protokolle wie MIME und HTTP unterstützt. Es umfasst Module zur Erstellung von grafischen Benutzeroberflächen, die Verbindung zu relationalen Datenbanken, die Erzeugung von Pseudozufallszahlen, arithmetisch mit willkürlich präzisen Dezimalen, die Manipulation von regulären Ausdrücken und Einheitstests. Einige Teile der Standardbibliothek werden durch Spezifikationen abgedeckt (z.B. die Web Server Gateway Interface (WSGI) Implementierung wsgiref folgt PEP 333,) aber die meisten Module sind nicht. Sie werden durch ihren Code, interne Dokumentation und Test-Suiten angegeben. Da die meisten Standardbibliotheken jedoch plattformübergreifenden Python-Code sind, brauchen nur wenige Module eine Änderung oder Neubestellung für Varianten-Implementierungen. Ab März 2021 enthält der Python Package Index (PyPI), das offizielle Repository für Python-Software von Drittanbietern, über 290.000 Pakete mit einer Vielzahl von Funktionen, darunter: Entwicklungsumgebungen Die meisten Python-Implementierungen (einschließlich CPython) umfassen eine Lese-Eval-Druckschleife (REPL), mit der sie als Befehlszeilen-Interpreter fungieren können, für die der Benutzer nacheinander Aussagen eingibt und sofort Ergebnisse erhält. Andere Shells, einschließlich IDLE und IPython, fügen weitere Fähigkeiten wie verbesserte Auto-Vervollständigung, Session-Zustand und Syntax-Highlighting hinzu. Neben Standard-Desktop-integrierten Entwicklungsumgebungen gibt es Web-Browser-basierte IDEs; SageMath (beabsichtigt für die Entwicklung von Wissenschaft und math-bezogenen Python-Programmen);PythonAnywhere, eine browserbasierte IDE und Hosting-Umgebung; und Canopy IDE, eine kommerzielle Python IDE, die wissenschaftliche Computing betont. Umsetzungen Referenzumsetzung CPython ist die Referenzumsetzung von Python. Es wird in C geschrieben, den C89-Standard mit mehreren ausgewählten C99-Features (mit späteren C-Versionen, es wird als veraltet betrachtet; CPython umfasst eigene C-Erweiterungen, aber Drittanbieter-Erweiterungen sind nicht auf ältere C-Versionen beschränkt, kann z.B. mit C11 oder C++ implementiert werden). Es kompiliert Python-Programme in einen Zwischenbytecode, der dann von seiner virtuellen Maschine ausgeführt wird. CPython wird mit einer großen Standardbibliothek in einer Mischung aus C und nativem Python vertrieben. Es ist für viele Plattformen, einschließlich Windows (ab Python 3.9, der Python Installer absichtlich nicht installiert unter Windows 7 und 8; Windows XP wurde unterstützt bis Python 3.5) und die meisten modernen Unix-ähnlichen Systeme, einschließlich macOS (und Apple M1 Macs, seit Python 3.9.1, mit experimentellem Installer) und inoffizielle Unterstützung für z.B. VMS. Die Plattformübertragbarkeit war eine seiner frühesten Prioritäten, während der Python 1 und 2 Zeitrahmen, wurden sogar OS/2 und Solaris unterstützt; Unterstützung wurde seither für viele Plattformen gesunken. Weitere Implementierungen PyPy ist ein schneller, konformer Dolmetscher von Python 2.7 und 3.6. Sein Just-in-time-Compiler bringt eine signifikante Geschwindigkeitsverbesserung gegenüber CPython, aber mehrere in C geschriebene Bibliotheken können damit nicht verwendet werden. Stackless Python ist eine bedeutende Gabel von CPython, die Mikrothreads implementiert; es verwendet nicht den Call Stack in der gleichen Weise, so dass massive gleichzeitige Programme. PyPy hat auch eine stapellose Version. MicroPython und CircuitPython sind für Mikrocontroller optimierte Python 3 Varianten, darunter Lego Mindstorms EV3. Pyston ist eine Variante der Python-Laufzeit, die eine just-in-time-Compilation verwendet, um die Ausführung von Python-Programmen zu beschleunigen. Aschen ist eine leistungsorientierte Gabel von CPython 3.8, die eine Reihe von Optimierungen enthält, einschließlich Bytecode-Inline-Caching, Eager-Auswertung von Koroutinen, eine Methode-at-a-time JIT und einen experimentellen Bytecode-Compiler. Nicht unterstützte Implementierungen Andere just-in-time Python-Compiler wurden entwickelt, sind aber jetzt nicht unterstützt: Google begann ein Projekt namens Unladen Swallow im Jahr 2009, mit dem Ziel, den Python-Interpreter fünffach mit dem LLVM zu beschleunigen, und seine Multithreading Fähigkeit, Tausende von Kernen zu skalieren, während gewöhnliche Implementierungen leiden unter dem globalen Dolmetscherschloss. Psyco ist ein diskontinuierter Just-in-time-Spezifikations-Compiler, der mit CPython integriert und Bytecode zu Maschinencode zu Laufzeit transformiert. Der emittierte Code ist auf bestimmte Datentypen spezialisiert und ist schneller als der Standard-Python-Code. Psyco unterstützt Python 2.7 nicht oder später. PyS60 war ein Python 2 Dolmetscher für Serie 60 Handys, die 2005 von Nokia veröffentlicht wurden. Es implementierte viele der Module aus der Standardbibliothek und einige weitere Module zur Integration mit dem Symbian Betriebssystem. Das Nokia N900 unterstützt auch Python mit GTK Widget-Bibliotheken, wodurch Programme geschrieben und auf dem Zielgerät ausgeführt werden können. Schüler in andere Sprachen Es gibt mehrere Compiler zu hochrangigen Objektsprachen, mit entweder unbeschränktem Python, einem eingeschränkten Untersatz von Python, oder einer Sprache ähnlich Python als Quellsprache: Cython compiles (a superset of)Python 2.7 bis C (wobei der resultierende Code auch mit Python 3 und z.B. C++ verwendbar ist). Nuitka Kompile Python in C++. Pythran kompiliert eine Teilmenge von Python 3 bis C++.Pyrex (späteste Version 2010) und Shed Skin (späteste Version 2013) kompiliert zu C bzw. C+. Google's Grumpy (letzte Version 2017) transpiles Python 2 to Go.IronPython (jetzt von Microsoft verlassen) ermöglicht die Ausführung von Python 2.7 Programmen auf der .NETCommon Language Runtime. Jython kompiliert Python 2.7 auf Java-bytecode, so dass die Verwendung der Java-Bibliotheken aus einem Python-Programm. MyHDL ist eine Python-basierte Hardware-Beschreibungssprache (HDL), die MyHDL-Code in Verilog oder VHDL-Code umwandelt. Numba verwendet LLVM, um eine Untergruppe von Python zum Maschinencode zu kompilieren. Brython, Transcrypt und Pyjs (letzte Version 2012) kompilieren Python zu JavaScript. RPython kann C kompiliert werden und wird verwendet, um den PyPy-Interpreter von Python zu bauen. Performance Ein Leistungsvergleich verschiedener Python-Implementierungen über eine nicht-numerische (kombinatorische) Arbeitsbelastung wurde bei EuroSciPy 13 vorgestellt. Die Leistung von Python im Vergleich zu anderen Programmiersprachen wird auch von The Computer Language Benchmarks Game bewertet. Die Entwicklung von Python wird weitgehend durch den Python Enhancement Proposal (PEP)-Prozess, den primären Mechanismus für das Vorschlagen großer neuer Features, das Sammeln von gemeinschaftlichen Eingaben in Fragen und die Dokumentation von Python Design-Entscheidungen durchgeführt. Python Codierstil ist in PEP 8 abgedeckt. Herausragende PEPs werden von der Gemeinde Python und dem Lenkungsrat geprüft und kommentiert. Die Verbesserung der Sprache entspricht der Entwicklung der CPython Referenz-Implementierung. Die Mailingliste python-dev ist das primäre Forum für die Entwicklung der Sprache. Spezifische Probleme werden im Roundup Bugtracker diskutiert, der bei Bugs gehostet wird. python.org. Die Entwicklung erfolgte ursprünglich auf einem selbstgehosteten Quellcode-Repository mit Mercurial, bis Python im Januar 2017 nach GitHub zog. CPython's public releases kommen in drei Arten, unterschieden durch welchen Teil der Versionsnummer erhöht wird: Backward-inkompatible Versionen, bei denen der Code voraussichtlich brechen wird und manuell portiert werden muss. Der erste Teil der Versionsnummer wird inkrementiert. Diese Releases passieren selten – Version 3.0 wurde 8 Jahre nach 2.0 veröffentlicht. Wichtige oder Feature-Releases, etwa alle 18 Monate, aber mit der Annahme eines jährlichen Release-Cadence beginnend mit Python 3.9 wird erwartet einmal im Jahr passieren. Sie sind weitgehend kompatibel, stellen aber neue Features vor. Der zweite Teil der Versionsnummer wird inkrementiert. Jede große Version wird seit einigen Jahren von Bugfixes unterstützt. Bugfix-Release, die keine neuen Features einführen, treten etwa alle 3 Monate auf und werden gemacht, wenn eine ausreichende Anzahl von Fehlern seit der letzten Veröffentlichung vorgelagert wurden. Sicherheitslücken werden auch in diesen Releases gepatelt. Der dritte und letzte Teil der Versionsnummer wird inkrementiert. Viele Alpha-, Beta- und Release-Kandidates werden auch als Vorschauen und zum Testen vor Endversionen veröffentlicht. Obwohl es für jede Freigabe einen groben Zeitplan gibt, werden sie oft verzögert, wenn der Code nicht bereit ist. Das Entwicklungsteam von Python überwacht den Zustand des Codes, indem die große Einheitstestsuite während der Entwicklung ausgeführt wird. Die große akademische Konferenz auf Python ist PyCon. Es gibt auch spezielle Python Mentoring Programme, wie Pyladies. Pythons 3.10 deprecates wstr (zu entfernen in Python 3.12; d.h. Python Erweiterungen müssen bis dahin geändert werden), und plant auch, Muster passend zur Sprache hinzuzufügen. API-Dokumentationsgeneratoren Tools, die Dokumentationen für Python API generieren können, sind u.a. pydoc (im Rahmen der Standardbibliothek erhältlich) Sphinx, Pdoc und seine Gabeln, Doxygen und Graphviz. Der Name des Namens Python stammt aus der britischen Komödiegruppe Monty Python, die Python-Autor Guido van Rossum bei der Entwicklung der Sprache genossen hat. Monty Python-Referenzen erscheinen häufig in Python-Code und Kultur; zum Beispiel sind die in Python-Literatur oft verwendeten metasyntaktischen Variablen Spam und Eier anstelle des traditionellen Foo und Bar. Die offizielle Python-Dokumentation enthält auch verschiedene Referenzen zu Monty Python Routinen. Das Präfix Py- wird verwendet, um zu zeigen, dass etwas mit Python zusammenhängt. Beispiele für die Verwendung dieses Präfixes in Namen von Python-Anwendungen oder Bibliotheken sind Pygame, eine Bindung von SDL an Python (gemeinsam verwendet, um Spiele zu erstellen); PyQt und PyGTK, die Qt bzw. GTK an Python binden; und PyPy, eine Python-Implementierung ursprünglich in Python geschrieben. Popularity Seit 2003 hat Python im TIOBE Programming Community Index in den zehn beliebtesten Programmiersprachen konsequent Platz genommen, wo es ab Februar 2021 die dritte populärste Sprache (hinter Java und C) ist. Es wurde ausgewählt Programming Language of the Year (für "die höchste Erhöhung der Bewertungen in einem Jahr") in 2007, 2010, 2018 und 2020 (die einzige Sprache, die dies viermal zu tun hat). Eine empirische Studie ergab, dass Skriptsprachen wie Python produktiver sind als herkömmliche Sprachen, wie C und Java, für Programmierprobleme mit String-Manipulation und Suche in einem Wörterbuch und festgestellt, dass der Speicherverbrauch oft "besser als Java und nicht viel schlechter als C oder C++ war. Große Organisationen, die Python verwenden, umfassen Wikipedia, Google, Yahoo,! CERN, NASA, Facebook, Amazon, Instagram, Spotify und einige kleinere Unternehmen wie ILM und ITA. Die Social-News Networking-Website Reddit wurde meist in Python geschrieben. Python kann als Skriptsprache für Webanwendungen dienen, z.B. über mod_wsgi für den Apache Webserver. Mit Web Server Gateway Interface hat sich eine Standard-API entwickelt, um diese Anwendungen zu erleichtern. Web-Frameworks wie Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle und Zope unterstützen Entwickler bei der Gestaltung und Wartung komplexer Anwendungen. Pyjs und IronPython können verwendet werden, um die Client-Seite von Ajax-basierten Anwendungen zu entwickeln. SQLAlchemy kann als Datenmapping für eine relationale Datenbank verwendet werden. Twisted ist ein Framework, um die Kommunikation zwischen Computern zu programmieren und wird (zum Beispiel) von Dropbox verwendet. Bibliotheken wie NumPy, SciPy und Matplotlib ermöglichen den effektiven Einsatz von Python im wissenschaftlichen Computing, mit spezialisierten Bibliotheken wie Biopython und Astropy, die Domänen-spezifische Funktionalität bieten. SageMath ist ein Computer-Algebra-System mit einer Notebook-Schnittstelle programmierbar in Python: seine Bibliothek umfasst viele Aspekte der Mathematik, einschließlich Algebra, Combinatorik, numerische Mathematik, Zahlentheorie, und Kalkül. OpenCV hat Python-Bindungen mit einer reichen Reihe von Features für die Computer-Vision und Bildverarbeitung. Python wird häufig in künstlichen Intelligenz-Projekten und maschinellen Lernprojekten mit Hilfe von Bibliotheken wie TensorFlow, Keras, Pytorch und Scikit-learn verwendet. Als Skriptsprache mit modularer Architektur, einfacher Syntax und reichhaltigen Textverarbeitungstools wird Python häufig für die natürliche Sprachverarbeitung verwendet. Python wurde erfolgreich in viele Software-Produkte als Skriptsprache eingebettet, einschließlich in endlichen Element Methode Software wie Abaqus, 3D parametric modeler wie FreeCAD, 3D Animation Pakete wie 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, die visuellen Effekte Compositor Nuwrit Shop, 2D-Bildungsprogramme wie GIMPscape, GNU Debugger verwendet Python als hübscher Drucker, um komplexe Strukturen wie C+-Container zu zeigen. Esri fördert Python als beste Wahl für das Schreiben von Skripten in ArcGIS. Es wurde auch in mehreren Videospielen verwendet und wurde als erste der drei verfügbaren Programmiersprachen in Google App Engine angenommen, die anderen zwei sind Java und Go.Viele Betriebssysteme umfassen Python als Standardkomponente. Es Schiffe mit den meisten Linux-Distributionen, AmigaOS 4 (mit Python 2.7,) FreeBSD (als Paket), NetBSD, OpenBSD (als Paket) und macOS und kann von der Kommandozeile (terminal) verwendet werden. Viele Linux-Distributionen verwenden in Python geschriebene Installateure: Ubuntu verwendet den Ubiquity-Installer, während Red Hat Linux und Fedora den Anaconda-Installator verwenden. Gentoo Linux verwendet Python in seinem Paketverwaltungssystem, Portage. Python wird umfassend in der Informationssicherheitsbranche eingesetzt, einschließlich in der Entwicklung von Exploit. Die meisten der Sugar-Software für den One Laptop per Child XO, jetzt entwickelt in Sugar Labs, ist in Python geschrieben. Das Raspberry Pi Einzelboard-Computerprojekt hat Python als Hauptanwenderprogrammierungssprache angenommen. LibreOffice enthält Python und will Java durch Python ersetzen. Der Python Scripting Provider ist ein Kernmerkmal seit Version 4.0 vom 7. Februar 2013. Von Python Pythons Gestaltung und Philosophie beeinflusste Sprachen haben viele andere Programmiersprachen beeinflusst: Boo verwendet Einbuchtung, eine ähnliche Syntax und ein ähnliches Objektmodell. Cobra verwendet Eindrückung und eine ähnliche Syntax, und seine Anerkennungen Dokument listet Python zuerst unter Sprachen, die es beeinflusst. CoffeeScript, eine Programmiersprache, die zu JavaScript kreuzt, hat Python-inspirierte syntax.ECMAScript/JavaScript geliehen Iteratoren und Generatoren von Python. GDScript, eine Scripting-Sprache sehr ähnlich Python, eingebaut in der Godot-Spielmaschine. Go ist für die "Geschwindigkeit der Arbeit in einer dynamischen Sprache wie Python" konzipiert und teilt die gleiche Syntax für das Schneiden von Arrays. Groovy wurde von dem Wunsch motiviert, die Python Designphilosophie auf Java zu bringen. Julia wurde als "wie für die allgemeine Programmierung als Python nutzbar" konzipiert. Nim verwendet Einbuchtung und ähnliche Syntax. Rubys Schöpfer, Yukihiro Matsumoto, sagte: "Ich wollte eine Scripting-Sprache, die mächtiger als Perl war, und objektorientierter als Python. Deshalb entschied ich mich, meine eigene Sprache zu entwerfen. "Swift, eine von Apple entwickelte Programmiersprache, hat eine Python-inspirierte Syntax. Pythons Entwicklungspraktiken wurden auch von anderen Sprachen emuliert. Zum Beispiel wird die Praxis, ein Dokument zu verlangen, das die Rationalität für und Fragen beschreibt, eine Änderung der Sprache (in Python, einem PEP) auch in Tcl, Erlang und Swift verwendet. Siehe auch Python syntax und semantics pip (Paketmanager)Differentiable Programmierung Referenzen Quellen "Python for Artificial Intelligence". Wiki.python.org.19 Juli 2012. Archiviert aus dem Original am 1. November 2012. Retrieved 3 December 2012.Paine, Jocelyn, ed.(August 2005)."AI in Python". AI Expert Newsletter. Amzi!.Archiviert vom Original am 26. März 2012. Erholt am 11. Februar 2012. "PyAIML 0.8.5 : Python Package Index".Pypi.python.org.Retrieved 17. Juli 2013. Russell, Stuart J. & Norvig, Peter (2009). Künstliche Intelligenz: Ein moderner Ansatz (3. ed.). Upper Saddle River, NJ: Prentice Hall.ISBN 978-0-13-604259-4. Weiter lesen Downey, Allen B. (Mai 2012). Denk an Python: Wie man wie ein Informatiker denkt (Version 1.6.6 ed.). ISBN 978-0-521-72596-5.Hamilton, Naomi (5. August 2008). "Das A-Z der Programmiersprachen: Python". Computerworld. Archiviert aus dem Original am 29. Dezember 2008.Retrieved 31. März 2010. Lutz, Mark (2013). Lernen Python (5. ed.). O'Reilly Media.ISBN 978-0-596-15806-4.Pilgrim, Mark (2004). Tauchen Sie ein in Python.Apress.ISBN 978-1-59059-356-1.Pilgrim, Mark (2009). Tauchen Sie ein in Python 3.Apress.ISBN 978-1-4302-2415-0.Summerfield, Mark (2009). Programmierung in Python 3 (2. ed.). Addison-Wesley Professional.ISBN 978-0-321-68056-3. Offizielle Website Eine Viruserkrankung (oder Virusinfektion) tritt auf, wenn der Körper eines Organismus durch pathogene Viren infiziert wird, und Infektions-Viruspartikel (Virionen) an und in anfällige Zellen anbringen. Strukturmerkmale Grundlegende strukturelle Merkmale, wie Genomtyp, Virionform und Replikationsstelle, teilen in der Regel die gleichen Merkmale unter Virusarten innerhalb der gleichen Familie. Doppelsträngige DNA-Familien: drei sind nicht umhüllt (Adenoviridae, Papillomaviridae und Polyomaviridae) und zwei sind umhüllt (Herpesviridae und Poxviridae). Alle nicht umhüllten Familien haben icosahedrale Capsids. Teilweise doppelsträngige DNA-Viren: Hepadnaviridae. Diese Viren sind umhüllt. Eine Familie von einzelsträngigen DNA-Viren infiziert Menschen: Parvoviridae. Diese Viren sind nicht umhüllt. Positive einzelsträngige RNA-Familien: drei nicht umhüllte (Astroviridae, Caliciviridae und Picornaviridae) und vier umhüllte (Coronaviridae, Flaviviridae, Retroviridae und Togaviridae). Alle nicht umhüllten Familien haben icosahedrale Nukleocapsids. Negative einzelsträngige RNA-Familien: Arenaviridae, Bunyaviridae, Filoviridae, Orthomyxoviridae, Paramyxoviridae und Rhabdoviridae. Alle sind mit schraubenförmigen Nukleocapsid umhüllt. Doppelsträngiges RNA-Genom: Reoviridae. Die Hepatitis D-Virus wurde noch nicht einer Familie zugeordnet, ist aber deutlich von den anderen Familien, die Menschen infizieren. Viren, die bekannt sind, Menschen zu infizieren, die nicht mit Krankheit verbunden sind: die Familie Anelloviridae und die Gattung Dependovirus. Beide dieser Taxa sind nicht umhüllte einzelsträngige DNA-Viren. Pragmatische Regeln Human-infizierende Virus-Familien bieten Regeln, die Ärzte und medizinische Mikrobiologen / Biologen unterstützen können.In der Regel replizieren DNA-Viren innerhalb des Zellkerns, während RNA-Viren innerhalb des Zytoplasmas replizieren. Ausnahmen sind dieser Regel bekannt: Poxviren replizieren innerhalb des Zytoplasmas und Orthomyxoviren und Hepatitis D Virus (RNA-Viren) replizieren innerhalb des Kerns. Segmentierte Genome: Bunyaviridae, Orthomyxoviridae, Arenaviridae und Reoviridae (Acronym BOAR). Alle sind RNA-Viren. Viren, die fast ausschließlich von Arthropoden übertragen werden: Bunyavirus, Flavivirus und Togavirus. Einige Reoviren werden von Arthropod-Vektoren übertragen. Alle sind RNA-Viren. Eine Familie von umhüllten Viren verursacht Gastroenteritis (Coronaviridae). Alle anderen mit der Gastroenteritis verbundenen Viren sind nicht umhüllt. Baltimore Gruppe Diese Gruppe von Analyten definiert mehrere Kategorien von Virus. Gruppen: I - dsDNA II - ssDNA III - dsRNA IV - positiv-sense ssRNA V- negativ-sense ssRNA VI - ssRNA-RT VII - dsDNA-RT Klinische Eigenschaften Die klinischen Eigenschaften von Viren können sich erheblich unter Arten innerhalb derselben Familie unterscheiden: Siehe auch Liste der latenten menschlichen Virusinfektionen Pathogene Bakterien Referenzen =Externe Links ==