Elektronische Konstruktionsautomatisierung (EDA), auch als elektronisches computergestütztes Design (ECAD) bezeichnet, ist eine Kategorie von Software-Tools zur Gestaltung elektronischer Systeme wie integrierte Schaltungen und Leiterplatten. Die Werkzeuge arbeiten in einem Design-Flow zusammen, mit dem Chip-Designer ganze Halbleiterchips entwerfen und analysieren. Da ein moderner Halbleiterchip Milliarden von Bauelementen haben kann, sind EDA-Werkzeuge für ihre Konstruktion unerlässlich; dieser Artikel beschreibt insbesondere EDA speziell in Bezug auf integrierte Schaltungen (ICs.) Geschichte Frühe Tage Vor der Entwicklung der EDA wurden integrierte Schaltkreise von Hand entworfen und manuell ausgelegt. Einige fortgeschrittene Läden nutzten geometrische Software, um Bänder für einen Gerber-Fotoplotter zu erzeugen, der für die Erzeugung eines monochromatischen Belichtungsbildes verantwortlich ist, aber auch jene kopierten digitalen Aufnahmen mechanisch gezogener Komponenten. Der Prozess war grundlegend grafisch, mit der Übersetzung von der Elektronik zu den Grafiken manuell durchgeführt; das bekannteste Unternehmen aus dieser Zeit war Calma, dessen GDSII-Format noch heute in Gebrauch ist. Bis Mitte der 1970er Jahre begannen die Entwickler neben der Erstellung und der ersten Vermittlungs- und Routing-Werkzeuge die Automatisierung des Schaltkreises zu automatisieren; wie dies geschah, katalogisierte das Verfahren der Design Automation Conference die große Mehrheit der Entwicklungen der Zeit. Die nächste Ära begann nach der Veröffentlichung von "Introduction to VLSI Systems" von Carver Mead und Lynn Conway im Jahr 1980; dieser bahnbrechende Text befürwortete Chip-Design mit Programmiersprachen, die auf Silizium kompiliert. Das unmittelbare Ergebnis war eine beträchtliche Erhöhung der Komplexität der Chips, die entworfen werden konnten, mit einem verbesserten Zugang zu Design-Verifikationstools, die Logiksimulation verwendet. Oft waren die Chips leichter zu legen und eher richtig zu funktionieren, da ihre Designs vor dem Bau gründlicher simuliert werden konnten. Obwohl sich die Sprachen und Werkzeuge weiterentwickelt haben, bleibt dieser allgemeine Ansatz, das gewünschte Verhalten in einer textuellen Programmiersprache anzugeben und die Werkzeuge die detaillierte physikalische Gestaltung ableiten zu lassen, heute die Grundlage des digitalen IC-Designs. Die frühesten EDA-Tools wurden wissenschaftlich hergestellt. Einer der bekanntesten war die "Berkeley VLSI Tools Tarball", eine Reihe von UNIX-Werkzeugen, die frühere VLSI-Systeme entwickelt haben. Noch weit verbreitet sind die Espresso heuristische Logik Minimierer, verantwortlich für Schaltung Komplexität Reduktionen und Magic, eine computergestützte Design-Plattform. Eine weitere entscheidende Entwicklung war die Bildung von MOSIS, einem Konsortium von Universitäten und Herstellern, die eine kostengünstige Möglichkeit, Studenten-Chip-Designer durch die Herstellung von real integrierten Schaltungen zu trainieren entwickelt. Das Grundkonzept bestand darin, zuverlässige, kostengünstige, relativ technologiearme IC-Prozesse zu verwenden und eine Vielzahl von Projekten pro Wafer zu verpacken, wobei mehrere Chips aus jedem Projekt erhalten bleiben. Kooperierende Hersteller spendeten entweder die verarbeiteten Wafer oder verkauften sie zu Kosten. als sie das Programm für ihr eigenes langfristiges Wachstum hilfreich sahen. Die Geburt der kommerziellen EDA 1981 markierte den Beginn der EDA als Industrie. Die größeren elektronischen Unternehmen wie Hewlett Packard, Tektronix und Intel haben seit vielen Jahren die EDA intern verfolgt, wobei Manager und Entwickler von diesen Unternehmen beginnen, sich auf die EDA als Unternehmen zu konzentrieren. Daisy Systems, Mentor Graphics und Valid Logic Systems wurden rund um diese Zeit gegründet und gemeinsam als DMV bezeichnet. 1981 begann das US-Verteidigungsministerium zusätzlich die Finanzierung von VHDL als Hardware-Beschreibungssprache. Innerhalb von wenigen Jahren gab es viele Unternehmen, die sich auf EDA spezialisiert haben, die jeweils etwas anders betont wurden. Die erste Messe für EDA fand 1984 auf der Design Automation Conference statt und 1986 wurde Verilog, eine weitere populäre hochrangige Designsprache, als Hardware-Beschreibungssprache von Gateway Design Automation vorgestellt. Simulatoren folgten schnell diesen Einführungen und ermöglichten eine direkte Simulation von Chip-Designs und ausführbaren Spezifikationen. Innerhalb von mehreren Jahren wurden Back-Ends entwickelt, um logische Synthese durchzuführen. Aktueller Status Aktuelle digitale Ströme sind extrem modular, mit vorderen Enden standardisierte Designbeschreibungen erzeugen, die in Invokationen von Einheiten ähnlich wie Zellen kompilieren, ohne ihre individuelle Technologie. Zellen implementieren logische oder andere elektronische Funktionen über die Verwendung einer bestimmten integrierten Schaltungstechnik. Die Hersteller stellen in der Regel Bibliotheken von Komponenten für ihre Produktionsprozesse zur Verfügung, mit Simulationsmodellen, die Standard-Simulationstools passen.Die meisten analogen Schaltungen sind noch in manueller Weise konzipiert und erfordern spezialisierte Kenntnisse, die einzigartig für analoges Design sind (z.B. passende Konzepte). Daher sind analoge EDA-Werkzeuge weit weniger modular, da viele weitere Funktionen erforderlich sind, sie stärker interagieren und die Komponenten im Allgemeinen weniger ideal sind. Die EDA für die Elektronik hat mit der kontinuierlichen Skalierung der Halbleitertechnologie rasch an Bedeutung gewonnen. Einige Benutzer sind Gründerunternehmen, die die Halbleiterfertigungseinrichtungen (Fabs) und zusätzliche Personen betreiben, die für die Nutzung der Technologie-Design-Service-Unternehmen verantwortlich sind, die EDA-Software verwenden, um ein eingehendes Design für die Herstellung von Bereitschaft zu bewerten. EDA-Tools werden auch für die Programmierung der Design-Funktionalität in FPGAs oder feldprogrammierbare Gate-Arrays, kundenspezifische integrierte Schaltungen verwendet. Software konzentriert Design Flow bleibt in erster Linie über mehrere primäre Komponenten charakterisiert; diese umfassen: Hochrangige Synthese (zusätzlich als Verhaltenssynthese oder algorithmische Synthese bezeichnet) – Die hochrangige Designbeschreibung (z.B. in C/C)+ wird in RTL oder die Registerübertragungsebene umgewandelt, die für die Darstellung von Schaltkreisen über die Nutzung von Interaktionen zwischen Registern verantwortlich ist. Logische Synthese – Die Übersetzung der RTL-Designbeschreibung (z.B. in Verilog oder VHDL) in eine diskrete Netzliste oder Darstellung von Logik-Gattern. Schematische Erfassung – Für Standard-Zell-digitale, analoge, RF-ähnliche Capture CIS in Orcad von Cadence und ISIS in Proteus. Layout – in der Regel schematisierter Anordnung, wie Layout in Orcad von Cadence, ARES in Proteus Simulation Transistor Simulation – Low-Level-Transistor-Simulation eines schematischen/layout-Verhaltens, genau auf Geräteebene. Logische Simulation – Digital-Simulation des digitalen Verhaltens eines RTL- oder Gate-Netlists (boolean 0/1), genau auf boolean-Ebene. Verhaltenssimulation – Hochebene Simulation des architektonischen Betriebs eines Designs, genau auf Zyklusebene oder Schnittstellenebene. Hardware-Emulation – Verwendung von speziellen Zweck-Hardware, um die Logik eines vorgeschlagenen Designs zu emulieren. Kann manchmal in ein System anstelle eines noch zu gebauten Chips eingesteckt werden; dies wird als In-Curc-Emulation bezeichnet. Technologie CAD simuliert und analysiert die zugrunde liegende Prozesstechnologie. Elektrische Eigenschaften von Geräten werden direkt von der Gerätephysik abgeleitet. Elektromagnetische Feldlöser, oder nur Feldlöser, lösen Maxwells Gleichungen direkt für Fälle von Interesse an IC- und PCB-Design. Sie sind dafür bekannt, langsamer, aber genauer zu sein als die Layout-Extraktion oben. Analyse und Verifizierung Funktionelle Verifikation der Clock-Domänenüberprüfung (CDC-Check:) ähnlich wie Linting, aber diese Überprüfungen/Werkzeuge sind spezialisiert auf die Erkennung und Berichterstattung potenzieller Probleme wie Datenverlust, Meta-Stabilität durch die Verwendung mehrerer Clock-Domains im Design. Formale Verifikation, auch Modellprüfung: Versuche, nach mathematischen Methoden zu beweisen, dass das System bestimmte gewünschte Eigenschaften aufweist und dass bestimmte unerwünschte Effekte (wie Totlock) nicht auftreten können. Equivalenzprüfung: algorithmischer Vergleich zwischen der RTL-Description eines Chips und der synthetisierten Gate-Netlist, um funktionelle Gleichwertigkeit auf logischer Ebene zu gewährleisten. Statische Timing-Analyse: Analyse des Timings einer Schaltung eingangsunabhängig, so dass ein schlimmster Fall über alle möglichen Eingänge gefunden wird. Physikalische Verifikation, PV: Überprüfung, ob ein Design physikalisch herstellbar ist, und dass die resultierenden Chips keine funktionsverhindernden physikalischen Fehler haben und Original-Spezifikationen erfüllen. Herstellungsverfahren Maskendatenaufbereitung oder MDP - Die Erzeugung von aktuellen Lithographie-Fotomasken, die zur physischen Herstellung des Chips verwendet werden. Chip-Finishing, die benutzerdefinierte Bezeichnungen und Strukturen enthält, um die Fertigungsfähigkeit des Layouts zu verbessern. Beispiele hierfür sind ein Dichtungsring und Füllstoffstrukturen. Herstellung eines Retikel-Layouts mit Testmustern und Ausrichtungsmarken. Layout-zu-Maske-Präparation, die Layout-Daten mit Grafik-Operationen, wie Auflösung Verbesserung Techniken oder RET - Methoden zur Erhöhung der Qualität der endgültigen Photomaske verbessert. Dazu gehört auch die Optische Nähenkorrektur oder OPC – die vorderste Kompensation für Beugungs- und Störeffekte, die später bei der Herstellung von Chip mit dieser Maske auftreten. Maskengeneration – Die Erzeugung von flachem Maskenbild aus hierarchischem Design. Automatische Testmuster-Generation oder ATPG – Die Generierung von Musterdaten systematisch, um so viele Logik-Gate und andere Komponenten wie möglich auszuüben.Eingebauter Selbsttest oder BIST – Die Installation von selbst eingebauten Test-Controllern, um automatisch eine Logik oder Speicherstruktur im Design zu testen Funktionale Sicherheit Funktionelle Sicherheitsanalyse, systematische Berechnung von Ausfallzeiten (FIT)-Raten und diagnostische Deckungsmetriken für Designs, um die Compliance-Anforderungen für die gewünschten Sicherheitsintegritätsstufen zu erfüllen. Funktionssicherheitssynthese, fügen Zuverlässigkeitssteigerungen zu strukturierten Elementen (Module, RAMs, ROMs, Registerdateien, FIFOs) hinzu, um Fehlererkennung / Fehlertoleranz zu verbessern. Diese umfassen (nicht beschränkt auf,) Addition von Fehlererkennung und / oder Korrekturcodes (Hamming,) redundante Logik zur Fehlererkennung und Fehlertoleranz (dupliziert / triplicate) und Protokollüberprüfungen (Interface parity, Adressausrichtung, Beat Count)Funktionale Sicherheitsüberprüfung, Laufen einer Fehlerkampagne, einschließlich Einfügen von Fehlern in die Gestaltung und Überprüfung, dass der Sicherheitsmechanismus in geeigneter Weise für die als abgedeckten Fehler reagiert. Unternehmen Alte Unternehmen Marktkapitalisierung und Firmenname ab Dezember 2011: $5.77 Milliarden – Synopsys$4.46 Milliarden – Cadence $2.33 Milliarden – Mentor Graphics $507 Millionen – Magma Design Automation; Synopsys erworben Magma im Februar 2012 NT$6.44 Milliarden – SpringSoft; Synopsys erworben SpringSoft im August 2012 ¥11.95 Milliarden –Zuken Inc.Note: EEsof sollte wahrscheinlich auf dem Markt sein Erwerb Viele EDA-Unternehmen erwerben kleine Unternehmen mit Software oder andere Technologie, die an ihr Kerngeschäft angepasst werden können. Die meisten Marktführer sind Amalgamationen von vielen kleineren Unternehmen und dieser Trend wird durch die Tendenz von Software-Unternehmen unterstützt, Werkzeuge als Zubehör zu entwerfen, die natürlich in eine größere Anbieter-Suite von Programmen auf der digitalen Schaltung passen; viele neue Werkzeuge enthalten analoge Design und gemischte Systeme. Dies geschieht durch einen Trend, ganze elektronische Systeme auf einem einzigen Chip zu platzieren. Siehe auch Computer-aided design (CAD) Circuit Design EDA Datenbank Signoff (elektronische Designautomatisierung)Comparison of EDA software Plattformbasiertes Design Referenzen