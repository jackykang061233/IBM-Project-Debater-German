Software ist eine Sammlung von Anweisungen und Daten, die einem Computer sagen, wie zu arbeiten. Dies ist im Gegensatz zu physikalischer Hardware, von der das System gebaut wird und tatsächlich die Arbeit durchführt. In der Informatik und Software-Engineering sind Computersoftware alle Informationen, die von Computersystemen verarbeitet werden, einschließlich Programme und Daten. Computersoftware umfasst Computerprogramme, Bibliotheken und damit verbundene nicht ausführbare Daten, wie Online-Dokumentation oder digitale Medien. Computer-Hardware und -Software erfordern sich und können auch nicht selbst realistisch genutzt werden. Auf der niedrigsten Programmierebene besteht der ausführbare Code aus maschinellen Sprachanweisungen, die von einem einzelnen Prozessor unterstützt werden - typischerweise einer zentralen Verarbeitungseinheit (CPU) oder einer Grafikverarbeitungseinheit (GPU). Eine Maschinensprache besteht aus Gruppen binärer Werte, die Prozessoranweisungen bedeuten, die den Zustand des Computers aus seinem vorhergehenden Zustand ändern. Beispielsweise kann eine Instruktion den in einem bestimmten Speicherort im Computer gespeicherten Wert ändern – ein nicht direkt dem Benutzer beobachtbarer Effekt. Eine Anweisung kann auch einen von vielen Eingabe- oder Ausgabevorgängen anrufen, z.B. einen Text auf einem Computerbildschirm anzeigen, wodurch Zustandsänderungen entstehen, die für den Benutzer sichtbar sein sollten. Der Prozessor führt die Anweisungen in der Reihenfolge aus, in der sie vorgesehen sind, es sei denn, er wird angewiesen, auf eine andere Anweisung zu springen oder durch das Betriebssystem unterbrochen. Ab 2015 haben die meisten Personalcomputer, Smartphone-Geräte und Server Prozessoren mit mehreren Ausführungseinheiten oder mehreren Prozessoren, die die Berechnung gemeinsam durchführen, und das Computing ist zu einer viel mehr gleichzeitigen Aktivität geworden als in der Vergangenheit. Die Mehrheit der Software wird in hochrangigen Programmiersprachen geschrieben. Sie sind für Programmierer einfacher und effizienter, weil sie den natürlichen Sprachen näher sind als Maschinensprachen. Hochrangige Sprachen werden mit einem Compiler oder einem Dolmetscher oder einer Kombination der beiden in Maschinensprache übersetzt. Software kann auch in einer niederen Montagesprache geschrieben werden, die eine starke Korrespondenz zu den maschinellen Sprachanweisungen des Computers hat und mit einem Assembler in Maschinensprache übersetzt wird. Geschichte Ein Umriss (Algorithmus) für das, was das erste Stück der Software gewesen wäre, wurde von Ada Lovelace im 19. Jahrhundert für die geplante Analytische Maschine geschrieben. Sie erstellte Beweise, um zu zeigen, wie der Motor Bernoulli Zahlen berechnen würde. Aufgrund der Beweise und des Algorithmus wird sie als erster Computerprogrammierer betrachtet. Die erste Theorie über die Software – vor der Erstellung von Computern, wie wir sie heute kennen – wurde von Alan Turing in seinem 1935 Essay, On Computable Numbers, mit einer Anwendung auf das Entscheidungsproblem (Entscheidungsproblem) vorgeschlagen. Dies führte schließlich zur Schaffung der akademischen Bereiche der Informatik und Software-Engineering; Beide Bereiche studieren Software und seine Kreation. Informatik ist die theoretische Studie von Computer und Software (Turing's Essay ist ein Beispiel der Informatik), während Software Engineering ist die Anwendung von Engineering und Entwicklung von Software. Vor 1946 war die Software jedoch noch nicht die Programme, die im Speicher von gespeicherten Programm-Digitalrechnern gespeichert wurden, wie wir sie nun verstehen. Die ersten elektronischen Rechengeräte wurden stattdessen umgeschaltet, um diese neu zu programmieren. Im Jahr 2000 veröffentlichte Fred Shapiro, ein Bibliothekar an der Yale Law School, einen Brief, der zeigt, dass John Wilder Tukeys 1958er Zeitung "The Teaching of Concrete Mathematics" die früheste bekannte Nutzung des Begriffs Software enthielt, die in einer Suche nach JSTORs elektronischen Archiven gefunden wurde und die Zitation der OED um zwei Jahre predierte. Dies führte viele zu Kredit Tukey mit der Prägung des Begriffs, vor allem in den Traueranzeigen veröffentlichte im selben Jahr, obwohl Tukey nie Kredit für eine solche Münze behauptet. 1995 behauptete Paul Niquette, dass er ursprünglich den Begriff im Oktober 1953 geprägt hatte, obwohl er keine Dokumente finden konnte, die seinen Anspruch unterstützen. Die früheste bekannte Veröffentlichung des Begriffs Software in einem technischen Kontext war im August 1953 von Richard R. Carhart, in einem Rand Corporation Research Memorandum. Arten Auf nahezu allen Computerplattformen kann Software in einige breite Kategorien gruppiert werden. Zweck oder Anwendungsgebiet Basierend auf dem Ziel kann Computersoftware in: Anwendungssoftware, die Software ist, die das Computersystem verwendet, um spezielle Funktionen auszuführen oder Unterhaltungsfunktionen über den Grundbetrieb des Computers selbst hinaus zu bieten. Es gibt viele verschiedene Arten von Anwendungssoftware, da die Aufgaben, die mit einem modernen Computer ausgeführt werden können, so groß sind – siehe Softwareliste. Systemsoftware, die Software für die Verwaltung von Computer-Hardware-Verhalten ist, um grundlegende Funktionalitäten zu bieten, die von Benutzern benötigt werden, oder für andere Software ordnungsgemäß laufen, wenn überhaupt. Die Systemsoftware ist auch für die Bereitstellung einer Plattform für die laufende Anwendungssoftware konzipiert und umfasst Folgendes: Betriebssysteme, die wesentliche Sammlungen von Software sind, die Ressourcen verwalten und gemeinsame Dienstleistungen für andere Software, die "oben" von ihnen. Aufsichtsprogramme, Bootloader, Shells und Fenstersysteme sind Kernteile von Betriebssystemen. In der Praxis wird ein Betriebssystem mit zusätzlicher Software (einschließlich Anwendungssoftware) gebündelt, so dass ein Benutzer möglicherweise mit einem Computer arbeiten kann, der nur ein Betriebssystem aufweist. Gerätetreiber, die eine bestimmte Art von Vorrichtung betreiben oder steuern, die an einem Computer befestigt ist. Jedes Gerät benötigt mindestens einen entsprechenden Gerätetreiber, da ein Computer typischerweise mindestens eine Eingabeeinrichtung und mindestens eine Ausgabeeinrichtung aufweist, benötigt ein Computer typischerweise mehr als einen Gerätetreiber. Nutzungen, die Computerprogramme sind, um Benutzer bei der Wartung und Pflege ihrer Computer zu unterstützen. Malicious Software oder Malware, die Software, die entwickelt wird, um Computer zu schaden und zu stören. Als solche ist Malware unerwünscht. Malware ist eng mit computerbezogenen Verbrechen verbunden, obwohl einige schädliche Programme möglicherweise als praktische Witze entworfen worden. Art oder Domäne der Ausführung Desktop-Anwendungen wie Webbrowser und Microsoft Office, sowie Smartphone- und Tablet-Anwendungen (genannte Apps"). ( In einigen Teilen der Softwareindustrie gibt es einen Schub, Desktop-Anwendungen mit mobilen Apps zu einem gewissen Grad zu verschmelzen. Windows 8, und später Ubuntu Touch, versucht, den gleichen Stil der Anwendung Benutzeroberfläche auf Desktops, Laptops und Handys verwendet werden.) JavaScript-Skripte sind Stücke von Software, die traditionell in Webseiten eingebettet sind, die direkt im Webbrowser ausgeführt werden, wenn eine Webseite geladen wird, ohne dass ein Webbrowser-Plugin benötigt wird. Die in anderen Programmiersprachen geschriebene Software kann auch innerhalb des Webbrowsers ausgeführt werden, wenn die Software entweder in JavaScript übersetzt wird, oder wenn ein Webbrowser-Plugin, das diese Sprache unterstützt, installiert ist; das häufigste Beispiel dieser ist ActionScript-Skripte, die durch das Adobe Flash-Plugin unterstützt werden. Server-Software, einschließlich: Web-Anwendungen, die in der Regel auf dem Webserver laufen und dynamisch generierte Webseiten an Web-Browser ausgeben, z.B. PHP, Java, ASP. NET oder sogar JavaScript, das auf dem Server läuft. In modernen Zeiten sind dies häufig einige JavaScript, die auch im Webbrowser ausgeführt werden, in welchem Fall sie typischerweise teilweise auf dem Server laufen, teilweise im Webbrowser. Plugins und Erweiterungen sind Software, die die Funktionalität einer anderen Software erweitert oder verändert, und erfordern, dass Software zur Funktion verwendet werden; Embedded Software ist als Firmware innerhalb eingebetteter Systeme, Geräte für eine einzelne Nutzung oder einige Anwendungen wie Autos und Fernseher (obwohl einige eingebettete Geräte wie Wireless-Chipsets selbst Teil eines gewöhnlichen, nicht eingebetteten Computersystems wie ein PC oder Smartphone sein können). Im eingebetteten Systemkontext gibt es manchmal keine klare Unterscheidung zwischen der Systemsoftware und der Anwendungssoftware. Einige eingebettete Systeme laufen jedoch eingebettete Betriebssysteme, und diese Systeme behalten die Unterscheidung zwischen Systemsoftware und Anwendungssoftware (obwohl typischerweise nur eine, feste Anwendung vorhanden ist, die immer ausgeführt wird). Microcode ist eine spezielle, relativ obskure Art von eingebetteten Software, die dem Prozessor selbst sagt, wie man Maschinencode ausführen, so ist es eigentlich eine geringere Ebene als Maschinencode. Es ist in der Regel proprietär für den Prozessor-Hersteller, und alle notwendigen Korrektur-Mikrocode-Software-Updates werden von ihnen an Benutzer (die viel billiger als Versand-Ersatz-Prozessor-Hardware ist). So würde ein gewöhnlicher Programmierer nicht davon ausgehen, dass er jemals damit umgehen muss. Programmierwerkzeuge Programming-Tools sind auch Software in Form von Programmen oder Anwendungen, die Software-Entwickler (auch als Programmierer, Coder, Hacker oder Software-Ingenieure bekannt) verwenden, um Software zu erstellen, zu debug, zu pflegen (d.h. zu verbessern oder zu beheben,) oder anderweitig zu unterstützen Software. Software wird in einer oder mehreren Programmiersprachen geschrieben; es gibt viele Programmiersprachen, und jede hat mindestens eine Implementierung, die jeweils aus einem eigenen Satz von Programmiertools besteht. Diese Werkzeuge können relativ selbstständige Programme wie Compiler, Debugger, Dolmetscher, Linker und Texteditore sein, die zu einer Aufgabe kombiniert werden können; oder sie können eine integrierte Entwicklungsumgebung (IDE,) bilden, die viel oder alle Funktionalitäten solcher selbstständiger Werkzeuge kombiniert. Die Erfindungen können dies tun, indem sie entweder die entsprechenden Einzelwerkzeuge anrufen oder ihre Funktionalität auf neue Weise umsetzen. Eine IDE kann es einfacher machen, bestimmte Aufgaben zu erledigen, wie zum Beispiel die Suche in Dateien in einem bestimmten Projekt. Viele Programmiersprachen-Implementierungen bieten die Möglichkeit, sowohl einzelne Werkzeuge als auch IDE zu verwenden. Themen Architektur Benutzer sehen oft Dinge anders als Programmierer. Menschen, die moderne allgemeine Computer verwenden (im Gegensatz zu eingebetteten Systemen, analogen Computern und Supercomputern) sehen in der Regel drei Schichten von Software eine Vielzahl von Aufgaben: Plattform, Anwendung und Benutzersoftware. Software für die Plattform Die Plattform umfasst die Firmware, Gerätetreiber, ein Betriebssystem und typischerweise eine grafische Benutzeroberfläche, die es einem Benutzer insgesamt ermöglichen, mit dem Computer und seinen Peripheriegeräten (assoziierte Geräte) zu interagieren. Plattform-Software kommt oft mit dem Computer gebündelt. Auf einem PC wird man in der Regel die Möglichkeit haben, die Plattform-Software zu ändern. Anwendungssoftware Application Software oder Applications sind, was die meisten Menschen denken, wenn sie an Software denken. Typische Beispiele sind Bürosuiten und Videospiele. Anwendungssoftware wird oft separat von Computerhardware gekauft. Manchmal werden Anwendungen mit dem Computer gebündelt, aber das ändert nicht die Tatsache, dass sie als unabhängige Anwendungen laufen. Anwendungen sind in der Regel unabhängige Programme vom Betriebssystem, obwohl sie oft auf bestimmte Plattformen zugeschnitten sind. Die meisten Benutzer denken an Compiler, Datenbanken und andere "Systemsoftware" als Anwendungen. Benutzer-geschriebene Software End-user-Entwicklungs-Schneidsysteme, um die spezifischen Bedürfnisse der Nutzer zu erfüllen. Benutzersoftware umfasst Tabellenkalkulationsvorlagen und Textprozessorvorlagen. Selbst E-Mail-Filter sind eine Art Benutzersoftware. Benutzer erstellen diese Software selbst und übersehen oft, wie wichtig es ist. Je nachdem, wie kompetent die benutzergeschriebene Software in Standard-Anwendungspakete integriert wurde, können sich viele Benutzer nicht der Unterscheidung zwischen den Original-Paketen bewusst sein und was von Mitarbeitern hinzugefügt wurde. Die Software Execution Computer muss in den Speicher des Computers geladen werden (z.B. Festplatte oder Speicher). Sobald die Software geladen ist, kann der Computer die Software ausführen. Dabei werden Anweisungen von der Anwendungssoftware über die Systemsoftware an die Hardware übergeben, die letztendlich den Befehl als Maschinencode erhält. Jede Anweisung bewirkt, dass der Computer eine Operation durchführt – Daten zu bewegen, eine Berechnung durchzuführen oder den Steuerablauf von Anweisungen zu ändern. Die Datenbewegung ist typischerweise von einem Ort im Speicher zum anderen. Manchmal handelt es sich um Daten zwischen Speicher und Registern, die einen schnellen Datenzugriff in der CPU ermöglichen. Bewegen von Daten, insbesondere große Mengen davon, können teuer sein. So wird dies manchmal durch die Verwendung von Pointern auf Daten vermieden. Zu den Berechnungen gehören einfache Operationen, wie die Inkrementierung des Wertes eines variablen Datenelements. Komplexere Berechnungen können viele Operationen und Datenelemente zusammen beinhalten. Qualität und Zuverlässigkeit Die Qualität der Software ist sehr wichtig, insbesondere für kommerzielle und Systemsoftware wie Microsoft Office, Microsoft Windows und Linux. Wenn Software fehlerhaft ist (buggy,) kann es die Arbeit einer Person löschen, den Computer abstürzen und andere unerwartete Dinge tun. Fehler und Fehler werden als Bugs bezeichnet, die bei Alpha- und Beta-Tests oft entdeckt werden. Software ist oft auch ein Opfer für das, was als Software-Alterung bekannt ist, die fortschreitende Leistungsverschlechterung durch eine Kombination von ungesehenen Fehlern. Viele Fehler werden durch Softwaretests entdeckt und behoben (debugged). Jedoch, Software-Tests selten – wenn überhaupt – jeden Fehler eliminiert; einige Programmierer sagen, dass "jedes Programm hat mindestens einen Bug" (Lubarsky's Law). In der Wasserfall-Methode der Software-Entwicklung werden in der Regel separate Testteams eingesetzt, aber in neueren Ansätzen, kollektiv als agile Software-Entwicklung bezeichnet, Entwickler oft alle ihre eigenen Tests und demonstrieren die Software für Benutzer/Kunden regelmäßig, um Feedback zu erhalten. Software kann durch Gerätetests, Regressionstests und andere Methoden, die manuell oder am häufigsten durchgeführt werden, automatisch getestet werden, da die zu testende Codemenge recht groß sein kann. So verfügt die NASA über extrem strenge Software-Testverfahren für viele Betriebssysteme und Kommunikationsfunktionen. Viele NASA-basierte Operationen interagieren und identifizieren sich über Befehlsprogramme. So können viele Menschen, die an der NASA arbeiten, die Funktionssysteme insgesamt überprüfen und bewerten. Programme mit Befehlssoftware ermöglichen Hardware-Engineering und Systembetrieben, viel einfacher zusammen zu funktionieren. Lizenz Die Lizenz der Software gibt dem Benutzer das Recht, die Software in der lizenzierten Umgebung zu nutzen, und im Falle freier Softwarelizenzen gewährt auch andere Rechte wie das Recht, Kopien zu machen. Eine proprietäre Software kann in zwei Arten unterteilt werden: Freeware, die die Kategorie der "freien Test" Software oder Freemium-Software umfasst (in der Vergangenheit wurde der Begriff Shareware oft für kostenlose Test-/Freemium-Software verwendet). Wie der Name schon sagt, kann Freeware kostenlos verwendet werden, obwohl bei kostenlosen Versuchen oder Freemium-Software dies manchmal nur für eine begrenzte Zeit oder mit eingeschränkter Funktionalität wahr ist. Software gegen eine Gebühr, oft ungenau als "kommerzielle Software" bezeichnet, die nur legal beim Kauf einer Lizenz verwendet werden kann. Open-Source-Software hingegen verfügt über eine kostenlose Software-Lizenz, die dem Empfänger die Rechte zur Änderung und Umverteilung der Software gewährt. Patente Software-Patente, wie andere Patente, sollen dem Erfinder theoretisch eine exklusive, zeitlich begrenzte Lizenz für eine detaillierte Idee (z.B. einen Algorithmus) über die Implementierung eines Stücks von Software oder einen Bestandteil eines Stücks von Software geben. Ideen für nützliche Dinge, die Software und Benutzeranforderungen tun könnten, sollen nicht patentierbar sein, und konkrete Implementierungen (d.h. die eigentlichen Softwarepakete, die das Patent implementieren) sollen auch nicht patentierbar sein – Letztere sind bereits urheberrechtlich geschützt, im Allgemeinen automatisch. Softwarepatente sollen also den mittleren Bereich, zwischen Anforderungen und konkreten Umsetzungen abdecken. In einigen Ländern kann die Forderung der beanspruchten Erfindung, sich auf die physische Welt zu auswirken, auch Teil der Anforderungen sein, dass ein Softwarepatent gültig gehalten wird – obwohl alle nützliche Software Auswirkungen auf die physische Welt hat, kann diese Anforderung offen zur Debatte stehen. Inzwischen wurde das amerikanische Urheberrecht auf verschiedene Aspekte des Schreibens des Softwarecodes angewendet. Softwarepatente sind in der Softwarebranche umstritten, mit vielen Menschen, die unterschiedliche Ansichten über sie haben. Eine der Gründe für die Kontroverse ist, dass die oben erwähnte Spaltung zwischen Anfangsideen und Patent in der Praxis von Patentanwälten nicht geehrt werden scheint – zum Beispiel das Patent für Aspect-Oriented Programming (AOP), das Rechte über jedes Programmiertool geltend gemacht hat, das die Idee von AOP implementiert hat. Eine andere Quelle der Kontroverse ist der Effekt auf Innovation, mit vielen ausgezeichneten Experten und Unternehmen argumentieren, dass Software ein so schnelllebiges Feld ist, dass Softwarepaten nur riesige zusätzliche Prozesskosten und Risiken verursachen und tatsächlich die Innovation verzögern. Im Falle von Debatten über Softwarepatente außerhalb der Vereinigten Staaten wurde argumentiert, dass große amerikanische Unternehmen und Patentanwälte wahrscheinlich die primären Begünstigten sind, Softwarepatente zuzulassen oder weiter zuzulassen. Design und Implementierung Design und Implementierung von Software variiert je nach Komplexität der Software. Zum Beispiel, das Design und die Erstellung von Microsoft Word nahm viel mehr Zeit als die Entwicklung und Entwicklung von Microsoft Notepad, weil letztere viel mehr grundlegende Funktionalität hat. Software wird in der Regel in integrierten Entwicklungsumgebungen (IDE) wie Eclipse, IntelliJ und Microsoft Visual Studio entwickelt und erstellt (aka codiert/geschrieben/programmiert), die den Prozess vereinfachen und die Software kompilieren können (falls zutreffend). Wie in einem anderen Abschnitt festgestellt, wird Software in der Regel auf der vorhandenen Software und der Anwendung Programmierschnittstelle (API) erstellt, dass die zugrunde liegende Software wie GTK, + JavaBeans oder Swing bietet. Bibliotheken (APIs) können nach ihrem Zweck kategorisiert werden. Zum Beispiel wird das Spring Framework zur Implementierung von Unternehmensanwendungen verwendet, die Windows Forms-Bibliothek wird für die Gestaltung von grafischen Benutzeroberflächen (GUI) Anwendungen wie Microsoft Word verwendet, und die Windows Communication Foundation wird für die Gestaltung von Web-Diensten verwendet. Wenn ein Programm konzipiert ist, stützt es sich auf die API. Eine Microsoft Windows-Desktop-Anwendung kann API-Funktionen in der .NETWindows Forms-Bibliothek wie Form1.Close() und Form1.Show() nennen, um die Anwendung zu schließen oder zu öffnen. Ohne diese APIs muss der Programmierer diese Funktionalitäten ganz selbst schreiben. Unternehmen wie Oracle und Microsoft bieten ihre eigenen APIs, so dass viele Anwendungen mit ihren Software-Bibliotheken geschrieben werden, die in der Regel zahlreiche APIs in ihnen haben. Datenstrukturen wie Hash-Tabellen, Arrays und binäre Bäume und Algorithmen wie Quicksort können für die Erstellung von Software nützlich sein. Computer-Software hat besondere wirtschaftliche Eigenschaften, die sein Design, die Kreation und den Vertrieb von anderen wirtschaftlichen Gütern. Eine Person, die Software erstellt, wird als Programmierer, Software-Ingenieur oder Software-Entwickler bezeichnet, Begriffe, die alle eine ähnliche Bedeutung haben. Es gibt auch informelle Begriffe für Programmierer wie Programmierer und Hacker – obwohl die Verwendung des letzteren Wortes zu Verwirrung führen kann, weil es häufiger verwendet wird, jemanden zu bedeuten, der illegal in Computersysteme bricht. Industrie und Organisationen Eine Vielzahl von Software-Unternehmen und Programmierer in der Welt umfassen eine Software-Industrie. Software kann eine recht profitable Branche sein: Bill Gates, der Mitbegründer von Microsoft war 2009 der reichste Mensch der Welt, vor allem aufgrund seines Eigentums an einer beträchtlichen Anzahl von Aktien an Microsoft, das Unternehmen verantwortlich für Microsoft Windows und Microsoft Office Software-Produkte - beide Marktführer in ihren jeweiligen Produktkategorien. Zu den gemeinnützigen Softwareorganisationen gehören die Freie Software-Stiftung, GNU Project und die Mozilla-Stiftung. Software-Standard-Organisationen wie die W3C, IETF entwickeln empfohlene Software-Standards wie XML, HTTP und HTML, so dass Software durch diese Standards interoperieren kann.Weitere bekannte große Software-Unternehmen sind Google, IBM, TCS, Infosys, Wipro, HCL Technologies, Oracle, Novell, SAP, Symantec, Adobe Systems, Sidetrade und Corel, während kleine Unternehmen oft Innovation bieten. Siehe auch Software Release Life Cycle Unabhängiger Software-Anbieter Outline von Software Asset Management Open-Source-Software Referenzen Quellen Evans, Claire L. (2018). Broad Band: Die Untold Geschichte der Frauen, die das Internet gemacht haben. New York: Portfolio/Penguin.ISBN 9780735211759. Externe Links Software an CurlieAlanMackworth ist Professor für Informatik und Canada Research Chair in Künstliche Intelligenz in der Abteilung Informatik an der University of British Columbia. Er ist bekannt als "Der Gründervater" von RoboCup. Er ist ehemaliger Präsident des Vereins für die Förderung der künstlichen Intelligenz (AAAI.) Ausbildung Alan Mackworth wurde an der University of Toronto (B.A.Sc,) Harvard University (A.M) und University of Sussex (D.Phil) Forschung Er arbeitet an grenzübergreifender künstlicher Intelligenz mit Anwendungen in Vision, Robotik, Standortvermittlern, Assistenztechnik und Nachhaltigkeit. Er ist als Pionier in den Bereichen Strengezufriedenheit, Roboter-Fußball, Hybrid-Systeme und konstraint-basierte Agenten bekannt. Er hat über 100 Papiere geschrieben und zwei Bücher mit Autorin: Berechnung Intelligenz: Ein logischer Ansatz (1998) und Künstliche Intelligenz: Stiftungen von Computational Agents (2010.) RoboCup Alan Mackworth schlug vor und baute die weltweit ersten Fußball-Playing-Roboter, die zur Entwicklung von Roboterfußball als führende globale Plattform für multiagente Roboterforschung durch die International RoboCup Foundation führte, wo er als "Der Gründerväter" ausgezeichnet wurde. Roboterfußball als Herausforderungsproblem hat große wissenschaftliche Bedeutung. Es ist nun zu einem Standard-Test-Umfeld für testübergreifende Forschungsideen geworden: ein Forum für die Entwicklung von Theorien von multiagent Systemen. Durch regelmäßige internationale RoboCup-Turniere konkurrieren und kooperieren viele Forscherteams von Studenten und Professoren an der Entwicklung, Prüfung und Entwicklung neuer Theorien und neuer Algorithmen. Karriere Er diente als Gründungsdirektor des UBC Laboratory for Computational Intelligence. Er war Präsident und Treuhänder der Internationalen Gemeinsamen Konferenzen über AI (IJCAI) Inc.;. er ist im IJCAI Executive Committee. Er hat an vielen Redaktionen und Programmausschüssen gearbeitet. Er war VP und Präsident der Canadian Society for Computational Studies of Intelligence (CSCSI). Er diente als Präsident des Vereins zur Förderung der Künstlichen Intelligenz (AAAI). Auszeichnungen Alan Mackworth erhielt den ITAC/NSERC Award für akademische Exzellenz, den Killam Research Prize, den CSCSI Distinguished Service Award, den AAAI Distinguished Service Award, den Association for Constraint Programming Award for Research Excellence und den Lifetime Achievement Award der Canadian AI Association (CAIAC). Er ist Fellow von AAAI, dem Canadian Institute for Advanced Research und der Royal Society of Canada. Referenzen Externe Links Alan Mackworth Webseite