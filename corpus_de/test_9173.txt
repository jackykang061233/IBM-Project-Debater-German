Ein Webserver ist Computersoftware und zugrunde liegende Hardware, die Anfragen über HTTP, das Netzwerkprotokoll, das zur Verbreitung von Webseiten erstellt wurde, oder seine sichere Variante HTTPS akzeptiert. Ein Nutzer-Agent, üblicherweise ein Web-Browser oder Web-Crawler, initiiert die Kommunikation, indem er eine Anfrage für eine bestimmte Ressource unter Verwendung von HTTP stellt, und der Server reagiert mit dem Inhalt dieser Ressource oder einer Fehlermeldung. Der Server kann auch Ressourcen akzeptieren und speichern, die vom Benutzer Agent gesendet werden, wenn es dazu konfiguriert ist. Ein Server kann ein einziger Computer sein, oder sogar ein eingebettetes System wie ein Router mit einer eingebauten Konfigurationsschnittstelle, aber hochraffic Websites führen in der Regel Webserver auf Flotten von Computern, die große Anzahl von Anfragen an Dokumente, Multimedia-Dateien und interaktive Skripte behandeln. Eine von einem Webserver gesendete Ressource kann eine dem Server zur Verfügung stehende Datei sein, oder sie kann zum Zeitpunkt der Anfrage durch ein anderes Programm erzeugt werden, das mit dem Serverprogramm kommuniziert. Der frühere wird für wiederholte Anfragen oft schneller und einfacher geätzt, während dieser ein breiteres Anwendungsspektrum unterstützt. Webseiten, die generierten Inhalten dienen, enthalten in der Regel gespeicherte Dateien, wenn möglich. Technologien wie REST und SOAP, die HTTP als Basis für die allgemeine Computer-zu-Computer-Kommunikation verwenden, haben die Anwendung von Webservern weit über ihren ursprünglichen Zweck hinaus erweitert, human lesbare Seiten zu bedienen. Geschichte Im März 1989 schlug Sir Tim Berners-Lee seinem Arbeitgeber CERN ein neues Projekt vor, mit dem Ziel, den Austausch von Informationen zwischen Wissenschaftlern durch Verwendung eines Hypertextsystems zu erleichtern. Das Projekt führte dazu, dass Berners-Lee 1990 zwei Programme verfasste: Ein Webbrowser namens WorldWideWeb Der weltweit erste Webserver, später bekannt als CERN httpd, der auf NeXTSTEPBetween 1991 und 1994 lief, half die Einfachheit und Wirksamkeit von Frühtechnologien, die zum Surfen und Austausch von Daten über das World Wide Web verwendet wurden, um sie zu vielen verschiedenen Betriebssystemen zu portieren und ihre Verwendung unter wissenschaftlichen Organisationen und Universitäten zu verbreiten, und anschließend in die Industrie. Im Jahr 1994 beschloss Berners-Lee, das World Wide Web Consortium (W3C) zu bilden, die Weiterentwicklung der zahlreichen Technologien (HTTP, HTML, etc.) durch einen Standardisierungsprozess zu regulieren. Grundlegende gemeinsame Merkmale Obwohl Webserver-Programme unterschiedlich sind, wie sie implementiert sind, bieten die meisten von ihnen die folgenden grundlegenden gemeinsamen Features an. HTTP: Unterstützung für eine oder mehrere Versionen des HTTP-Protokolls, um Versionen von HTTP-Antworten zu senden, die mit Versionen von Client HTTP-Anforderungen kompatibel sind, z.B. HTTP/1.0, HTTP/1.1 plus, falls verfügbar, HTTP/2, HTTP/3; Logging: In der Regel haben Webserver die Möglichkeit, einige Informationen über Client-Anforderungen und Server-Antworte auf Log-Dateien für Sicherheits- und statistische Zwecke zu protokollieren. Einige andere beliebte Funktionen (nur eine sehr kurze Auswahl) sind: Authentication, optionale Unterstützung für Autorisierungsanfrage (Anfrage des Benutzernamens und Passworts), bevor Sie Zugriff auf einige oder alle Arten von Webseiten-Ressourcen. Große Dateiunterstützung, um Dateien zu bedienen, deren Größe größer als 2 GB auf 32 Bit OS ist. Bandbreitendrosselung, um die Geschwindigkeit der Inhaltsantworten zu begrenzen, um das Netzwerk nicht zu sättigen und mehr Kunden bedienen zu können. Virtuelle Hosting, um viele Websites (Domainnamen) mit nur einer IP-Adresse bedienen zu können. Webserver können die Pfadkomponente eines einheitlichen Ressourcen Locators (URL) in: Eine lokale Dateisystemressource (für statische Anfragen)Ein interner oder externer Programmname (für dynamische Anfragen) Für eine statische Anfrage ist der vom Client angegebene URL-Pfad relativ zum Root-Verzeichnis der Zielwebsite. Betrachten Sie die folgende URL, wie sie von einem Client über HTTP angefordert würde: http://www.example.com/path/file.html Der Benutzer-Agent des Clients übersetzt es in eine Verbindung zu www.example.com mit der folgenden HTTP/1.1 Anfrage: GET path/file.htmlHTTP/1.1 Gastgeber: www.example.com Der Webserver auf www.example.com wird den angegebenen Pfad auf den Pfad des (Host) Website-Rootverzeichnisses anhängen. Auf einem Apache-Server ist dies häufig zu Hause/www/website (auf Unix-Maschinen, in der Regel var/www/website). Das Ergebnis ist die lokale Dateisystemressource: home/www/www.example.com/path/file.html Der Webserver liest dann die Datei, wenn sie existiert, und sendet eine Antwort auf den Webbrowser des Clients. Die Antwort beschreibt den Inhalt der Datei und enthält die Datei selbst oder eine Fehlermeldung wird sagen, dass die Datei nicht existiert oder nicht verfügbar ist. Webserver Kernel-Mode und User-Mode Eine Webserver-Software kann entweder in den OS-Kernel integriert werden, oder im Benutzerraum (wie andere reguläre Anwendungen). Webserver, die im Kernel-Modus laufen, können direkten Zugriff auf Kernel-Ressourcen haben und so können sie theoretisch schneller sein als diejenigen, die im User-Modus laufen; sowieso gibt es Nachteile bei der Ausführung eines Webservers im Kernel-Modus, z.B.: Schwierigkeiten bei der Entwicklung (Debugging) Software, während Run-time kritische Fehler zu ernsthaften Problemen im OS-Kernel führen können. Webserver, die im Benutzermodus ausgeführt werden, müssen das System um Erlaubnis bitten, mehr Speicher oder mehr CPU-Ressourcen zu verwenden. Nicht nur diese Anfragen an den Kernel nehmen Zeit, sondern sie sind nicht immer zufrieden, weil das System Ressourcen für seine eigene Nutzung behält und die Verantwortung hat, Hardwareressourcen mit allen anderen laufenden Anwendungen zu teilen. Die Ausführung im Benutzermodus kann auch nutzlose Pufferkopien bedeuten, die eine weitere Einschränkung für Benutzer-Modus-Webserver sind. Heutzutage wird fast alle Webserver-Software im Benutzermodus ausgeführt (weil viele der oben genannten kleinen Nachteile durch schnellere Hardware, neue Betriebssystemversionen und neue Webserver-Software überwunden wurden.) Siehe auch Vergleich der Webserver-Software, um herauszufinden, welche von ihnen im Kernel-Modus oder im Benutzermodus (auch als Kernel-Raum oder Benutzerraum bezeichnet) ausgeführt werden. Leistungen Um die Nutzererfahrung zu verbessern, sollten Webserver schnell (so bald wie möglich) auf Client-Anfragen antworten; es sei denn, die Content-Antwort wird (nach Konfiguration) für einige Arten von Dateien (z.B. Big Files, etc.) gedrosselt. Für Webserver-Software sind die wichtigsten Leistungsstatistiken (gemessen unter einer variierenden Anzahl von Clients und Anfragen pro Client): Anzahl der maximalen Anfragen pro Sekunde (RPS, ähnlich QPS, abhängig von HTTP-Version und Konfiguration, Art der HTTP-Anforderungen, etc.); Netz-Latenzantwortzeit (in der Regel in Millisekunden) für jede neue Client-Anforderung; Durchsatz in Bytes pro Sekunde (je nach Dateigröße, cached oder nicht cached content, Protokoll verwendet). Über drei Leistungszahlen kann je nach Anzahl der aktiven TCP-Verbindungen deutlich variieren, so dass eine vierte Statistiknummer die von einem Webserver unter einer bestimmten Webserver-Konfiguration, OS-Typ und verfügbaren Hardwareressourcen unterstützte Konkurrenzebene ist. Last but not least kann das spezielle Servermodell, das zur Implementierung eines Webserverprogramms verwendet wird, die Leistungs- und Skalierbarkeitsstufe vorspannen, die unter hoher Last erreicht werden kann oder wenn man High-End-Hardware (viele CPUs, Festplatten usw.) verwendet. Die Performances eines Webservers werden in der Regel durch die Verwendung eines oder mehrerer der verfügbaren automatisierten Load-Tests bewertet. Belastungsgrenzen Ein Webserver (Programm-Installation) hat in der Regel vordefinierte Lastgrenzen, da er nur eine begrenzte Anzahl von gleichzeitigen Client-Verbindungen (in der Regel zwischen 1 und mehreren Zehntausenden für jeden aktiven Web-Server-Prozess, siehe auch das C10k-Problem und C10M-Problem) handhaben kann und es nur eine bestimmte maximale Anzahl von Anfragen pro Sekunde abhängig von: seine eigenen Einstellungen, der HTTP-Anforderungstyp, ob der angeforderte Inhalte statische oder dynamisch ist, Wenn ein Web-Server in der Nähe oder über seine Grenzen ist, wird er überlastet und so kann es unverantwortlich werden. Ursachen der Überlastung Webserver können jederzeit überlastet werden, da: Übermäßig legitimer Webverkehr. Tausende oder sogar Millionen von Kunden, die mit der Website in einem kurzen Intervall verbinden, z.B. Slashdot-Effekt; Verteilte Denial of Service-Angriffe. Ein Denial-of-Service-Angriff (DoS-Angriff) oder verteilte Denial-of-Service-Angriff (DDoS-Angriff) ist ein Versuch, einen Computer oder Netzwerk-Ressourcen für seine beabsichtigten Benutzer nicht verfügbar zu machen; Computer-Wurm, die manchmal verursachen anormalen Verkehr aufgrund von Millionen von infizierten Computern (nicht koordiniert unter ihnen) XSS-Wurm können aufgrund von Millionen von infizierten Browsern oder Web-Servern; Internet-Servern Dies kann durch notwendige oder dringende Wartung oder Upgrade, Hardware oder Software-Ausfälle, Back-End (z.B. Datenbank) Fehler, etc. geschehen; in diesen Fällen können die restlichen Webserver zu viel Verkehr erhalten und überlastet werden. Symptome der Überlastung Die Symptome eines überlasteten Webservers sind: Anfragen werden mit (möglicherweise langen) Verzögerungen (von 1 Sekunde auf wenige hundert Sekunden) bedient. Der Webserver gibt einen HTTP-Fehlercode wie 500, 502, 503, 504, 408 oder sogar einen Intermittierten 404 zurück. Der Webserver verweigert oder setzt TCP-Verbindungen zurück, bevor er Inhalte zurückgibt. In sehr seltenen Fällen gibt der Webserver nur einen Teil der angeforderten Inhalte zurück. Dieses Verhalten kann als Bug betrachtet werden, auch wenn es in der Regel als Symptom der Überlast auftritt. Anti-overload-Techniken Um überdurchschnittliche Belastungsgrenzen teilweise zu überwinden und Überlast zu verhindern, verwenden die beliebtesten Websites gemeinsame Techniken wie: Verwalten des Netzwerkverkehrs, indem sie Firewalls, um unerwünschte Traffic aus schlechten IP-Quellen zu blockieren oder schlechte Muster zu haben; HTTP-Verkehrsmanager löschen, umleiten oder neu schreiben Anfragen mit schlechten HTTP-Mustern; Bandwidth-Management und Verkehrsformung, um Peaks in der Netzwerknutzung zu glätten; Bereitstellung von Web-Cache-Techniken in HTTP-Antwort-Headern (nicht nur für statische Inhalte, wenn möglich, auch für dynamische Inhalte). Mit verschiedenen Domänennamen oder IP-Adressen können verschiedene (statische und dynamische) Inhalte durch separate Webserver bedient werden, z.B.: http://images.example.com http://example.comUm verschiedene Domain-Namen oder Computer zu trennen große Dateien von kleinen und mittleren Dateien; die Idee ist, in der Lage, kleine und mittlere Dateien vollständig zu speichern und große oder riesige (über 10 – 1000 MB) Dateien mit verschiedenen Einstellungen effizient zu bedienen. Mit vielen Webservern (Programme) pro Computer, jeder an seine eigene Netzwerkkarte und IP-Adresse gebunden. Mit vielen Webservern (Computern), die hinter einem Load Balancer zusammengefasst sind, so dass sie als ein großer Webserver fungieren oder gesehen werden. Hinzufügen von mehr Hardware-Ressourcen (d.h. RAM, schnelle Festplatten) auf jeden Computer. Tuning OS-Parameter für Hardware-Funktionen und Nutzung. Mit effizienteren Computerprogrammen für Webserver, etc. Verwenden Sie die effizienteste Web Server Gateway Interface, um dynamische Anforderungen zu bearbeiten. Mit anderen Programmiertechniken und Workarounds, insbesondere wenn es um dynamische Inhalte geht, wird die HTTP-Antwort beschleunigt. Mit den neuesten effizienten Versionen von HTTP (z.B. über die Verwendung gemeinsamer HTTP/1.1 auch durch die Freigabe von HTTP/2 und vielleicht HTTP/3 auch, wenn verfügbare Webserver-Software zuverlässige Unterstützung für die beiden letzten Protokolle hat) um die Anzahl der von jedem Client gestarteten TCP/IP-Verbindungen und die Größe der ausgetauschten Daten zu reduzieren (wegen der kompakteren HTTP-Header-Darstellung, Datenkompression usw.); sowiesowohl, wenn neuere HTTP-Protokolle HTTP (2 und 3)-Protokolle in der Daten erforderlich sind Marktanteil Februar 2021 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2021 Web Server Survey. Alle anderen Webserver werden von weniger als 5% der Webseiten verwendet. Februar 2020 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2020 Web Server Survey. Alle anderen Webserver werden von weniger als 3% der Webseiten verwendet. Februar 2019 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2019 Web Server Survey. Alle anderen Webserver werden von weniger als 1% der Webseiten verwendet. Juli 2018 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2018 Web Server Survey. Alle anderen Webserver werden von weniger als 1% der Webseiten verwendet. Februar 2017 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2017 Web Server Survey. Februar 2016 Im Folgenden sind die neuesten Statistiken über den Marktanteil aller Websites der Top-Webserver im Internet von Netcraft Februar 2016 Web Server Survey. Apache, IIS und Nginx sind die am häufigsten verwendeten Webserver im World Wide Web. Siehe auch Server (computing) Anwendungsserver Vergleich der Webserver-Software HTTP-Kompression Open Source Web-Anwendung Variant Objekt Virtuelle Hosting Web-Hosting-Service Web-Proxy Web-Service Standard Web Server Gateway-Schnittstellen für dynamische Inhalte verwendet: CGI SCGI FastCGIA wenige andere Web Server-Schnittstellen (server- oder sprachspezifisch) für dynamische Inhalte verwendet: SSI (seltens verwendet, statische HTML-Dokumente mit SSI-Richtlinien werden von Server-Software interpretiert, um kleine dynamische Daten auf der Fliege zu enthalten, wenn Seiten bedient werden, z.B. Datum und Uhrzeit, andere statische Dateiinhalte usw.) SAPI, ISAPI, NSAPI PSGI Perl Web Server Gateway Interface WSGIPython Web Server Gateway Interface Rack Web Server Gateway Interface JSGI JavaScript Web Server Gateway Interface Java Servlet, JavaServer Pages Active Server Pages, ASP.NET Referenzen Externe Links Mozilla: Was ist ein Webserver? Netcraft: Nachrichten über Webserver-Umfrage