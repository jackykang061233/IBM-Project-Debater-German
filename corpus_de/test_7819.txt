Open-Source-Software (OSS) ist Computer-Software, die unter einer Lizenz veröffentlicht wird, in der der Urheberrechtsinhaber Nutzern die Rechte zur Nutzung, Studie, Änderung und Verbreitung der Software und ihrer Quellcode an jeden und für jeden Zweck gewährt. Open-Source-Software kann kollaborativ öffentlich entwickelt werden. Open-Source-Software ist ein prominentes Beispiel für offene Zusammenarbeit, was bedeutet, dass jeder fähige Benutzer online an der Entwicklung teilnehmen kann, so dass die Anzahl der möglichen Beitrager unbestimmt. Open-Source-Software-Entwicklung kann in verschiedenen Perspektiven jenseits der eines einzigen Unternehmens bringen. Ein Bericht der Standish Group von 2008 erklärte, dass die Einführung von Open-Source-Softwaremodellen zu Einsparungen von etwa 60 Milliarden US-Dollar pro Jahr für die Verbraucher geführt habe. Open-Source-Code kann für das Studium verwendet werden und ermöglicht fähigen End-Nutzern, Software an ihre persönlichen Bedürfnisse in ähnlicher Weise anzupassen Benutzer-Skripte und benutzerdefinierte Style-Bögen erlauben für Web-Seiten, und schließlich veröffentlichen die Modifikation als Gabel für Benutzer mit ähnlichen Präferenzen, und direkt mögliche Verbesserungen als Pull-Anfragen. Geschichte Ende der 1990er Jahre: Gründung der Open Source Initiative In den frühen Tagen des Computing, Programmierer und Entwickler gemeinsam Software, um voneinander zu lernen und das Feld des Computing zu entwickeln. Schließlich zog die Open-Source-Notion in den Jahren 1970-1980 auf den Weg der Vermarktung von Software. Jedoch, Wissenschaftler immer noch oft Software kollaborativ entwickelt. Zum Beispiel, Donald Knuth 1979 mit dem TeX-Typeinstellungssystem oder Richard Stallman 1983 mit dem GNU-Betriebssystem. 1997 veröffentlichte Eric Raymond Die Kathedrale und der Basar, eine reflektierende Analyse der Hacker-Gemeinschaft und Frei-Software-Prinzipien. Das Papier erhielt Anfang 1998 eine große Aufmerksamkeit und war ein Faktor, um Netscape Communications Corporation zu motivieren, um ihre beliebte Netscape Communicator Internet Suite als freie Software freizugeben. Dieser Quellcode wurde später die Basis hinter SeaMonkey, Mozilla Firefox, Thunderbird und KompoZer.Netscapes Akt veranlasste Raymond und andere, um zu prüfen, wie die Freie Software-Stiftung Ideen und wahrgenommene Vorteile für die kommerzielle Software-Industrie bringen. Sie kamen zu dem Schluss, dass der soziale Aktivismus der FSF nicht an Unternehmen wie Netscape appellierte und einen Weg suchte, die freie Software-Bewegung neu zu markieren, um das Geschäftspotenzial des Teilens und der Zusammenarbeit auf Software-Quellencode zu betonen. Der neue Begriff, den sie gewählt haben, war "offene Quelle", die bald von Bruce Perens, Herausgeber Tim O'Reilly, Linus Torvalds und anderen angenommen wurde. Die Open Source Initiative wurde im Februar 1998 gegründet, um die Nutzung des neuen Begriffs zu fördern und Open-Source-Prinzipien zu evangelisieren. Während die Open Source-Initiative versuchte, die Nutzung des neuen Begriffs zu fördern und die Prinzipien zu evangelisieren, die sie erfüllte, fanden sich kommerzielle Software-Anbieter zunehmend von dem Konzept der frei verteilten Software und dem universellen Zugriff auf den Quellcode einer Anwendung bedroht. Microsoft Executive Jim Allchin erklärte 2001 öffentlich, dass "offene Quelle ist ein geistiges Eigentum Zerstörer. Ich kann mir nicht vorstellen, was schlimmer sein könnte als das für das Software-Geschäft und das intellektuelle Unternehmen. "Die Freie und Open-Source-Software hat jedoch eine Rolle außerhalb des Mainstreams der privaten Softwareentwicklung gespielt, Unternehmen wie Microsoft haben begonnen, offizielle Open-Source-Präsentationen im Internet zu entwickeln. IBM, Oracle, Google und State Farm sind nur einige der Unternehmen mit einer ernsthaften öffentlichen Beteiligung am heutigen wettbewerbsfähigen Open-Source-Markt. In der Unternehmensphilosophie hat sich die Entwicklung von FOSS erheblich verändert. Die Freizügigkeit wurde 1983 eingeführt. 1998 befürwortete eine Gruppe von Individuen, dass der Begriff Freie Software durch Open-Source-Software (OSS) als Ausdruck ersetzt werden sollte, der für die Unternehmenswelt weniger eindeutig und komfortabler ist. Software-Entwickler können ihre Software mit einer Open-Source-Lizenz veröffentlichen, so dass jeder auch die gleiche Software entwickeln oder seine interne Funktion verstehen kann. Mit Open-Source-Software ist in der Regel jeder erlaubt, Modifikationen von ihm zu erstellen, port es zu neuen Betriebssystemen und Instruktion-Set-Architekturen, teilen Sie es mit anderen oder, in einigen Fällen, vermarkten es. Scholars Casson und Ryan haben mehrere politikbasierte Gründe für die Annahme von Open Source - insbesondere die erhöhte Wertschöpfung aus Open Source (im Vergleich zu den meisten proprietären Formaten) in den folgenden Kategorien: Security Affordability Transparenz Perpetuity Interoperability Flexibilität Lokalisierung – insbesondere im Kontext lokaler Regierungen (die Softwareentscheidungen treffen). Casson und Ryan argumentieren, dass "Regierungen eine inhärente Verantwortung und fiduziäre Pflicht zu Steuerzahlern haben", die die sorgfältige Analyse dieser Faktoren beinhaltet, wenn sie entscheiden, proprietäre Software zu kaufen oder eine Open-Source-Option zu implementieren. Die Open Source Definition präsentiert eine Open-Source-Philosophie und definiert weiter die Nutzungsbedingungen, Modifikation und Umverteilung von Open-Source-Software. Softwarelizenzen gewähren Nutzern Rechte, die ansonsten dem Urheberrechtsinhaber vorbehalten wären. Mehrere Open-Source-Softwarelizenzen haben sich innerhalb der Grenzen der Open Source Definition qualifiziert. Das prominenteste und beliebteste Beispiel ist die GNU General Public License (GPL), die "die freie Verbreitung unter der Bedingung, dass weitere Entwicklungen und Anwendungen unter die gleiche Lizenz gestellt werden", so auch frei. Das Open-Source-Label kam aus einer Strategiesitzung am 7. April 1998 in Palo Alto in Reaktion auf Netscapes Januar 1998 Ankündigung einer Quellcode-Veröffentlichung für Navigator (als Mozilla). Eine Gruppe von Individuen auf der Sitzung waren Tim O'Reilly, Linus Torvalds, Tom Paquin, Jamie Zawinski, Larry Wall, Brian Behlendorf, Sameer Parekh, Eric Allman, Greg Olson, Paul Vixie, John Ousterhout, Guido van Rossum, Philip Zimmermann, John Gilmore und Eric S. Raymond. Sie nutzten die Gelegenheit vor der Veröffentlichung des Quellcodes von Navigator, um eine mögliche Verwirrung zu klären, die durch die Mehrdeutigkeit des Wortes in englischer Sprache verursacht wird. Viele Menschen behaupteten, dass die Geburt des Internets seit 1969 die Open-Source-Bewegung begann, während andere nicht zwischen Open-Source- und Free-Software-Bewegungen unterscheiden. Die Free Software Foundation (FSF) startete 1985, beabsichtigte das Wort frei zu vertreiben (oder "frei wie in freier Sprache") und nicht frei von Kosten (oder "frei wie im freien Bier"). Da eine große Menge freier Software bereits (und immer noch) kostenlos war, wurde diese kostenlose Software mit Null Kosten verbunden, die anti-kommerzielle schien. Die Open Source Initiative (OSI) wurde im Februar 1998 von Eric Raymond und Bruce Perens gegründet. Mit mindestens 20 Jahren Beweismaterial aus Fallgeschichten geschlossener Softwareentwicklung gegenüber offener Entwicklung, die bereits von der Internet-Entwickler-Community bereitgestellt wurden, präsentierte die OSI den Fall "offene Quelle" für kommerzielle Unternehmen wie Netscape. Die OSI hoffte, dass die Verwendung des Labels "offene Quelle" ein von Christine Peterson vom Foresight Institute an der Strategiesitzung vorgeschlagener Begriff, Mehrdeutigkeit beseitigen würde, insbesondere für Personen, die "freie Software" als Anti-Commercial wahrnehmen. Sie wollten ein höheres Profil an die praktischen Vorteile des frei verfügbaren Quellcodes bringen, und sie wollten große Softwareunternehmen und andere High-Tech-Industrien in Open Source bringen. Perens versuchte, "offene Quelle" als Service-Marke für die OSI zu registrieren, aber dieser Versuch war unpraktisch durch Markenstandards. Mittlerweile, aufgrund der Präsentation von Raymonds Papier auf das obere Management bei Netscape-Raymond nur entdeckt, wenn er die Pressemitteilung lesen, und wurde von Netscape CEO Jim Barksdales PA später am Tag aufgerufen - Netscape veröffentlichte seinen Navigator Quellcode als Open Source, mit günstigen Ergebnissen. Begriffsbestimmungen Die Definition der Open Source Initiative (OSI) wird von mehreren Regierungen international als Standard- oder De-facto-Definition anerkannt. Darüber hinaus haben sich viele der weltweit größten Open-Source-Software-Projekte und -Beitrager, darunter Debian, Drupal Association, FreeBSD Foundation, Linux Foundation, OpenSUSE Foundation, Mozilla Foundation, Wikimedia Foundation, Wordpress Foundation, verpflichtet, die OSI-Mission und Open Source Definition durch das OSI Affiliate-Abkommen aufrechtzuerhalten. OSI verwendet Die Open Source Definition, um festzustellen, ob es eine Softwarelizenz Open Source betrachtet. Die Definition basierte auf den Debian Free Software Guidelines, die vor allem von Perens geschrieben und angepasst wurden. Perens gründete sein Schreiben nicht auf die "vier Freiheiten" der Free Software Foundation (FSF), die später nur weit verbreitet waren. Unter Perens' Definition ist Open Source eine breite Software-Lizenz, die den Quellcode der Öffentlichkeit mit entspannten oder nicht vorhandenen Einschränkungen für die Verwendung und Änderung des Codes zur Verfügung stellt. Es ist ein explizites Merkmal der Open Source, dass es sehr wenige Einschränkungen auf die Nutzung oder Verteilung durch jede Organisation oder Benutzer, um die schnelle Entwicklung der Software zu ermöglichen. Trotz der anfänglichen Annahme widerspricht Richard Stallman der FSF nun flach dem Begriff "Open Source", der sich auf das bezieht, was sie als "freie Software" bezeichnen. Obwohl er zustimmt, dass die beiden Begriffe "fast die gleiche Kategorie von Software" beschreiben, betrachtet Stallman die Begriffe falsch und irreführend. Stallman lehnt sich auch gegen den professierten Pragmatismus der Open Source Initiative ab, da er befürchtet, dass die freien Software-Ideen von Freiheit und Gemeinschaft durch die Kompromisse gegen die idealistischen Standards der FSF für Softwarefreiheit bedroht sind. Das FSF hält freie Software für eine Untermenge von Open-Source-Software, und Richard Stallman erklärte, dass DRM-Software zum Beispiel als Open Source entwickelt werden kann, obwohl es seinen Benutzern keine Freiheit gibt (es beschränkt sie,) und somit nicht als freie Software qualifiziert. Lizenzierung von Open-Source-Software Wenn ein Autor Code zu einem Open-Source-Projekt (z.B. Apache.org) beiträgt, tun sie dies unter einer expliziten Lizenz (z.B. dem Apache Contributor License Agreement) oder einer impliziten Lizenz (z.B. der Open-Source-Lizenz, unter der das Projekt bereits Lizenzierungscode ist). Einige Open-Source-Projekte übernehmen keinen Code unter einer Lizenz, sondern erfordern tatsächlich eine gemeinsame Vergabe des Urheberrechts des Autors, um Codebeiträge in das Projekt aufzunehmen. Beispiele für kostenlose Software-Lizenz / Open-Source-Lizenzen sind Apache-Lizenz, BSD-Lizenz, GNU General Public License, GNU Lesser General Public License, MIT License, Eclipse Public License und Mozilla Public License. Die Verbreitung von Open-Source-Lizenzen ist ein negativer Aspekt der Open-Source-Bewegung, da es oft schwierig ist, die rechtlichen Auswirkungen der Unterschiede zwischen Lizenzen zu verstehen. Mit mehr als 180.000 verfügbaren Open-Source-Projekten und mehr als 1400 einzigartigen Lizenzen hat sich die Komplexität der Entscheidung, wie man Open-Source-Nutzung innerhalb geschlossener Geschäftsbetriebe verwalten kann, drastisch erhöht. Einige sind home-grown, während andere nach Mainstream-FOSS-Lizenzen wie Berkeley Software Distribution (BSD,) Apache, MIT-style (Massachusetts Institute of Technology,) oder GNU General Public License (GPL) modeled werden. In Anbetracht dessen werden die Open-Source-Praktizierenden zunächst Klassifizierungssysteme verwenden, in denen FOSS-Lizenzen gruppiert werden (in der Regel auf der Grundlage der Existenz und der Verpflichtungen, die durch die Copyleft-Bestimmung auferlegt werden; die Stärke der Copyleft-Bestimmung). 2008 wurde ein wichtiger rechtlicher Meilenstein für die Open Source / Free-Software-Bewegung verabschiedet, als das US-amerikanische Berufungsgericht entschied, dass freie Softwarelizenzen auf jeden Fall rechtsverbindliche Bedingungen für die Nutzung urheberrechtlich geschützter Werke festlegen und daher nach geltendem Urheberrecht durchsetzbar sind. Wenn Endbenutzer die Lizenzbedingungen verletzen, verschwindet ihre Lizenz, d.h. sie verletzen das Urheberrecht. Trotz dieses Lizenzrisikos nutzen die meisten kommerziellen Softwareanbieter Open-Source-Software in kommerziellen Produkten und erfüllen die Lizenzbedingungen, z.B. die Apache-Lizenz. Zertifizierungen können dazu beitragen, das Vertrauen der Nutzer zu stärken. Die Zertifizierung könnte auf die einfachste Komponente, auf ein ganzes Software-System angewendet werden. Das International Institute for Software Technology der Vereinten Nationen initiierte ein Projekt namens "The Global Desktop Project". Dieses Projekt zielt darauf ab, eine Desktop-Schnittstelle aufzubauen, die jeder Endbenutzer verstehen und mit ihnen interagieren kann und so die Sprache und kulturellen Barrieren überquert. Das Projekt würde den Zugang der Entwicklungsländer zu Informationssystemen verbessern. UNU/IIST hofft, dies ohne Kompromisse in der Qualität der Software durch die Einführung von Zertifizierungen zu erreichen. Entwicklungsmodell für Open-Source-Software In seinem 1997 Essay Die Kathedrale und der Basar, Open-Source- evangelist Eric S. Raymond schlägt ein Modell für die Entwicklung von OSS bekannt als Basar-Modell. Raymond mag die Entwicklung von Software durch traditionelle Methoden, um eine Kathedrale zu bauen, "besorgt von einzelnen Zauberern oder kleinen Bands von Mages arbeiten in herrlicher Isolation". Er schlägt vor, dass alle Software mit dem Basar-Stil entwickelt werden sollte, die er als "ein großer babbelnder Basar unterschiedlicher Agenda und Ansätze beschrieben. " Im traditionellen Modell der Entwicklung, das er als Dommodell bezeichnete, findet die Entwicklung zentralisiert statt. Rollen sind klar definiert. Zu den Roles gehören Personen, die sich der Gestaltung (die Architekten) der für die Projektleitung verantwortlichen Personen und der für die Umsetzung verantwortlichen Personen widmen. Traditionelle Softwaretechnik folgt dem Dommodell. Das Basarmodell ist jedoch anders. In diesem Modell sind Rollen nicht eindeutig definiert. Gregorio Robles schlägt vor, dass mit dem Basarmodell entwickelte Software folgende Muster aufweisen soll: Benutzer sollten als Mitentwickler behandelt werden Die Benutzer werden wie Ko-Entwickler behandelt und sollten daher Zugriff auf den Quellcode der Software haben. Darüber hinaus werden Benutzer ermutigt, Ergänzungen an die Software, Codefixes für die Software, Fehlerberichte, Dokumentation, etc. einzureichen. Mit mehr Mitentwickler erhöht sich die Rate, mit der die Software entwickelt wird. Linuss Gesetz sagt: "Given genug Augenbälle sind alle Käfer flach." Dies bedeutet, dass, wenn viele Benutzer den Quellcode anzeigen, sie schließlich alle Fehler finden und vorschlagen, wie sie zu beheben. Beachten Sie, dass einige Benutzer erweiterte Programmierkenntnisse haben, und außerdem bietet jeder Benutzer Maschine eine zusätzliche Testumgebung. Diese neue Testumgebung bietet die Möglichkeit, einen neuen Fehler zu finden und zu beheben. Frühe Veröffentlichungen Die erste Version der Software sollte so früh wie möglich veröffentlicht werden, um die Chancen zu erhöhen, Co-Entwickler früh zu finden. Häufige Integration Code-Änderungen sollten so oft wie möglich integriert werden (in eine gemeinsame Code-Basis eingespeichert), um den Overhead der Fixierung einer großen Anzahl von Fehlern am Ende des Projektlebenszyklus zu vermeiden. Einige Open-Source-Projekte bauen nachts auf, wo die Integration täglich automatisch erfolgt. Mehrere Versionen Es sollten mindestens zwei Versionen der Software vorhanden sein. Es sollte eine Buggier-Version mit mehr Funktionen und eine stabilere Version mit weniger Funktionen. Die Buggy-Version (auch die Entwicklungsversion genannt) ist für Benutzer, die die sofortige Nutzung der neuesten Funktionen wünschen, und sind bereit, das Risiko der Verwendung von Code zu akzeptieren, der noch nicht gründlich getestet wird. Die Benutzer können dann als Mitentwickler fungieren, Fehler melden und Fehlerbehebungen bereitstellen. Hohe Modularisierung Die allgemeine Struktur der Software sollte modular sein, um eine parallele Entwicklung auf unabhängigen Komponenten zu ermöglichen. Dynamische Entscheidungsstruktur Es besteht die Notwendigkeit einer Entscheidungsstruktur, ob formell oder informell, die strategische Entscheidungen in Abhängigkeit von den sich ändernden Benutzeranforderungen und anderen Faktoren trifft. Vergleichen Sie mit extremer Programmierung. Die Daten legen jedoch nahe, dass OSS nicht ganz so demokratisch ist, wie das Basarmodell vorschlägt. Eine Analyse von fünf Milliarden Bytes von Free/open-Source-Code durch 31,999 Entwickler zeigt, dass 74% des Codes von den aktivsten 10% der Autoren geschrieben wurde. Die durchschnittliche Anzahl der Autoren, die an einem Projekt beteiligt waren, lag bei 5.1, mit dem Median bei 2. Vorteile und Nachteile Open-Source-Software ist in der Regel einfacher zu erhalten als proprietäre Software, die oft zu einer erhöhten Nutzung führt. Darüber hinaus kann die Verfügbarkeit einer Open-Source-Implementierung eines Standards die Annahme dieses Standards erhöhen. Es hat auch geholfen, Entwickler Loyalität zu bauen, da Entwickler fühlen sich bestärkt und haben ein Gefühl des Eigentums an dem Endprodukt. Darüber hinaus werden für OSS geringere Kosten für Marketing- und Logistikdienstleistungen benötigt. Es ist ein gutes Werkzeug, um das Image eines Unternehmens zu fördern, einschließlich seiner kommerziellen Produkte. Der OSS-Entwicklungsansatz hat dazu beigetragen, zuverlässige, hochwertige Software schnell und kostengünstig zu produzieren. Open-Source-Entwicklung bietet das Potenzial für eine flexiblere Technologie und schnellere Innovation. Es soll zuverlässiger sein, da es typischerweise Tausende von unabhängigen Programmierern hat, die Fehler der Software testen und beheben. Open Source ist nicht abhängig von der Firma oder Autor, die es ursprünglich erstellt. Auch wenn das Unternehmen ausfällt, existiert der Code weiterhin und wird von seinen Benutzern entwickelt. Es verwendet auch offene Standards für jeden zugänglich; so hat es nicht das Problem der unvereinbaren Formate, die in proprietären Software existieren können. Es ist flexibel, weil modulare Systeme es Programmierern ermöglichen, benutzerdefinierte Schnittstellen zu bauen oder neue Fähigkeiten zu ihm hinzuzufügen und es ist innovativ, da Open-Source-Programme das Produkt der Zusammenarbeit zwischen einer Vielzahl von verschiedenen Programmierern sind. Die Mischung aus unterschiedlichen Perspektiven, Unternehmenszielen und persönlichen Zielen beschleunigt die Innovation. Darüber hinaus kann freie Software nach rein technischen Anforderungen entwickelt werden. Es erfordert nicht, an kommerziellen Druck zu denken, der oft die Qualität der Software abbaut. Kommerzielle Drücke machen traditionelle Softwareentwickler mehr Aufmerksamkeit auf die Anforderungen der Kunden als auf die Sicherheitsanforderungen, da solche Eigenschaften für den Kunden etwas unsichtbar sind. Es wird manchmal gesagt, dass der Open-Source-Entwicklungsprozess möglicherweise nicht gut definiert werden kann und die Stadien im Entwicklungsprozess, wie Systemtests und Dokumentationen, ignoriert werden können. Dies gilt jedoch nur für kleine (meist einzige Programmierer) Projekte. Größere, erfolgreiche Projekte definieren und erzwingen zumindest einige Regeln, da sie die Teamarbeit ermöglichen müssen. In den komplexesten Projekten können diese Regeln genauso streng sein, wie die Überprüfung sogar geringfügiger Veränderungen durch zwei unabhängige Entwickler. Nicht alle OSS-Initiativen waren erfolgreich, zum Beispiel SourceXchange und Eazel. Software-Experten und Forscher, die nicht von der Fähigkeit der Open Source überzeugt sind, Qualitätssysteme zu produzieren, identifizieren den unklaren Prozess, die Spätdefektentdeckung und den Mangel an empirischen Beweisen als die wichtigsten Probleme (gesammelte Daten über Produktivität und Qualität). Es ist auch schwierig, ein kommerziell fundiertes Geschäftsmodell rund um das Open-Source-Paradigm zu entwerfen. Folglich können nur technische Anforderungen erfüllt werden und nicht die des Marktes. In Bezug auf die Sicherheit, Open Source kann Hacker über die Schwächen oder Schlupflöcher der Software einfacher als Closed-Source-Software wissen. Es hängt von Kontrollmechanismen ab, um eine effektive Leistung autonomer Agenten zu schaffen, die an virtuellen Organisationen teilnehmen. Entwicklungswerkzeuge In der OSS-Entwicklung werden Werkzeuge verwendet, um die Entwicklung des Produkts und des Entwicklungsprozesses selbst zu unterstützen. Revisionskontrollsysteme wie Concurrent Versions System (CVS) und später Subversion (SVN) und Git sind Beispiele von Werkzeugen, oft selbst Open Source, helfen, die Quellcodedateien und die Änderungen an diesen Dateien für ein Softwareprojekt zu verwalten. Die Projekte werden häufig in Repositories gespeichert, die auf Quellcode-Hosting-Einrichtungen wie Launchpad, GitHub, GitLab und SourceForge gehostet und veröffentlicht werden.Open-Source-Projekte werden oft lose mit "kleiner formalisierter Prozessmodellierung oder -unterstützung" organisiert, aber Dienstprogramme wie Emissionstracker werden oft verwendet, um Open-Source-Software-Entwicklung zu organisieren. Häufig verwendete Bugtracker sind Bugzilla und Redmine. Tools wie Mailinglisten und IRC bieten die Möglichkeit, zwischen Entwicklern zu koordinieren. Zentralisierte Code-Hosting-Seiten haben auch soziale Funktionen, die Entwickler kommunizieren können. Organisationen Einige der " prominenteren Organisationen", die an der OSS-Entwicklung beteiligt sind, umfassen die Apache Software Foundation, Schöpfer des Apache Webservers; die Linux Foundation, eine gemeinnützige, die ab 2012 Linus Torvalds, der Schöpfer des Linux-Betriebssystem-Kernels; die Eclipse Foundation, Heimat der Eclipse Software-Entwicklungsplattform; das Debian-Projekt, Schöpfer der einflussreichen GNU/Linux-Gemeinschaft; die Mozilla Neue Organisationen neigen dazu, ein anspruchsvolleres Governance-Modell zu haben und ihre Mitgliedschaft wird oft von juristischen Mitgliedern gebildet. Open Source Software Institute ist eine mitgliedsbasierte, gemeinnützige (501 c)(6 Organisation gegründet im Jahr 2001, die die Entwicklung und Umsetzung von Open Source Software-Lösungen in US-Bundes-, Bundes- und Kommunalbehörden fördert. Die Bemühungen von OSSI konzentrierten sich auf die Annahme von Open-Source-Softwareprogrammen und -Politiken innerhalb der Bundes- und Verteidigungs- und Heimatschutzgemeinden. Open Source for America ist eine Gruppe, die in der US-Bundesregierung über die Vorteile von Open-Source-Software sensibilisiert wird. Ihre Ziele sind die Förderung der Nutzung von Open Source-Software, die Teilnahme an Open-Source-Software-Projekten und die Einbeziehung von Open-Source-Community-Dynamiken, um die Transparenz der Regierung zu erhöhen. Mil-OSS ist eine Gruppe, die sich der Weiterentwicklung von OSS-Nutzung und -Erschaffung im Militär widmet. Förderfirmen, deren Business-Center zur Entwicklung von Open-Source-Software mit einer Vielzahl von Geschäftsmodellen arbeiten, um die Herausforderung zu lösen, wie man Geld zur Verfügung stellt, die per Definition kostenlos lizenziert ist. Jede dieser Geschäftsstrategien beruht auf der Voraussetzung, dass Nutzer von Open-Source-Technologien bereit sind, zusätzliche Software-Funktionen unter proprietären Lizenzen zu erwerben, oder andere Dienstleistungen oder Elemente von Wert zu erwerben, die die Open-Source-Software ergänzen, die für das Unternehmen Kern ist. Dieser zusätzliche Wert kann, aber nicht beschränkt auf unternehmenseigene Merkmale und zeitgemäße Garantien (oft über eine Service-Level-Vereinbarung) sein, um geschäftliche oder Compliance-Anforderungen, Leistungs- und Effizienzgewinne durch in der Open Source-Version noch nicht verfügbare Funktionen, Rechtsschutz (z.B. Schadenersatz durch Urheberrecht oder Patentverletzung) oder professionelle Unterstützung/Ausbildung/Beratung, die für proprietäre Softwareanwendungen typisch sind, zu erfüllen. Vergleiche mit anderen Software-Lizenz-/Entwicklungsmodellen Geschlossene Quelle / proprietäre Software Die Debatte über Open Source gegen geschlossene Quelle (alternativ proprietäre Software genannt) wird manchmal beheizt. Die vier besten Gründe (wie von Open Source Business Conference Umfrage zur Verfügung gestellt) Einzelpersonen oder Organisationen wählen Open-Source-Software sind: niedrigere Kosten-Sicherheit kein Anbieter "einschalten" bessere Qualität Da innovative Unternehmen sich nicht mehr stark auf den Softwareverkauf verlassen, ist proprietäre Software weniger notwendig geworden. So werden Dinge wie Open-Source-Inhalte-Management-System – oder CMS – häufiger eingesetzt. 2009 wechselte das US White House sein CMS-System von einem proprietären System auf Drupal Open Source CMS. Darüber hinaus diskutieren Unternehmen wie Novell (die traditionell Software auf altmodische Weise verkauft haben) ständig über die Vorteile der Umstellung auf Open-Source-Verfügbarkeit, nachdem sie bereits einen Teil des Produktangebots auf Open-Source-Code geschaltet. Auf diese Weise bietet Open-Source-Software Lösungen für einzigartige oder spezifische Probleme. Als solche wird berichtet, dass 98% der Unternehmen auf Unternehmensebene Open-Source-Software-Angebote in einigen Kapazitäten verwenden. Mit dieser Marktverschiebung beginnen kritischere Systeme, sich auf Open-Source-Angebote zu verlassen, wodurch eine größere Finanzierung (wie US Department of Homeland Security Grants) ermöglicht wird, um "Hunt for Security Bugs" zu helfen. " Nach einer Pilotstudie von Organisationen, die (oder nicht annehmen) OSS, wurden in den Überzeugungen des Managers folgende Faktoren von statistischer Bedeutung beobachtet: a) Einstellungen gegenüber Ergebnissen, b) Einflüsse und Verhaltensweisen anderer und c) ihre Handlungsfähigkeit. Durch den Marktanteilswechsel haben proprietäre Quellvertreiber begonnen, sich zu entwickeln und zur Open-Source-Community beizutragen, so dass sie ihre Modelle neu erfinden müssen, um wettbewerbsfähig zu bleiben. Viele Befürworter argumentieren, dass Open-Source-Software inhärent sicherer ist, weil jede Person den Code anzeigen, bearbeiten und ändern kann. Eine Studie des Linux Quellcodes hat 0,17 Fehler pro 1000 Zeilen Code, während proprietäre Software in der Regel 20–30 Fehler pro 1000 Zeilen erzielt. Freie Software Laut dem Führer der Freien Software-Bewegung, Richard Stallman, ist der Hauptunterschied, dass man durch die Wahl eines Begriffs über den anderen (d.h. entweder "offene Quelle" oder "freie Software") andere über das wissen lässt, was man hat: "Open Source ist eine Entwicklungsmethodik; freie Software ist eine soziale Bewegung." Dennoch gibt es erhebliche Überschneidungen zwischen Open Source Software und freier Software. Die FSF sagte, dass der Begriff "offene Quelle" eine Mehrdeutigkeit von einer anderen Art fördert, so dass es die bloße Verfügbarkeit der Quelle mit der Freiheit, sie zu verwenden, zu modifizieren und zu verteilen. Auf der anderen Seite wurde der Begriff "freie Software" für die Mehrdeutigkeit des Wortes kostenlos als "verfügbar ohne Kosten" kritisiert, die als Entmutigung für die Unternehmensannahme gesehen wurde, und für die historische mehrdeutige Nutzung des Begriffs. Entwickler haben die alternativen Begriffe Freie und Open Source Software (FOSS,) oder Frei/Libre und Open Source Software (FLOSS) folglich verwendet, um Open-Source-Software zu beschreiben, die auch freie Software ist. Während die Definition von Open Source-Software sehr ähnlich ist wie die kostenlose Softwaredefinition von FSF, basierte sie auf den Debian Free Software Guidelines, geschrieben und angepasst vor allem von Bruce Perens mit Eingabe von Eric S. Raymond und anderen. Der Begriff "offene Quelle" war ursprünglich als markant gedacht; der Begriff wurde jedoch als zu beschreibend angesehen, so dass keine Marke existiert. Die OSI würde es vorziehen, dass Menschen Open Source behandeln, als wäre es ein Markenzeichen, und verwenden Sie es nur, um Software zu beschreiben, die unter einer OSI zugelassenen Lizenz lizenziert. OSI Certified ist ein Markenzeichen, das nur an Personen lizenziert ist, die Software unter einer Lizenz auf der Liste der Open Source Initiative lizenzieren. Open Source versus source-versus Obwohl die OSI-Definition von "Open-Source-Software" weithin akzeptiert wird, verwenden eine kleine Anzahl von Menschen und Organisationen den Begriff, sich auf Software zu beziehen, in der die Quelle für die Betrachtung zur Verfügung steht, aber die möglicherweise nicht legal geändert oder umverteilt werden kann. Solche Software wird häufiger als Quell-verfügbar oder als freigegebene Quelle bezeichnet, ein von Microsoft im Jahr 2001 geprägter Begriff. Während im Jahr 2007 zwei der Microsoft-Lizenzen der Shared Source-Initiative von der OSI zertifiziert wurden, sind die meisten Lizenzen des SSI-Programms immer noch quellenverfügbar. Open-sourcing Open-sourcing ist der Akt der Verbreitung der Open-Source-Bewegung, am häufigsten bezieht sich auf die Freigabe früher proprietärer Software unter einer Open-Source/freien Software-Lizenz, aber es kann auch auf die Programmierung Open Source Software oder die Installation von Open Source Software. Bemerkenswerte Software-Pakete, die zuvor proprietär, die Open Sourced gehören: Netscape Navigator, dessen Code wurde die Grundlage der Mozilla und Mozilla Firefox Web-Browser StarOffice, die die Basis des OpenOffice. org office suite und LibreOffice Global File System, war ursprünglich GPL'd, dann proprietär 2001,?() aber im Jahr 2004 wurde re-GPL'd. SAP DB, die MaxDB geworden ist und jetzt von MySQL AB InterBase Datenbank (und im Besitz) vertrieben wird, die im Jahr 2000 von Borland gegründet wurde und derzeit als Handelsprodukt und eine Open-Source-Fork (Firebird) existiert. Vor der Änderung der Lizenz von Software, Händler in der Regel prüfen den Quellcode für Drittanbieter-Lizenzcode, die sie zu entfernen oder zu erhalten Erlaubnis für seinen Relikt. Backdoors und andere Malware sollte auch entfernt werden, da sie leicht nach der Freigabe des Codes entdeckt werden können. Aktuelle Anwendungen und Adoption Weit verbreitete Open-Source-Software Open-Source-Software-Projekte werden von einem Netzwerk von Freiwilligen Programmierern gebaut und gepflegt und sind weit verbreitet in freien und kommerziellen Produkten. Hauptbeispiele für Open-Source-Produkte sind der Apache HTTP Server, die E-Commerce-Plattform osCommerce, Internet-Browser Mozilla Firefox und Chromium (das Projekt, wo die große Mehrheit der Entwicklung der Freeware Google Chrome getan wird) und die komplette Office-Suite LibreOffice. Eines der erfolgreichsten Open-Source-Produkte ist das GNU/Linux Betriebssystem, ein Open-Source Unix-ähnliches Betriebssystem und sein Derivat Android, ein Betriebssystem für mobile Geräte. In einigen Branchen ist Open-Source-Software die Norm. Erweiterungen für Nicht-Software-Nutzung Während der Begriff "Open Source" ursprünglich nur auf den Quellcode der Software angewendet wird, wird er nun auf viele andere Bereiche wie Open Source ecology angewendet, eine Bewegung, um Technologien zu dezentralisieren, so dass jeder Mensch sie verwenden kann. Es ist jedoch oft auf andere Bereiche, die unterschiedliche und konkurrierende Prinzipien haben, die sich nur teilweise überschneiden. Die gleichen Prinzipien, die Open-Source-Software zugrunde liegen, finden sich in vielen anderen Unternehmen wie Open-Source-Hardware, Wikipedia und Open-Access-Publishing. Zusammenfassend werden diese Prinzipien als Open Source, Open Content und offene Zusammenarbeit bezeichnet: "jedes System von Innovation oder Produktion, das auf zielorientierte, aber lose aufeinander abgestimmte Teilnehmer beruht, die interagieren, um ein Produkt (oder Service) von wirtschaftlichem Wert zu schaffen, das sie den Mitwirkenden und Nicht-Beitragern gleichermaßen zur Verfügung stellen. " Diese Kultur oder Ideologie ist der Ansicht, dass die Grundsätze allgemeiner gelten, um die gleichzeitige Eingabe verschiedener Tagesordnungen, Ansätze und Prioritäten zu erleichtern, im Gegensatz zu zentraleren Entwicklungsmodellen, wie sie in kommerziellen Unternehmen üblich sind. Siehe auch Referenzen Weiter lesen Androutsellis-Theotokis, Stephanos; Spinellis, Diomidis; Kechagia, Maria; Gousios, Georgios (2010). Open Source Software: Eine Umfrage von 10.000 Fuß (PDF). Stiftungen und Trends im Technologie-, Informations- und Betriebsmanagement.4.S.187–347.doi:10.1561/0200000026.ISBN 978-1-60198-484-5.Coleman, E. Gabriella. Coding Freedom: The Ethics and Aesthetics of Hacking (Princeton UP, 2012)Fadi P. Deek; James A. M. McHugh (2008). Open Source: Technologie und Politik. Cambridge: Cambridge University Press. ISBN 978-0-511-36775-5. Chris DiBona und Sam Ockman und Mark Stone, Ed. (1999). Open Sources: Stimmen aus der Open Source Revolution. O'Reilly. ISBN 978-1-56592-582-3.Joshua Gay, hd. (2002). Freie Software, Freie Gesellschaft: Ausgewählte Essays von Richard M. Stallman.Boston:GNU Presse, Free Software Foundation.ISBN 978-1-882114-98-6.Understanding FOSS | editor =Sampathkumar Coimbatore Indien Benkler, Yochai (2002,) "Coase's Penguin, or, Linux and The Nature of the Firm." Yale Law Journal 112.3 (Dez 2002): p367(78) (in Adobe pdf Format) v. Engelhardt, Sebastian (2008). " Die wirtschaftlichen Eigenschaften der Software", Jena Economic Research Papers, Band 2 (2008,) Nummer 2008-045 (PDF). Lerner, J. & Tirole, J. (2002:) „Einige einfache Wirtschaft auf Open Source", Journal of Industrial Economics 50(2,) p 197–234 Välimäki, Mikko (2005). Der Aufstieg der Open Source Lizenzierung: Eine Herausforderung für die Nutzung des geistigen Eigentums in der Softwareindustrie (PDF). Turre Publishing. Archiviert vom Original (PDF) am 4. März 2009. Polley, Barry (11. Dezember 2007). "Open Source Discussion Paper – Version 1.0" (PDF). Neuseeländisches Justizministerium. Archiviert vom Original (PDF) am 23. Februar 2018. Abgerufen am 12. Dezember 2007. Rossi, M. A. (2006): Entscheiden Sie das kostenlose/offene Software-Puzzle: Eine Übersicht über theoretische und empirische Beiträge in J. Bitzer P. Schröder, eds, 'The Economics of Open Source Software Development', p 15–55. Open Sources: Voices from the Open Source Revolution – ein Online-Buch mit Essays von prominenten Mitgliedern der Open-Source-Community Whence The Source: Untangling the Open Source/Free Software Debate, Essay über die Unterschiede zwischen freier Software und Open Source, by Thomas Scoville Berry, D M (2004). Die Contestation of Code: Eine vorläufige Untersuchung in den Diskurs der Freien Software und Open Software-Bewegung, kritische Diskursstudien, Band 1(1). Schrape, Jan-Felix (2017)."Open Source Projekte als Inkubatoren der Innovation. Von Niche Phenomenon bis Integral Teil der Software-Industrie" (PDF). Stuttgart: Forschungsbeiträge zur Organisationssoziologie und Innovationsforschung 2017-03. Nachhaltige Open Source, ein Confluence Artikel, der Leitlinien für eine faire Teilnahme am Open Source-Ökosystem, von Radovan Semancik Externe Links Die Open Source-Initiative definiert Open Source Free / Open Source Research Community – Viele Online-Forschungspapiere über Open Source Open-Source-Software bei CurlieOral-Administration ist ein Weg der Verwaltung, wo eine Substanz durch den Mund genommen wird. Per os abgekürzt zu P.O wird manchmal als Richtung für oral einzunehmende Medikamente verwendet. Viele Medikamente werden oral eingenommen, weil sie eine systemische Wirkung haben sollen, indem sie beispielsweise über den Blutstrom verschiedene Körperteile erreichen. Terminologie Per os (; P.O) ist ein adverbieller Satz, der wörtlich aus Latein "durch den Mund" oder "durch den Mund" bedeutet. Der Ausdruck wird in der Medizin verwendet, um eine Behandlung zu beschreiben, die oral eingenommen wird (aber nicht im Mund wie z.B. Kariesprophylaxe verwendet). Die Abkürzung P.O wird häufig auf medizinischen Rezepten verwendet. Scope Oral Administration umfasst: Buccal, gelöst innerhalb der Wange Sublabial, gelöst unter der Lippe Sublingual Administration (SL,) gelöst unter der Zunge, aber aufgrund der schnellen Absorption viele betrachten SL eine parenterale routeEnteral Medikamente kommen in verschiedenen Formen, einschließlich oraler fester Dosierung (OSD) Formen: Tabletten zum Schlucken, Kauen oder Lösen in Wasser oder unter der Zunge Kapseln und kaubare Kapseln (mit einer Beschichtung, die sich im Magen oder Darm löst, um das Medikament dort freizusetzen) Time-Release oder Sustained-Release-Tabletten und Kapseln (die das Medikament nach und nach freisetzen)Pulver oder Granulat und orale flüssige Darreichungsformen: Tee Tropfen Flüssige Medikamente oder Sirupe Erleichterung Methoden Mit der Mitnahme von Wasser erleichtert Schlucken Tabletten und Kapseln. Wenn die Substanz uneinnehmbaren Geschmack hat, kann die Zugabe eines Geschmacks die Aufnahme erleichtern. Den Zähnen schädliche Substanzen werden vorzugsweise durch ein Stroh gegeben. Liste der Abkürzungen, die in medizinischen Rezepten verwendet werden Liste der lateinischen Phrasen Medizinische Rezepte Dünnschicht-Drogenlieferung == Referenzen ==