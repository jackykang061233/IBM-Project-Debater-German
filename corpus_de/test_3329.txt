Ein Programmiertool oder Software-Entwicklungstool ist ein Computerprogramm, mit dem Software-Entwickler andere Programme und Anwendungen erstellen, debug, pflegen oder anderweitig unterstützen. Der Begriff bezieht sich in der Regel auf relativ einfache Programme, die zusammen kombiniert werden können, um eine Aufgabe zu erfüllen, viel, wie man mehrere Hände verwenden könnte, um ein physisches Objekt zu fixieren. Die grundlegendsten Tools sind ein Quellcode-Editor und ein Compiler oder Dolmetscher, die ubiquitously und kontinuierlich verwendet werden. Andere Werkzeuge werden je nach Sprache, Entwicklungsmethodik und individuellem Ingenieur, oft für eine diskrete Aufgabe verwendet, wie ein Debugger oder Profiler. Werkzeuge können diskrete Programme sein, die separat – oft von der Befehlszeile – ausgeführt werden oder Teil eines einzigen großen Programms sein, genannt eine integrierte Entwicklungsumgebung (IDE). In vielen Fällen, insbesondere für eine einfachere Verwendung, werden anstelle eines Tools einfache Ad-hoc-Techniken verwendet, wie z.B. Druck-Debugging anstelle eines Debuggers, manuelles Timing (allgemeines Programms oder Code-Abschnitts) anstelle eines Profilers oder Verfolgung von Fehlern in einer Textdatei oder Tabellenkalkulation anstelle eines Bug-Tracking-Systems. Die Unterscheidung zwischen Werkzeugen und Anwendungen ist murky. Beispielsweise verwenden Entwickler einfache Datenbanken (wie eine Datei, die eine Liste wichtiger Werte enthält) die ganze Zeit als Werkzeuge. Eine vollblown Datenbank wird jedoch in der Regel als Anwendung oder Software in ihrem eigenen Recht gedacht. Für viele Jahre wurden computergestützte Software-Engineering-Tools (CASE) gesucht. Erfolgreiche Werkzeuge haben sich als leichtsinnig erwiesen. In einem Sinne betonten CASE-Tools Design und Architekturunterstützung, wie für UML. Aber die erfolgreichsten dieser Werkzeuge sind IDEs. Verwendungen von Programmierwerkzeugen Übersetzen von Mensch zu Computersprache Moderne Computer sind sehr komplex und um sie produktiv zu programmieren, werden verschiedene Abstraktionen benötigt. So schreibt ein Programmierer ein Programm in einer Programmiersprache wie C, Java oder Python. Programmierwerkzeuge wie Assembler, Compiler und Linker übersetzen ein Programm aus einer schreib- und lesbaren Quellsprache in die Bits und Bytes, die von einem Computer ausgeführt werden können. Interpreter interpretieren das Programm auf der Fliege, um das gewünschte Verhalten zu erzeugen. Diese Programme führen viele gut definierte und repetitive Aufgaben durch, die dennoch zeitraubend und fehleranfällig wären, wenn sie von einem Menschen ausgeführt werden, wie die Erstellung von Teilen eines Programms im Speicher und die Fixierung der Referenzen zwischen Teilen eines Programms als Linker. Die Optimierung von Compilern auf der anderen Seite kann komplexe Transformationen auf dem Quellcode ausführen, um die Ausführungsgeschwindigkeit oder andere Eigenschaften eines Programms zu verbessern. Dies ermöglicht es einem Programmierer, sich mehr auf höhere Ebene, konzeptionelle Aspekte eines Programms zu konzentrieren, ohne sich über die Details der Maschine, auf die es läuft. Programminformationen für Menschen verfügbar machen Aufgrund der hohen Komplexität der Software ist es nicht möglich, die meisten Programme auf einen Blick auch für den erfahrensten Software-Entwickler zu verstehen. Die von hochrangigen Programmiersprachen bereitgestellten Abstraktionen machen es auch schwieriger, die Verbindung zwischen dem von einem Programmierer geschriebenen Quellcode und dem eigentlichen Programmverhalten zu verstehen. Um Fehler in Programmen zu finden und neue Fehler bei der Erweiterung eines Programms zu verhindern, verwendet ein Software-Entwickler einige Programmierwerkzeuge, um alle Arten von Informationen über Programme zu visualisieren. Ein Debugger ermöglicht es einem Programmierer beispielsweise, Informationen über ein laufendes Programm in Bezug auf die Quellsprache zu extrahieren, die zur Programmierung verwendet wird. Der Debugger kann aus dem Zustand der Betonmaschine den Wert einer Größe im Quellprogramm anhand von vom Compiler gespeicherten Informationen berechnen. Speicherdebugger können direkt auf fragwürdige oder ausstehende falsche Speicherzugriffe von laufenden Programmen hinweisen, die ansonsten unentdeckt bleiben und eine gemeinsame Quelle von Programmausfällen sind. Liste der Tools Software-Tools kommen in vielen Formen: Werkzeuge zur binären Kompatibilitätsanalyse Fehlerdatenbanken: Vergleich der Problemverfolgungssysteme – Einschließlich Bugverfolgungssysteme Werkzeugbau: Erstellen Sie Automatisierung, Liste der Build Automation Software Call graph Code Abdeckung: Code-Abdeckung#Software-Code-Abdeckungstools. Code-Review: Liste der Tools zur Code-Review Code-Sharing-Seiten: Freshmeat, Krugle, Sourceforge, GitHub. Siehe auch Code Suchmaschinen. Erstellung und Verknüpfung von Tools: GNU toolchain, gcc, Microsoft Visual Studio, CodeWarrior, Xcode, ICC Debugger: Debugger#List von Debuggern. Siehe auch Debugging. Demontagen: In der Regel Reverse-Engineering-Tools. Dokumentationsgeneratoren: Vergleich von Dokumentationsgeneratoren, Help2man, Plain Alte Dokumentation, asciidoc Formale Methoden: Mathematische Techniken für Spezifikation, Entwicklung und Verifikation GUI Schnittstellengeneratoren Bibliotheksschnittstellengeneratoren: SWIG Integration Tools Memory Debugger werden häufig in Programmiersprachen (wie C und C)+ verwendet, die eine manuelle Speicherverwaltung und damit die Möglichkeit von Speicherlecks und anderen Problemen ermöglichen. Sie sind auch nützlich, um die Effizienz der Speichernutzung zu optimieren. Beispiele: dmalloc, Electric Fence, Insure,+ Valgrind Parser Generatoren: Parsing#Parser Entwicklungssoftware Performance Analyse oder Profiling: Liste der Tools zur Leistungsanalyse Revisionskontrolle: Liste der Revisionssteuerungssoftware, Vergleich der Revisionssteuerungssoftware Scripting languages: PHP, Awk, Perl, Python, REXX, Ruby, Shell, Tcl Suche: grep, find Source code Clones/Duplications Finding: Duplicate code#Tools Quellcode Editor Textredakteure: Liste der Texteditoren, Vergleich von Texteditoren Quellcode-Formatierung: indent, hübsche Drucker, Beautifier, Minifier Tools zur Quellcode-Generierung: Automatische Programmierung#Implementierungen Statische Codeanalyse: lint, Liste der Tools für statische Codeanalyse Unit-Tests: Liste der Einzeltest-Frameworks IDEs Integrierte Entwicklungsumgebungen kombinieren die Merkmale vieler Werkzeuge in ein Paket. Sie erleichtern beispielsweise die Durchführung spezifischer Aufgaben, wie die Suche nach Inhalten nur in Dateien in einem bestimmten Projekt. IDEs können beispielsweise zur Entwicklung von Anwendungen auf Unternehmensebene verwendet werden. Bei diesem Vergleich integrierter Entwicklungsumgebungen finden sich verschiedene Aspekte von IDEs für spezifische Programmiersprachen. Siehe auch computergestützte Software-Engineering-Tools Computer Science Configuration System Scripting language Software Development Kit Software Engineering und Liste von Software-Engineering-Themen Softwaresysteme Toolkits for User Innovation References Externe Links Medien im Zusammenhang mit Programmier-Tools bei Wikimedia Commons