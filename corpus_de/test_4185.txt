In der Informatik ist evolutionäre Berechnung eine Familie von Algorithmen für die globale Optimierung, die von der biologischen Evolution inspiriert ist, und das Unterfeld der künstlichen Intelligenz und der Soft Computing, die diese Algorithmen studieren. Technisch gesehen sind sie eine Familie von bevölkerungsbasierten Test- und Fehlerproblemlösern mit einem metaheuristischen oder stochastischen Optimierungscharakter. In der evolutionären Berechnung wird eine erste Reihe von Kandidatenlösungen generiert und iterativ aktualisiert. Jede neue Generation wird durch stochastische Entfernung weniger gewünschte Lösungen und Einführung kleiner zufälliger Veränderungen hergestellt. In der biologischen Terminologie wird eine Population von Lösungen einer natürlichen Selektion (oder künstlichen Selektion) und Mutation unterzogen. Dadurch wird sich die Bevölkerung allmählich weiterentwickeln, um die Fitness zu erhöhen, in diesem Fall die gewählte Fitnessfunktion des Algorithmus. Evolutionäre Berechnungstechniken können hoch optimierte Lösungen in einer Vielzahl von Problemeinstellungen produzieren, so dass sie in der Informatik beliebt. Es gibt viele Varianten und Erweiterungen, die für spezifischere Familien von Problemen und Datenstrukturen geeignet sind. Die evolutionäre Berechnung wird auch manchmal in der Evolutionsbiologie als in silico experimentellen Verfahren verwendet, um gemeinsame Aspekte der allgemeinen evolutionären Prozesse zu untersuchen. Geschichte Die Anwendung evolutionärer Prinzipien zur automatisierten Problemlösung entstand in den 1950er Jahren. Erst in den 1960er Jahren begannen drei unterschiedliche Interpretationen dieser Idee an drei verschiedenen Orten zu entwickeln. Evolutionäre Programmierung wurde von Lawrence J. Fogel in den USA eingeführt, während John Henry Holland seine Methode als genetischer Algorithmus nannte. In Deutschland haben Ingo Rechenberg und Hans-Paul Schwefel Evolutionsstrategien eingeführt. Diese Gebiete entwickelten sich für etwa 15 Jahre getrennt. Von den frühen neunziger Jahren sind sie als verschiedene Vertreter (Dialects) einer Technologie, genannt evolutionäre Computing. Auch in den frühen neunziger Jahren war ein vierter Strom nach den allgemeinen Ideen entstanden – genetische Programmierung. Seit den 1990er Jahren werden naturinspirierte Algorithmen zu einem zunehmend bedeutenden Teil der evolutionären Berechnung. Diese Terminologien bezeichnen das Feld der evolutionären Berechnung und betrachten evolutionäre Programmierung, Evolutionsstrategien, genetische Algorithmen und genetische Programmierung als Teilbereiche. Die frühesten rechnerischen Simulationen der Evolution mit evolutionären Algorithmen und künstlichen Lebenstechniken wurden 1953 von Nils Aall Barricelli durchgeführt, wobei erste Ergebnisse 1954 veröffentlicht wurden. Ein weiterer Pionier in den 1950er Jahren war Alex Fraser, der eine Reihe von Beiträgen zur Simulation der künstlichen Auswahl veröffentlichte. Künstliche Evolution wurde durch die Arbeit von Ingo Rechenberg in den 1960er und frühen 1970er Jahren zu einer weithin anerkannten Optimierungsmethode, die Entwicklungsstrategien zur Lösung komplexer technischer Probleme nutzte. Genetische Algorithmen wurden insbesondere durch das Schreiben von John Holland populär. Als akademisches Interesse wuchs, ermöglichten dramatische Erhöhung der Leistung von Computern praktische Anwendungen, einschließlich der automatischen Entwicklung von Computerprogrammen. Evolutionäre Algorithmen werden nun verwendet, um mehrdimensionale Probleme effizienter zu lösen als Software von menschlichen Designern produziert, und auch das Design von Systemen zu optimieren. Techniken Evolutionäre Rechentechniken beinhalten meist metaheuristische Optimierungsalgorithmen. Im weitesten Sinne umfasst das Feld: Agentenbasierte Modellierung Ant Kolonie-Optimierung Künstliche Immunsysteme Künstliche Lebensdauer (siehe auch digitalen Organismus)Kulturalgorithmen Differenzielle Evolution Dual-Phase Evolution Schätzung der Verteilungsalgorithmen Evolutionäre Algorithmen Evolutionäre Programmierung Evolutionsstrategie Genetische Expressions-Programmierung Generischer Algorithmus Genetische Programmierung Grammatische Evolution Lernbares Evolutionsmodell Lern-Klassifikatorsysteme Memetische Algorithmen Neuroevolution Partikelschwarmoptimierung Selbstorganisation wie selbstorganisierende Karten, wettbewerbsfähiges Lernen Swarm Intelligence Evolutionäre Algorithmen Evolutionäre Algorithmen bilden eine Teilmenge evolutionärer Berechnung, indem sie in der Regel nur Techniken zur Umsetzung von Mechanismen beinhalten, die durch biologische Evolution wie Reproduktion, Mutation, Rekombination, natürliche Selektion und Überleben des Fittests inspiriert sind. Kandidatenlösungen für das Optimierungsproblem spielen die Rolle von Individuen in einer Bevölkerung, und die Kostenfunktion bestimmt die Umgebung, in der die Lösungen leben (siehe auch Fitness-Funktion). Die Evolution der Bevölkerung erfolgt dann nach der wiederholten Anwendung der oben genannten Betreiber.Dabei gibt es zwei Hauptkräfte, die die Basis evolutionärer Systeme bilden: Rekombination Mutation und Crossover schaffen die notwendige Vielfalt und erleichtern dadurch Neuheit, während die Auswahl als kraftsteigernde Qualität wirkt. Viele Aspekte eines solchen evolutionären Prozesses sind stochastisch. Geänderte Informationen durch Rekombination und Mutation werden zufällig ausgewählt. Andererseits können Auswahlbetreiber entweder deterministisch oder stochastisch sein. Im letzteren Fall haben Personen mit einer höheren Fitness eine höhere Chance zu wählen als Personen mit einer geringeren Fitness, aber in der Regel sogar die schwachen Personen haben eine Chance, ein Elternteil zu werden oder zu überleben. Evolutionäre Algorithmen und Biologie Genetische Algorithmen liefern Methoden, um biologische Systeme und Systeme Biologie zu modellieren, die mit der Theorie der dynamischen Systeme verbunden sind, da sie verwendet werden, um die zukünftigen Zustände des Systems vorherzusagen. Dies ist nur eine lebendige (aber vielleicht irreführende) Weise, die Aufmerksamkeit auf den geordneten, gut kontrollierten und hoch strukturierten Charakter der Entwicklung in der Biologie zu lenken. Die Verwendung von Algorithmen und Informatikern, insbesondere der Rechentheorie, über die Analogie zu dynamischen Systemen hinaus, ist jedoch auch relevant, um die Evolution selbst zu verstehen. Diese Ansicht hat den Vorteil zu erkennen, dass es keine zentrale Kontrolle der Entwicklung gibt; Organismen entwickeln sich durch lokale Wechselwirkungen innerhalb und zwischen Zellen. Die vielversprechendsten Ideen über Programmentwicklungsparallele scheinen uns zu sein, die auf eine scheinbar enge Analogie zwischen Prozessen innerhalb von Zellen und den Low-Level-Betrieb moderner Computer hinweisen. So sind biologische Systeme wie Rechenmaschinen, die Eingabeinformationen verarbeiten, um nächste Zustände zu berechnen, so dass biologische Systeme näher an einer Berechnung als klassisches dynamisches System sind. Darüber hinaus sind Mikroprozesse in biologischen Organismen nach Konzepten aus der rechnerischen Theorie grundsätzlich unvollständig und unvorhersehbar (Komplettheit (Logik), was bedeutet, dass "mehr als eine rohe Metapher hinter der Analogie zwischen Zellen und Computern ist. Die Analogie zur Berechnung erstreckt sich auch auf die Beziehung zwischen Erbsystemen und biologischer Struktur, die oft gedacht ist, eine der drängendsten Probleme bei der Erklärung der Herkunft des Lebens zu offenbaren. Evolutionäre Automaten, eine Verallgemeinerung von Evolutionary Turing Maschinen, wurden eingeführt, um genauere Eigenschaften der biologischen und evolutionären Berechnung zu untersuchen. Insbesondere erlauben sie, neue Ergebnisse über die Ausdruckskraft der evolutionären Berechnung zu erhalten. Dies bestätigt das erste Ergebnis über die Ungenauigkeit natürlicher Evolutions- und Evolutionsalgorithmen und -prozesse. Evolutionäre endliche automata, die einfachste Unterklasse von Evolutionary automata arbeiten im Terminal-Modus kann beliebige Sprachen über ein bestimmtes Alphabet akzeptieren, einschließlich nicht-rekursiv numerierbar (z.B. Diagonalisierungssprache) und rekursiv numerierbar, aber nicht rekursive Sprachen (z.B. Sprache der universellen Turing-Maschine). Notwendige Praktizierende Die Liste der aktiven Forscher ist natürlich dynamisch und nicht erschöpfend. 2007 wurde eine Netzwerkanalyse der Community veröffentlicht. Kalyanmoy Deb Kenneth A De Jong Peter J. Fleming David B. Fogel Stephanie Forrest David E. Goldberg John Henry Holland Theo Jansen John Koza Zbigniew Michalewicz Melanien Mitchell Peter Nordin Riccardo Poli Ingo Rechenberg Hans-Paul Schwefel Konferenzen Zu den Hauptkonferenzen im evolutionären Rechenbereich gehören ACM Genetic and Evolutionary Computation Conference (GECCO,) IEEE Congress on Evolutionary Computation (CEC,) EvoStar, der vier Konferenzen umfasst: EuroGP, EvoApplications, EvoCOP und EvoMUSART, Parallel Problem Solving from Nature (PPSN.) Siehe auch Externe Links Artikel in der Stanford Encyclopedia of Philosophy über Biological Information (Englisch) Bibliographie Th.Bäck, D.B Fogel, und Z. Michalewicz (Editors,) Handbuch der Evolutionary Computation, 1997, ISBN 0750303921 Th.Bäck und H.-P Schwefel. Eine Übersicht über evolutionäre Algorithmen zur Parameteroptimierung. Evolutionary Computation, 1(1):1–23, 1993.W Banzhaf, P. Nordin, R.E Keller und F.D Francone. Genetische Programmierung — Eine Einführung. Morgan Kaufmann, 1998.S Cagnoni, et al., Real-World Applications of Evolutionary Computing, Springer-Verlag Lecture Notes in Informatik, Berlin, 2000.R Chiong, Th.Weise, Z. Michalewicz (Editors,) Varianten evolutionärer Algorithmen für real-World Applications, Springer, 2012, ISBN 3642234232 K. A. De Jong, Evolutionäre Berechnung: ein einheitlicher Ansatz.MITTEL Presse, Cambridge MA, 2006 A. E. Eiben und J.E Smith, Von Evolutionsrechnung bis zur Evolution der Dinge, Natur, 521:476-482, doi:10.1038/nature14544, 2015 A. E. Eiben und J.E Smith, Einführung in Evolutionary Computing, Springer, Erstausgabe, 2003; Zweite Ausgabe, 2015 D.B. Fogel. Evolutionary Computation. Eine neue Philosophie von Machine Intelligence.IEEE Presse, Piscataway, NJ, 1995.L J. Fogel, A. J. Owens und M. J. Walsh. Künstliche Intelligenz durch Simulierte Evolution. New York: John Wiley, 1966.D E. Goldberg. Genetische Algorithmen in der Suche, Optimierung und maschinelles Lernen. Addison Wesley, 1989.J H. Holland. Anpassung an natürliche und künstliche Systeme. University of Michigan Press, Ann Arbor, 1975.P Hingston, L. Barone, and Z. Michalewicz (Editors,) Design by Evolution, Natural Computing Series, 2008, Springer, ISBN 3540741097 J. R. Koza.Genetic Programmierung: Auf der Programmierung von Computern mittels Natural Evolution. MIT Press, Massachusetts, 1992.F.J Lobo, C.F Lima, Z. Michalewicz (Editors,) Parametereinstellung in Evolutionary Algorithms, Springer, 2010, ISBN 3642088929 Z. Michalewicz, Genetic Algorithms + Data Structures – Evolution Programme, 1996, Springer, ISBN 3540606769 Z. Michalewicz und D.B H.-P Schwefel. Numerische Optimierung von Computermodellen. John Wiley & Sons, New-York, 1981.1995 – 2. Auflage. D Simon. Evolutionäre Optimierung Algorithms.Wiley, 2013.M Sipper, W. Fu, K. Ahuja und J. H. Moore (2018)."Untersuchung des Parameterraums evolutionärer Algorithmen". BioData Mining.11: 2. doi:10.1186/s13040-018-0164-x PMC 5816380. PMID 29467825.CS1 maint: verwendet Autorenparameter (link) Y. Zhang und S. Li.(2017). "PSA: Ein neuartiger Optimierungsalgorithmus basierend auf Überlebensregeln von Porcellio scaber".arXiv:1709.09840 [cs.NE].CS1 maint: verwendet Autorenparameter (Link) == Referenzen ==