Ein Computerprogramm ist eine Sammlung von Anweisungen, die von einem Computer ausgeführt werden können, um eine bestimmte Aufgabe auszuführen. Ein Computerprogramm wird üblicherweise von einem Computerprogrammierer in einer Programmiersprache geschrieben. Aus dem Programm in seiner human lesbaren Form des Quellcodes kann ein Compiler oder Assembler den Maschinencode ableiten – eine Form aus Anweisungen, die der Computer direkt ausführen kann. Alternativ kann ein Computerprogramm mit Hilfe eines Dolmetschers ausgeführt werden. Eine Sammlung von Computerprogrammen, Bibliotheken und verwandten Daten wird als Software bezeichnet. Computerprogramme können entlang funktionaler Linien, wie Anwendungssoftware und Systemsoftware, kategorisiert werden. Das zugrunde liegende Verfahren für eine Berechnung oder Manipulation wird als Algorithmus bezeichnet. Die Art und Weise, wie Daten organisiert werden, wird auf Datenstrukturen bezogen. Geschichte Code-brechende Algorithmen haben seit Jahrhunderten existiert. Im 9. Jahrhundert beschrieb der arabische Mathematiker Al-Kindi einen kryptographischen Algorithmus zur Entschlüsselung verschlüsselten Codes, in A Manuscript On Deciphering Cryptographic Messages. Er gab die erste Beschreibung der Kryptanalyse durch Frequenzanalyse, den frühesten Code-brechenden Algorithmus. Frühprogrammierbare Maschinen Die frühesten programmierbaren Maschinen vor der Erfindung des digitalen Computers. Bereits im 9. Jahrhundert wurde ein programmierbarer Musiksequenzer von den persischen Banu Musa Brüdern erfunden, die einen automatisierten mechanischen Flötenspieler im Buch der genialen Geräte beschrieben. Im Jahr 1206 erfand der arabische Ingenieur Al-Jazari eine programmierbare Trommelmaschine, in der musikalische mechanische automata gemacht werden konnte, um verschiedene Rhythmen und Trommelmuster zu spielen. Im Jahre 1801 entwarf Joseph-Marie Jacquard eine Webmaschine, die ein Muster durch eine Reihe von perforierten Karten verwebte. Muster könnten gewebt und wiederholt werden, indem man die Karten arrangiert. Analytical EngineIm Jahre 1837 wurde Charles Babbage von Jacquards Weber inspiriert, um die Analytical Engine zu bauen. Die Namen der Komponenten der Recheneinrichtung wurden aus der Textilindustrie ausgeliehen. In der Textilindustrie wurde Garn aus dem zu vermahlenden Lager gebracht. Das Gerät hätte einen Speicher gehabt" - Speicher, um 1000 Zahlen von je 40 Dezimalstellen zu halten. Zahlen aus dem Speicher hätten dann zur Verarbeitung in die Mühle (analog zur CPU einer modernen Maschine) überführt worden. Ein Faden ist die Ausführung von programmierten Anweisungen durch das Gerät. Es wurde mit zwei Sätzen von perforierten Karten programmiert – eine, um die Operation und die andere für die Eingangsgrößen zu leiten. Doch nach mehr als 17.000 Pfund des Geldes der britischen Regierung arbeiteten die Tausende von gezackten Rädern und Getrieben nie vollständig zusammen. Während einer neunmonatigen Periode in 1842–43 übersetzte Ada Lovelace das Memoir des italienischen Mathematikers Luigi Menabrea. Das Memoir umfasste die Analytische Maschine. Die Übersetzung enthielt Note G, die eine Methode zur Berechnung von Bernoulli-Nummern mit der Analytischen Maschine vollständig detailliert. Diese Notiz wird von einigen Historikern als das weltweit erste schriftliche Computerprogramm erkannt. Universal Turing Maschine Im Jahr 1936 führte Alan Turing die Universal Turing-Maschine ein – ein theoretisches Gerät, das jede Berechnung modellieren kann, die auf einer Turing kompletten Rechenmaschine durchgeführt werden kann. Es ist eine endliche Maschine, die ein unendlich langes Lese-/Schreibband hat. Die Maschine kann das Band hin und her bewegen, seine Inhalte ändern, wie es einen Algorithmus durchführt. Die Maschine beginnt im Ausgangszustand, geht durch eine Abfolge von Schritten, und stoppt, wenn sie auf den Stoppzustand trifft. Diese Maschine wird von einigen als Ursprung des von John von Neumann (1946) verwendeten Speicherprogrammrechners für das "Electronic Computing Instrument" betrachtet, das nun den von Neumann Architekturnamen trägt. Frühprogrammierbare Computer Der von Konrad Zuse (1941) in Deutschland erfundene Z3-Computer war ein digitaler und programmierbarer Computer. Ein digitaler Computer verwendet als Berechnungskomponente Strom. Das Z3 enthielt 2.400 Relais, um die Schaltungen zu erstellen. Die Schaltungen lieferten einen binären, schwimmenden, neun-instruktion Computer. Die Programmierung des Z3 erfolgte durch eine speziell gestaltete Tastatur und Stanzband. Der Electronic Numerical Integrator And Computer (Fall 1945) war ein Turing kompletter, universeller Computer, der 17,468 Vakuumröhren verwendet, um die Schaltungen zu erstellen. An seinem Kern war es eine Reihe von Pascalines miteinander verdrahtet. Seine 40 Einheiten wiegten 30 Tonnen, belegten 1.800 Quadratmeter (167 m2,) und verbrauchten $650 pro Stunde (in 1940er Währung) in Strom, wenn Leerlauf. Es hatte 20 Base-10 Akkus. Die Programmierung des ENIAC dauerte bis zu zwei Monate. Drei Funktionstische waren auf Rädern und mussten an festen Funktionsplatten gerollt werden. Funktionstische wurden mit Funktionsplatten mit schweren schwarzen Kabeln verbunden. Jede Funktionstabelle hatte 728 Drehknöpfe. Die Programmierung des ENIAC beinhaltete auch die Einstellung einiger der 3.000 Schalter. Das Debugging eines Programms dauerte eine Woche. Die Programmierer des ENIAC waren Frauen, die gemeinsam als "ENIAC-Mädchen" bekannt waren und Jean Jennings Bartik, Betty Holberton, Marlyn Wescoff, Kathleen McNulty, Ruth Teitelbaum und Frances Spence umfassten. Die ENIAC verfügte über parallele Operationen. Verschiedene Akkumulatoren können gleichzeitig an verschiedenen Algorithmen arbeiten. Es verwendet gestanzte Kartenmaschinen zum Ein- und Ausgang, und es wurde mit einem Taktsignal gesteuert. Es lief acht Jahre, die Berechnung der Wasserstoffbombenparameter, die Vorhersage von Wettermustern und die Erstellung von Feuertabellen, um Artilleriewaffen zu zielen. Das Manchester Baby (Juni 1948) war ein Speicherprogramm-Computer. Die Programmierung ging von bewegten Kabeln und Einstellwählern weg; stattdessen wurde ein Computerprogramm als Zahlen im Speicher gespeichert. Es waren nur drei Bit Speicher zur Verfügung, um jeden Befehl zu speichern, so dass es auf acht Anweisungen beschränkt war. Zur Programmierung standen 32 Schalter zur Verfügung. Andere Computer Computer, die bis in die 1970er Jahre hergestellt wurden, hatten Frontpanelschalter für die Programmierung. Das Computerprogramm wurde zur Referenz auf Papier geschrieben. Eine Anweisung wurde durch eine Konfiguration von Ein-/Aus-Einstellungen dargestellt. Nach der Einstellung der Konfiguration wurde eine Ausführungstaste gedrückt. Dieser Vorgang wurde dann wiederholt. Computerprogramme wurden auch manuell über Papierband oder Stanzkarten eingegeben. Nach dem Beladen des Mediums wurde die Startadresse über Schalter eingestellt und die Ausführungstaste gedrückt. 1961 wurden die Burroughs B5000 speziell in der ALGOL 60 Sprache programmiert. Die Hardware verfügte über Schaltungen, um die kompilierte Phase zu erleichtern. 1964 war das IBM System/360 eine Zeile von sechs Computern, die jeweils die gleiche Instruktionssetarchitektur hatten. Das Modell 30 war der kleinste und teuerste. Kunden könnten die gleiche Anwendungssoftware aktualisieren und behalten. Jedes System/360 Modell verfügte über Multiprogrammierung. Mit der Unterstützung des Betriebssystems könnten mehrere Programme auf einmal im Speicher sein. Als man auf Input/Output wartete, konnte ein anderer berechnen. Jedes Modell könnte auch andere Computer emulieren. Kunden könnten auf das System/360 upgraden und ihre IBM 7094 oder IBM 1401 Software behalten. Computerprogrammierung Computerprogrammierung ist der Prozess des Schreibens oder Bearbeitens von Quellcode. Das Editieren von Quellcode beinhaltet das Testen, Analysieren, Raffinieren und manchmal die Koordination mit anderen Programmierern auf einem gemeinsam entwickelten Programm. Eine Person, die diese Fähigkeiten praktiziert, wird als Computerprogrammierer, Software-Entwickler und manchmal Codeer bezeichnet. Der manchmal längere Prozess der Computerprogrammierung wird in der Regel als Softwareentwicklung bezeichnet. Der Begriff Software-Engineering wird immer beliebt, da der Prozess als Engineering-Disziplin gesehen wird. Programmiersprachen Computerprogramme können durch die Programmiersprache Paradigma, die verwendet wird, um sie zu produzieren, kategorisiert werden. Zwei der wichtigsten Paradigmen sind zwingend und deklarativ. Imperative Programmiersprachen geben einen sequentiellen Algorithmus anhand von Erklärungen, Ausdrücken und Aussagen an: Eine Erklärung koppelt einen variablen Namen an einen Datentyp – zum Beispiel: var x: ganze Zahl; Ein Ausdruck liefert einen Wert – zum Beispiel: 2 + 2 Ausbeuten ANHANG Eine Aussage kann einer Variablen einen Ausdruck zuordnen oder den Wert einer Variablen verwenden, um den Steuerungsfluss des Programms zu ändern – zum Beispiel: x := 2 + 2; wenn x = 4 dann do_something();Eine Kritik an Imperativsprachen ist der Nebeneffekt einer Zuordnungserklärung auf einer Klasse von Variablen, die nicht-lokale Variablen genannt werden. Declarative Sprachen Declarative Programmiersprachen beschreiben, welche Berechnung durchgeführt werden soll und nicht, wie man sie berechnet. Declarative Programme verzichten auf den Kontrollfluss und gelten als Anweisungen. Zwei breite Kategorien von deklarativen Sprachen sind funktionale Sprachen und logische Sprachen. Das Prinzip hinter funktionellen Sprachen (wie Haskell) ist es, keine Nebenwirkungen zuzulassen, was es einfacher macht, über Programme wie mathematische Funktionen zu verstehen. Das Prinzip hinter logischen Sprachen (wie Prolog) besteht darin, das zu lösende Problem – das Ziel – zu definieren und die detaillierte Lösung dem Prolog-System selbst zu überlassen. Das Ziel wird durch die Bereitstellung einer Liste von Subgoals definiert. Dann wird jedes Subgoal durch weitere Bereitstellung einer Liste seiner Subgoals, etc. definiert. Wenn ein Pfad der Subgoals eine Lösung nicht findet, dann wird das Subgoal zurückverfolgt und ein anderer Weg wird systematisch versucht. Compilation and Interpretation Ein Computerprogramm in Form einer human lesbaren, computerprogrammierenden Sprache wird Quellcode genannt. Der Quellcode kann durch einen Compiler oder Assembler in ein ausführbares Bild umgewandelt oder sofort mit Hilfe eines Dolmetschers ausgeführt werden. Compiler werden verwendet, um Quellcode aus einer Programmiersprache in Objektcode oder Maschinencode zu übersetzen. Objektcode benötigt weitere Verarbeitung, um Maschinencode zu werden, und Maschinencode besteht aus den nativen Anweisungen der zentralen Verarbeitungseinheit, bereit für die Ausführung. Compiled Computer Programme werden häufig als ausführbare, binäre Bilder oder einfach als Binaries bezeichnet – ein Verweis auf das binäre Dateiformat, das zur Speicherung des ausführbaren Codes verwendet wird. Einige kompilierte und zusammengesetzte Objektprogramme müssen als Module mit einem Linker-Dienstprogramm kombiniert werden, um ein ausführbares Programm zu erstellen. Interpreter werden verwendet, um Quellcode aus einer Programmiersprache-Line-by-line auszuführen. Der Dolmetscher dekodiert jede Aussage und führt sein Verhalten aus. Ein Vorteil von Dolmetschern ist, dass sie leicht auf eine interaktive Sitzung erweitert werden können. Der Programmierer wird mit einer Aufforderung präsentiert und einzelne Codezeilen werden sofort eingegeben und ausgeführt. Der Hauptnachteil der Dolmetscher ist, dass Computerprogramme langsamer laufen als bei der Erstellung. Der Interpreting-Code ist langsamer, weil der Dolmetscher jede Aussage dekodieren und dann ausführen muss. Allerdings kann die Softwareentwicklung mit einem Dolmetscher schneller sein, da die Prüfung sofort erfolgt, wenn der Kompilierungsschritt entfällt. Ein weiterer Nachteil von Dolmetschern ist ein Dolmetscher auf dem ausführenden Rechner vorhanden sein. Im Gegensatz dazu benötigen kompilierte Computerprogramme keinen Compiler, der während der Ausführung vorhanden ist. Nur rechtzeitig kompilieren Sie Computerprogramme vor der Ausführung. Zum Beispiel enthält der Java Virtual Machine Hotspot einen Just In Time Compiler, der selektiv Java Bytecode in den Maschinencode kompiliert – aber nur Code, den Hotspot vorhersagt, wird wahrscheinlich oft verwendet werden. Entweder kompilierte oder interpretierte Programme können in einem Batch-Prozess ohne menschliche Interaktion ausgeführt werden. Skriptsprachen werden häufig verwendet, um Batch-Prozesse zu erstellen. Eine gemeinsame Scripting-Sprache ist die Unix Shell, und ihre ausführende Umgebung wird als Kommandozeilen-Schnittstelle bezeichnet. Keine Eigenschaften einer Programmiersprache erfordern es ausschließlich kompiliert oder ausschließlich interpretiert zu werden. Die Kategorisierung spiegelt in der Regel die populärste Methode der Sprachausführung wider. Beispielsweise wird Java als interpretierte Sprache und C als kompilierte Sprache gedacht, trotz der Existenz von Java-Compilern und C-Interpreten. Speichern und AusführenTypischerweise werden Computerprogramme in nichtflüchtigen Speichern gespeichert, bis sie entweder direkt oder indirekt vom Computerbenutzer ausgeführt werden. Auf eine solche Anforderung wird das Programm durch ein Computerprogramm, das ein Betriebssystem genannt wird, in den Zufallsspeicher geladen, wo es direkt vom zentralen Prozessor zugegriffen werden kann. Der zentrale Prozessor führt dann das Programm, Befehl durch Anweisung, bis zur Beendigung aus. Ein Programm in Ausführung wird als Prozess bezeichnet. Die Beendigung erfolgt entweder durch normale Selbstbestimmung, durch Benutzereingriff oder durch Fehler – Software oder Hardwarefehler. Gleichzeitige Ausführung Viele Betriebssysteme unterstützen Multitasking, die es vielen Computerprogrammen ermöglicht, gleichzeitig auf einem Computer zu laufen. Betriebssysteme können mehrere Programme durch Prozessplanung ausführen – ein Software-Mechanismus, um die CPU unter Prozessen zu wechseln, so dass Benutzer mit jedem Programm interagieren können, während es läuft. Innerhalb der Hardware können moderne Multiprozessor-Computer oder Computer mit Multicore-Prozessoren mehrere Programme ausführen. Selbstmodifizierende Programme Ein Computerprogramm in der Ausführung wird normalerweise so behandelt, dass es sich von den Daten unterscheidet, auf die das Programm arbeitet. In einigen Fällen wird diese Unterscheidung jedoch verwischt, wenn sich ein Computerprogramm verändert. Das modifizierte Computerprogramm wird anschließend als Teil desselben Programms ausgeführt. Selbstmodifizierender Code ist für Programme in Maschinencode, Montagesprache, Lisp, C, COBOL, PL/1 und Prolog möglich. Funktionelle Kategorien Computerprogramme können entlang funktionaler Linien kategorisiert werden. Die wichtigsten Funktionskategorien sind Anwendungssoftware und Systemsoftware. Systemsoftware umfasst das Betriebssystem, das Computerhardware mit Anwendungssoftware koppelt. Ziel des Betriebssystems ist es, eine Umgebung zu schaffen, in der Anwendungssoftware bequem und effizient ausführt. Neben dem Betriebssystem umfasst die Systemsoftware eingebettete Programme, Bootprogramme und Mikroprogramme. Anwendungssoftware für Endbenutzer haben eine Benutzeroberfläche. Die nicht für den Endbenutzer konzipierte Anwendungssoftware umfasst Middleware, die eine Anwendung mit einer anderen koppelt. Die Anwendungssoftware umfasst auch Dienstprogramme. Die Unterscheidung zwischen Systemsoftware und Anwendungssoftware wird diskutiert. Anwendungssoftware Es gibt viele Arten von Anwendungssoftware: Das Wort App kam, um im 21. Jahrhundert zu sein. Es ist ein Clipping der Wortanwendung". Sie wurden für viele Plattformen konzipiert, aber das Wort wurde zuerst für kleinere mobile Apps verwendet. Desktop-Apps sind traditionelle Computerprogramme, die auf Desktop-Computern laufen. Mobile Apps laufen auf mobilen Geräten. Web-Apps laufen in einem Webbrowser. Sowohl mobile als auch Desktop-Apps können auf der Website der Entwickler heruntergeladen oder von App-Stores wie Microsoft Store, Apple App Store, Mac App Store, Google Play oder Intel App gekauft werden Hoch. Eine Anwendungssuite besteht aus mehreren gemeinsam gebündelten Anwendungen. Beispiele sind Microsoft Office, LibreOffice und iWork. Sie bündeln einen Wortprozessor, Tabellenkalkulation und andere Anwendungen. Enterprise-Anwendungen Bündel Buchhaltung, Personal, Kunden und Lieferanten-Anwendungen. Beispiele sind Unternehmensressourcenplanung, Kundenbeziehungsmanagement und Supply Chain Management Software. Enterprise-Infrastruktur-Software unterstützt die Softwaresysteme des Unternehmens. Beispiele sind Datenbanken, E-Mail-Server und Netzwerkserver. Information Worker Software ist für Arbeitnehmer auf der Abteilungsebene konzipiert. Beispiele sind Zeitmanagement, Ressourcenmanagement, analytische, kollaborative und Dokumentationstools. Word-Prozessoren, Tabellenkalkulationen, E-Mail- und Blog-Clients, persönliches Informationssystem und einzelne Medien-Editoren können in mehreren Aufgaben des Informations-Worker unterstützen. Medienentwicklungssoftware erzeugt Druck und elektronische Medien für andere, meist in kommerzieller oder pädagogischer Hinsicht. Diese produzieren Grafiken, Publikationen, Animationen und Videos. Produkt Engineering Software wird verwendet, um große Maschinen und andere Anwendungssoftware zu entwickeln. Beispiele sind computergestütztes Design (CAD,) computergestütztes Engineering (CAE) und integrierte Entwicklungsumgebungen. Entertainment Software kann sich auf Videospiele, Filmrecorder und Spieler sowie Musikrecorder und Spieler beziehen. Utility Programme Utility Programme sind Anwendungsprogramme, die Systemadministratoren und Computerprogrammierer unterstützen. Betriebssystem Ein Betriebssystem ist die Low-Level-Software, die die grundlegenden Funktionen eines Computers unterstützt, wie z.B. Planungsaufgaben und Steuerung von Peripheriegeräten. In den 1950er Jahren würde der Programmierer, der auch der Bediener war, ein Programm schreiben und ausführen. Nach Beendigung des Programms kann die Ausgabe gedruckt oder auf Papierband oder Karten für eine spätere Verarbeitung gestanzt werden. Häufiger als nicht das Programm funktionierte nicht. Der Programmierer schaute dann die Konsolenleuchten an und flog mit den Konsolenschaltern. Wenn weniger Glück, wurde ein Speicherausdruck für weitere Studie gemacht. In den 1960er Jahren verringerten die Programmierer die Zeitverschwendung, indem sie die Arbeit des Bedieners automatisierten. Ein Programm namens Betriebssystem wurde jederzeit im Computer gehalten. Ursprünglich wurden Betriebssysteme in der Montage programmiert; jedoch werden in der Regel moderne Betriebssysteme in C geschrieben. Boot-Programm Ein gespeicherter Programmcomputer erfordert ein in seinem Lesespeicher gespeichertes anfängliches Computerprogramm zum Booten. Der Boot-Prozess besteht darin, alle Aspekte des Systems zu identifizieren und zu initialisieren, von Prozessorregistern über Gerätesteuerungen bis hin zu Speicherinhalten. Nach dem Initialisierungsprozess lädt dieses initiale Computerprogramm das Betriebssystem und setzt den Programmzähler zu normalen Operationen. Embedded-Programme Unabhängig vom Host-Computer, ein Hardware-Gerät könnte Firmware eingebettet haben, um seinen Betrieb zu steuern. Firmware wird verwendet, wenn das Computerprogramm selten oder nie zu ändern erwartet wird, oder wenn das Programm nicht verloren gehen darf, wenn die Leistung aus ist. Microcode Programme Microcode Programme steuern einige zentrale Verarbeitungseinheiten und einige andere Hardware. Dieser Code bewegt Daten zwischen den Registern, Bussen, Recheneinheiten und anderen Funktionseinheiten in der CPU. Im Gegensatz zu herkömmlichen Programmen wird Mikrocode nicht in der Regel von den Endbenutzern von Systemen geschrieben oder sogar sichtbar, und wird in der Regel vom Hersteller bereitgestellt und gilt intern für das Gerät. Siehe auch Künstliche Intelligenz Automatische Programmierung Computer Virus Firmware Killer Anwendung Software Bug Programmlebenszyklus Phase Referenzen Weiter lesen Knuth, Donald E. (1997). Die Kunst der Computerprogrammierung, Band 1, 3rd Edition. Boston: Addison-Wesley.ISBN 978-0-201-89683-1.Knuth, Donald E. (1997). Die Kunst der Computer-Programmierung, Band 2, 3rd Edition. Boston: Addison-Wesley.ISBN 978-0-201-89684-8.Knuth, Donald E. (1997). Die Kunst der Computerprogrammierung, Band 3, 3. Auflage. Boston: Addison-Wesley.ISBN 978-0-201-89685-5.State Kapazität ist die Fähigkeit einer Regierung, politische Ziele zu erreichen, entweder in der Regel oder in Bezug auf bestimmte Ziele. Ein Zustand, der keine Kapazität hat, wird als zerbrechlicher Zustand oder im Extremfall als gescheiterter Zustand definiert. Es gibt mehrere Dimensionen der staatlichen Kapazität, sowie verschiedene Indikatoren der staatlichen Kapazität. In Studien, die staatliche Kapazität als Kausalvariable verwenden, wurde es häufig als die Fähigkeit gemessen, öffentliche Güter zu besteuern, öffentliche Güter zu erbringen, Eigentumsrechte zu erzwingen, das Wirtschaftswachstum zu erreichen oder ein Monopol auf die Anwendung von Gewalt in einem Gebiet zu halten. Mark Dincecco unterscheidet zwischen der staatlichen Kapazität (die Fähigkeit des Staates, seine beabsichtigten Handlungen zu erfüllen) und der "effektiven Staatlichkeit" (die politischen Vereinbarungen, die es dem Staat ermöglichen, seine beabsichtigten Handlungen am besten zu verwirklichen). Er argumentiert, dass die steuerliche Zentralisierung und die institutionelle Unparteilichkeit Schlüssel zur wirksamen Staatlichkeit sind. Siehe auch Staatliche Bildung Kapazitätsaufbau == Referenzen ==