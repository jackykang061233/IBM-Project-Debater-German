Eine Modellierungssprache ist jede künstliche Sprache, die verwendet werden kann, um Informationen oder Kenntnisse oder Systeme in einer Struktur, die durch eine einheitliche Regel definiert ist auszudrücken. Die Regeln werden zur Interpretation der Bedeutung von Komponenten in der Struktur verwendet. Überblick Eine Modellsprache kann graphisch oder textuell sein. Graphische Modellierungssprachen verwenden eine Diagrammtechnik mit benannten Symbolen, die Konzepte und Zeilen darstellen, die die Symbole verbinden und Beziehungen und verschiedene andere grafische Notation darstellen, um Zwänge darzustellen. Textuelle Modellierungssprachen können standardisierte Schlüsselwörter verwenden, die von Parametern oder natürlichen Sprachbegriffen und Phrasen begleitet werden, um computerinterpretable Ausdrucksformen zu machen. Ein Beispiel für eine grafische Modellierungssprache und eine entsprechende Textmodellierungssprache ist EXPRESS. Nicht alle Modellsprachen sind ausführbar, und für diejenigen, die sind, bedeutet die Verwendung von ihnen nicht unbedingt, dass Programmierer nicht mehr benötigt werden. Im Gegenteil, ausführbare Modellierungssprachen sollen die Produktivität von qualifizierten Programmierern verstärken, so dass sie anspruchsvollere Probleme, wie Parallelrechner und verteilte Systeme, ansprechen können. Eine Vielzahl von Modellsprachen erscheint in der Literatur. Art der Modellierungssprachen Grafische Typen Beispiel für grafische Modellierungssprachen im Bereich Informatik, Projektmanagement und Systemtechnik: Behavior Trees sind eine formale, grafische Modellierungssprache, die vor allem in der System- und Softwaretechnik verwendet wird. Üblicherweise verwendet, um eindeutig die Hunderte oder sogar Tausende von natürlichen Sprachanforderungen zu repräsentieren, die typischerweise verwendet werden, um die Stakeholder-Anforderungen für ein groß angelegtes softwareintegriertes System auszudrücken. Business Process Modeling Notation (BPMN und das XML-Formular BPML) ist ein Beispiel für eine Prozessmodellierungssprache. C-K Theorie besteht aus einer Modellierungssprache für Designprozesse. DRAKON ist eine allgemeine algorithmische Modellierungssprache zur Angabe von softwareintensiven Systemen, eine schematische Darstellung eines Algorithmus oder eines schrittweisen Prozesses und eine Familie von Programmiersprachen. EXPRESS und EXPRESS-G (ISO 10303-11) ist eine internationale Standard-Datenmodellierungssprache. Die Extended Enterprise Modeling Language (EEML) wird häufig für die Modellierung von Geschäftsprozessen auf mehreren Ebenen verwendet. Flowchart ist eine schematische Darstellung eines Algorithmus oder eines schrittweisen Prozesses. Grundmodellierungskonzepte (FMC) Modellierungssprache für softwareintensive Systeme. IDEF ist eine Familie von Modellierungssprachen, die IDEF0 für die funktionale Modellierung, IDEF1X für die Informationsmodellierung, IDEF3 für die Geschäftsprozessmodellierung, IDEF4 für Object-Oriented Design und IDEF5 für die Modellierung von Onlogien umfassen. Jackson Structured Programming (JSP) ist ein Verfahren zur strukturierten Programmierung basierend auf Korrespondenzen zwischen Datenstromstruktur und Programmstruktur. LePUS3 ist eine objektorientierte visuelle Design Description Sprache und eine formale Spezifikationssprache, die vor allem für die Modellierung großer objektorientierter (Java, C,+ C#) Programme und Designmuster geeignet ist. Lebenszyklusmodellierung Sprache ist eine Open-Standard-Sprache für Systemtechnik, die den gesamten Systemlebenszyklus unterstützt: konzeptionelle, Auslastung, Unterstützung und Ruhestand. Objekt-Role Modeling (ORM) im Bereich Software Engineering ist eine Methode zur konzeptionellen Modellierung und kann als Werkzeug zur Informations- und Regelanalyse verwendet werden. Petrinetze verwenden Variationen auf genau einer Diagrammtechnik und Topologie, nämlich der Bipartit-Diagramm. Die Einfachheit seiner Basis-Benutzeroberfläche ermöglichte über die Jahre eine umfangreiche Werkzeugunterstützung, insbesondere in den Bereichen Modellprüfung, grafisch orientierter Simulation und Software-Verifikation. Southbeach Notation ist eine visuelle Modellierungssprache, die verwendet wird, um Situationen in Bezug auf Agenten zu beschreiben, die aus der Perspektive des Modellierers nützlich oder schädlich sind. Die Vorstellung zeigt, wie die Agenten miteinander interagieren und ob diese Interaktion die Situation verbessert oder verschlechtert. Spezifikation und Beschreibung Sprache (SDL) ist eine Spezifikationssprache, die auf die eindeutige Spezifikation und Beschreibung des Verhaltens von reaktiven und verteilten Systemen ausgerichtet ist. SysML ist eine Domain-Specific Modeling Sprache für die Systemtechnik, die als UML-Profil definiert ist (Kundung). Unified Modeling Language (UML) ist eine allgemeine Modellierungssprache, die ein Industriestandard für die Angabe von softwareintensiven Systemen ist. UML 2.0, die aktuelle Version, unterstützt dreizehn verschiedene Diagrammtechniken und verfügt über weit verbreitete Werkzeugunterstützung.Service-orientierte Modellierungsrahmen (SOMF) ist eine ganzheitliche Sprache für die Gestaltung von Unternehmens- und Anwendungsebenenarchitekturmodellen im Raum der Unternehmensarchitektur, Virtualisierung, serviceorientierter Architektur (SOA,) Cloud Computing und mehr. Architekturbeschreibung Sprache (ADL) ist eine Sprache, die verwendet wird, um die Systemarchitektur eines Systems zu beschreiben und darzustellen. AADL (AADL) ist eine Modellierungssprache, die frühe und wiederholte Analysen der Architektur eines Systems bezüglich leistungskritischer Eigenschaften durch eine ausziehbare Notation, einen Werkzeugrahmen und genau definierte Semantik unterstützt. Beispiele für grafische Modellierungssprachen in anderen Bereichen der Wissenschaft. EAST-ADL ist eine Domain-Specific Modeling-Sprache für das Automobil-Systemdesign. Energy Systems Language (ESL) eine Sprache, die ökologische Energie und globale Wirtschaft modellieren soll. IEC 61499 definiert Domain-Specific Modeling Sprache für die Verbreitung industrieller Prozessmess- und Steuerungssysteme. Texttypen Informationsmodelle können auch in formalisierten natürlichen Sprachen wie Gellish ausgedrückt werden. Gellish hat natürliche Sprachvarianten wie Gellish Formal English und Gellish Formal Dutch (Gellish Formeel Nederlands,) etc. Gellish Formal English ist eine Informationsrepräsentationssprache oder semantische Modellierungssprache, die in der Gellish English Dictionary-Taxonomy definiert ist, die die Form einer Taxonomie-Ontologie hat (ähnlich für Niederländisch). Gellish Formal English ist nicht nur geeignet, um Wissen, Anforderungen und Wörterbücher, Taxonomien und Ontologien auszudrücken, sondern auch Informationen über einzelne Dinge. Alle diese Informationen werden in einer Sprache ausgedrückt und können daher unabhängig von der Frage, ob sie in zentralen oder verteilten oder in föderierten Datenbanken gespeichert ist, integriert werden. Informationsmodelle in Gellish Formal English bestehen aus Sammlungen von Gellish Formal English Expressions, die natürliche Sprachbegriffe und formalisierte Phrasen verwenden. Ein geografisches Informationsmodell kann beispielsweise aus einer Reihe von englischen, gellishen Ausdrucksformen bestehen, wie z.B.: - der Eiffelturm <is in> Paris - Paris < wird als eine > Stadt eingestuft, während die Informationsanforderungen und Kenntnisse beispielsweise wie folgt ausgedrückt werden können: - Tower <shall befindet sich in einem > geografischen Gebiet - Stadt < ist eine Art > geografischem Gebiet Solche Gellish formale englische Ausdrücke verwenden Namen von Konzepten (wie Stadt) und Phrasen, die Beziehungstypen darstellen (wie ⟨is befindet sich in・ und ⟨is eingestuft als a・), die aus dem Gellish English Dictionary-Taxonomy (oder Ihrem eigenen Domain-Wörterbuch) ausgewählt werden sollten. Das Gellish English Dictionary-Taxonomy ermöglicht die Erstellung von semantisch reichen Informationsmodellen, da das Wörterbuch mehr als 600 Standard-Relationstypen enthält und Definitionen von mehr als 40000 Konzepten enthält. Ein Informationsmodell in Gellish kann Fakten ausdrücken oder Aussagen, Abfragen und Antworten machen. Mehr spezifische Typen Auf dem Gebiet der Informatik sind in jüngster Zeit spezifische Arten von Modellierungssprachen entstanden. Algebraic Algebraic Modeling Languages (AML) sind hochrangige Programmiersprachen zur Beschreibung und Lösung hoher Komplexitätsprobleme für die großformatige mathematische Berechnung (d.h. große Optimierungsprobleme). Ein besonderer Vorteil von AMLs wie AIMMS, AMPL, GAMS, Mosel, OPL und OptimJ ist die Ähnlichkeit seiner Syntax mit der mathematischen Bezeichnung von Optimierungsproblemen. Dies ermöglicht eine sehr präzise und lesbare Definition von Problemen im Bereich der Optimierung, die durch bestimmte Sprachelemente wie Sätze, Indizes, algebraische Ausdrücke, leistungsfähige Spars Index- und Datenhandlingvariablen, Einschränkungen mit beliebigen Namen unterstützt wird. Die algebraische Formulierung eines Modells enthält keine Hinweise, wie man es verarbeitet. Behavioral Behavioral Sprachen sind entworfen, um das beobachtbare Verhalten komplexer Systeme, bestehend aus Komponenten, die gleichzeitig ausführen zu beschreiben. Diese Sprachen konzentrieren sich auf die Beschreibung von Schlüsselbegriffen wie: Konkurrenz, Nichtdeterminismus, Synchronisation und Kommunikation. Die semantischen Grundlagen der Verhaltenssprachen sind Prozessrechnung oder Prozessalgebra. Disziplin-Specific Eine disziplinspezifische Modellierung (DspM) Sprache konzentriert sich auf die Lieferungen, die mit einer spezifischen Software-Entwicklungs-Lebenszyklusphase verbunden sind. Daher bietet eine solche Sprache eine ausgeprägte Vokabular, Syntax und Notation für jede Stufe, wie Entdeckung, Analyse, Design, Architektur, Kontraktion, etc. Beispielsweise verwendet der Modellierer für die Analysephase eines Projekts eine spezifische Analysenotation, um ein Analysediagramm zu liefern.Während der Entwurfsphase wird jedoch eine logische Gestaltungsnotation verwendet, um die Beziehung zwischen Softwareeinheiten darzustellen. Darüber hinaus schließt die disziplinspezifische Modellierungssprache Best Practices den Praktizierenden nicht aus, die verschiedenen Notationen in einem einzigen Diagramm zu kombinieren. Domain-spezifisches Domain-spezifisches Modelling (DSM) ist eine Software-Engineering-Methodik zur Auslegung und Entwicklung von Systemen, meist IT-Systemen wie Computersoftware. Es handelt sich um eine systematische Verwendung einer grafischen Domänen-spezifischen Sprache (DSL) zur Darstellung der verschiedenen Facetten eines Systems. DSM-Sprachen tendieren dazu, höhere Abstraktionen zu unterstützen als allgemeine Modellierungssprachen, so dass sie weniger Aufwand und weniger Low-Level-Details benötigen, um ein bestimmtes System festzulegen. Rahmenspezifisch Eine rahmenspezifische Modellierungssprache (FSML) ist eine Art Domänenspezifische Modellierungssprache, die für einen objektorientierten Anwendungsrahmen ausgelegt ist. FSMLs definieren rahmenbereite Abstraktionen als FSML-Konzepte und zerlegen die Abstraktionen in Features. Die Funktionen stellen Implementierungsschritte oder Entscheidungen dar. Ein FSML-Konzept kann konfiguriert werden, indem Funktionen ausgewählt und Werte für Funktionen bereitgestellt werden. Eine solche Konzeptkonfiguration stellt dar, wie das Konzept im Code umgesetzt werden soll. Mit anderen Worten beschreibt die Konzeptkonfiguration, wie der Rahmen abgeschlossen werden soll, um die Umsetzung des Konzepts zu schaffen. Informations- und Wissensmodellierung Verknüpfte Daten- und Ontologietechnik erfordern "Host-Sprachen", um Entitäten und die Beziehungen zwischen ihnen, Zwänge zwischen den Eigenschaften von Entitäten und Beziehungen und Metadaten-Attribu zu repräsentieren. JSON-LD und RDF sind in diesem Zusammenhang zwei große (und semantisch fast gleichwertige) Sprachen, vor allem, weil sie die Erklärung Reification und Kontextualisierung unterstützen, die wesentliche Eigenschaften sind, um die Logik der höheren Ordnung zu unterstützen, die für die Vernunft über Modelle erforderlich ist. Modelltransformation ist ein gemeinsames Beispiel für eine solche Argumentation. Objektorientierte Objektmodellierungssprachen sind Modellierungssprachen basierend auf einem standardisierten Satz von Symbolen und der Art, sie dem Modell (Teil) eines objektorientierten Softwaredesigns oder Systemdesigns anzupassen. Einige Organisationen nutzen sie in Kombination mit einer Software-Entwicklungsmethodik umfassend, um von der Erstspezifikation bis zu einem Umsetzungsplan voranzukommen und diesen Plan einem ganzen Team von Entwicklern und Interessenvertretern zu übermitteln. Da eine Modellierungssprache visuell und auf einer höheren Abstraktionsebene als Code ist, ermutigt die Verwendung von Modellen die Erzeugung einer gemeinsamen Vision, die später in der Entwicklung Probleme unterschiedlicher Interpretationen verhindern kann. Oft werden Software-Modellierungstools verwendet, um diese Modelle zu konstruieren, die dann in der Lage sein können, automatische Übersetzung zum Code. Virtual Reality Virtual Reality Modeling Language (VRML) vor 1995 bekannt als Virtual Reality Markup Language ist ein Standard-Dateiformat für die Darstellung von 3-dimensionalen (3D) interaktiven Vektorgrafiken, die speziell mit dem World Wide Web im Verstand entwickelt wurden. Andere Architektur Beschreibung Sprache FaceModeling Sprache Generative Modellierung Sprache JavaModeling Sprache Promela Rebeca Modellierung Sprache Service Modellierung Sprache Web ServicesModeling Sprache X3D Anwendungen Verschiedene Arten von Modellierungssprachen werden in verschiedenen Disziplinen angewendet, darunter Informatik, Informationsmanagement, Geschäftsprozessmodellierung, Software Engineering und Systemtechnik. Modellierungssprachen können verwendet werden, um: Systemanforderungen, Strukturen und Verhaltensweisen. Modellsprachen sollen verwendet werden, um Systeme genau festzulegen, so dass Stakeholder (z.B. Kunden, Operatoren, Analysten, Designer) das Modellsystem besser verstehen können. Die reiferen Modellsprachen sind präzise, konsistent und ausführbar. Informelle Diagrammierungstechniken, die mit Ziehwerkzeugen angewendet werden, sollen nützliche Bilddarstellungen von Systemanforderungen, Strukturen und Verhaltensweisen, aber nicht viel mehr erzeugen. Ausführbare Modellierungssprachen, die mit der richtigen Werkzeugunterstützung angewendet werden, sollen jedoch die Systemprüfung und Validierung, Simulation und Codegenerierung aus den gleichen Darstellungen automatisieren. Qualität Eine Überprüfung der Modellsprachen ist unerlässlich, um zuordnen zu können, welche Sprachen für verschiedene Modellierungseinstellungen geeignet sind. In den Begriffseinstellungen umfassen wir Stakeholder, Domain und das damit verbundene Wissen. Die Bewertung der Sprachqualität ist ein Mittel, mit dem bessere Modelle erreicht werden sollen. Rahmen für die Bewertung Hier wird die Sprachqualität gemäß dem SEQUAL-Rahmen für die Qualität der von Krogstie, Sindre und Lindland entwickelten Modelle (2003) angegeben, da es sich um einen Rahmen handelt, der die Sprachqualität mit einem Rahmen für die allgemeine Modellqualität verbindet.Fünf Bereiche werden in diesem Rahmen verwendet, um die Sprachqualität zu beschreiben, und diese sollen sowohl die konzeptionelle als auch die visuelle Vorstellung der Sprache zum Ausdruck bringen. Wir werden nicht in eine gründliche Erklärung des zugrunde liegenden Qualitätsrahmens von Modellen gehen, sondern uns auf die Bereiche konzentrieren, die zur Erläuterung des Sprachqualitätsrahmens verwendet werden. Domain-Anpassung Der Rahmen gibt die Möglichkeit, die Domain als Domain-Aneignung darzustellen. Die Aussagefähigkeit kann ein wenig vage sein, aber in diesem besonderen Kontext bedeutet sie, ausdrücken zu können. Sie sollten idealerweise nur in der Lage sein, Dinge auszudrücken, die in der Domain sind, aber mächtig genug sein, um alles, was in der Domain ist, einzubeziehen. Diese Anforderung mag etwas streng erscheinen, aber das Ziel ist, ein visuell ausgedrücktes Modell zu erhalten, das alles, was für die Domain relevant ist, beinhaltet und alles ausschließt, was für die Domain nicht angemessen ist. Um dies zu erreichen, muss die Sprache gut unterschieden werden, welche Hinweise und Syntaxe, die vorteilhaft zu präsentieren sind. Partizipative Eignung Um die Teilnehmeraneignung zu bewerten, versuchen wir zu identifizieren, wie gut die Sprache das von den Interessenvertretern gehaltene Wissen ausdrückt. Dies beinhaltet Herausforderungen, da das Wissen eines Stakeholders subjektiv ist. Die Kenntnis des Stakeholders ist sowohl tacital als auch explizit. Beide Wissensarten sind dynamisch. In diesem Rahmen wird nur die explizite Art des Wissens berücksichtigt. Die Sprache sollte in hohem Maße alle expliziten Kenntnisse der für die Domain relevanten Interessengruppen zum Ausdruck bringen. Modellgerechtigkeit Im letzten Absatz wird darauf hingewiesen, dass die Kenntnisse der Interessenvertreter gut dargestellt werden sollten. Darüber hinaus ist es zwingend notwendig, dass die Sprache in der Lage sein sollte, alle möglichen expliziten Kenntnisse der Akteure auszudrücken. Kein Wissen sollte wegen mangelnder Sprache unexprimiert bleiben. Um die Eignungstauglichkeit zu verstehen, sorgt die Eignungstauglichkeit dafür, dass die sozialen Akteure das Modell aufgrund einer konsequenten Nutzung der Sprache verstehen. Um dies zu erreichen, enthält der Rahmen eine Reihe von Kriterien. Die allgemeine Bedeutung dieses Ausdrucks ist, dass die Sprache flexibel, einfach zu organisieren und einfach zu unterscheiden verschiedene Teile der Sprache sowohl intern als auch von anderen Sprachen sein sollte. Darüber hinaus sollte das Ziel möglichst einfach sein und dass jedes Symbol in der Sprache eine einzigartige Darstellung hat. Dies steht auch im Zusammenhang mit der Struktur der Entwicklungsanforderungen. . Werkzeuggerechtigkeit Um sicherzustellen, dass die tatsächlich modellierte Domäne zur Analyse und Weiterverarbeitung nutzbar ist, muss die Sprache sicherstellen, dass sie automatisch begründet werden kann. Um dies zu erreichen, muss es formale Syntax und Semantik enthalten. Ein weiterer Vorteil durch Formalisierung ist die Fähigkeit, Fehler in einem frühen Stadium zu entdecken. Nicht immer ist die für die technischen Akteure am besten geeignete Sprache die gleiche wie für die sozialen Akteure. Organisationsgerechtigkeit Die verwendete Sprache ist für den organisatorischen Kontext geeignet, z.B., dass die Sprache innerhalb der Organisation standardisiert ist, oder dass sie durch Werkzeuge unterstützt wird, die als Standard in der Organisation gewählt werden. Weitere Informationen John Krogstie (2003) "Evaluierung von UML unter Verwendung eines generischen Qualitätsrahmens" . SINTEF Telecom und Informatik und IDI, NTNU, Norwegen Krogstie und Sølvsberg (2003). Information Systems Engineering: Konzeptionelle Modellierung in einer Qualitätsperspektive. Institut für Informatik und Informatik.\ Anna Gunhild Nysetvold und John Krogstie (2005). "Sessing Business Processing Modeling Sprachen mit einem generischen Qualitätsrahmen". Institut für Informatik und Informatik. Externe Links Grundmodellierungskonzepte Software Modelling Languages Portal BIP -- Incremental Component-based Construction of Real-time Systems Gellish Formal English