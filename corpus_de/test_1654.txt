In der Informatik, insbesondere in der Wissensdarstellung und -vernunft und Metalogik, ist der Bereich der automatisierten Argumentation dem Verständnis verschiedener Aspekte der Argumentation gewidmet. Die Studie der automatisierten Argumentation hilft, Computerprogramme zu produzieren, die es Computern ermöglichen, vollständig oder fast vollständig, automatisch zu verdanken. Obwohl automatisierte Argumentation als Unterfeld künstlicher Intelligenz betrachtet wird, hat sie auch Verbindungen mit theoretischer Informatik und Philosophie. Die am meisten entwickelten Teilbereiche der automatisierten Argumentation sind automatisierte Theorem-Proving (und das weniger automatisierte, aber pragmatische Unterfeld der interaktiven Theorem-Proving) und automatisierte Proof-Check (als garantiert korrekte Argumentation unter festen Annahmen betrachtet). Auch in analoger Weise wurden umfangreiche Arbeiten mit Induktion und Entführung durchgeführt. Weitere wichtige Themen sind die Vernunft unter Unsicherheit und nicht monotone Vernunft. Ein wichtiger Teil des Unsicherheitsfeldes ist die Argumentation, bei der über den standardisierteren automatisierten Abzug hinaus weitere Einschränkungen von Minimalität und Konsistenz angewendet werden. Das OSCAR-System von John Pollock ist ein Beispiel für ein automatisiertes Argumentationssystem, das genauer ist als nur ein automatisiertes Theorem-Prover. Werkzeuge und Techniken der automatisierten Argumentation umfassen die klassischen Logiken und Calci, Fuzzy Logik, Bayesische Inferenz, Argumentation mit maximaler Entropie und viele weniger formale Ad-hoc-Techniken. Frühere Jahre Die Entwicklung der formalen Logik spielte eine große Rolle im Bereich der automatisierten Argumentation, die selbst zur Entwicklung der künstlichen Intelligenz führte. Ein formaler Beweis ist ein Beweis, in dem jede logische Inferenz auf die grundlegenden Axiome der Mathematik überprüft wurde. Alle Zwischen-Logikschritte werden ohne Ausnahme geliefert. Es wird keine Intuition eingelegt, auch wenn die Übersetzung von Intuition zu Logik Routine ist. So ist ein formaler Beweis weniger intuitiv und weniger anfällig für logische Fehler. Einige betrachten die Cornell Summer-Meeting von 1957, die viele Logiker und Informatiker zusammenbrachte, als Ursprung der automatisierten Argumentation, oder automatisierten Abzug. Andere sagen, dass es vorher mit dem 1955 Logic Theorist Programm von Newell, Shaw und Simon, oder mit Martin Davis’ 1954 Umsetzung von Presburgers Entscheidungsverfahren (was bewies, dass die Summe von zwei sogar Zahlen ist sogar). Automatisierte Argumentation, obwohl ein bedeutender und beliebter Bereich der Forschung, ging durch einen "AI-Winter" in den achtziger und frühen neunziger Jahren. Das Feld wurde dann jedoch wiederbelebt. Zum Beispiel, im Jahr 2005, Microsoft begann mit der Verifikationstechnologie in vielen ihrer internen Projekte und plant, eine logische Spezifikation und Prüfung Sprache in ihrer 2012 Version von Visual C. Signifikante Beiträge Principia Mathematica war ein Meilenstein in der formalen Logik geschrieben von Alfred North Whitehead und Bertrand Russell. Principia Mathematica - auch die Prinzipien der Mathematik - wurde mit einem Zweck geschrieben, alle oder einige der mathematischen Ausdrücke, in Bezug auf symbolische Logik abzuleiten. Principia Mathematica wurde zunächst in drei Bänden 1910, 1912 und 1913 veröffentlicht. Logic Theorist (LT) war das erste Programm, das 1956 von Allen Newell, Cliff Shaw und Herbert A. Simon entwickelt wurde, um "mimic human Reasoning" in Proving theorems und wurde auf fünfzig-zwei Theorems aus Kapitel zwei von Principia Mathematica, proving dreißig von ihnen. Zusätzlich zu den Theorems zu beweisen, fand das Programm einen Beweis für eine der Theoremen, die eleganter als die von Whitehead und Russell. Nach einem erfolglosen Versuch, ihre Ergebnisse zu veröffentlichen, berichteten Newell, Shaw und Herbert in ihrer Veröffentlichung im Jahr 1958, The Next Advance in Operation Research: "Es gibt jetzt in den Weltmaschinen, die denken, dass lernen und das schaffen. Darüber hinaus wird ihre Fähigkeit, diese Dinge zu tun, schnell zu erhöhen, bis (in einer sichtbaren Zukunft) das Spektrum der Probleme, die sie bewältigen können, mit dem Bereich, in dem der menschliche Geist angewendet wurde, zusammen sein wird." Beispiele für Formal Proof Systeme Boyer-Moore Theorem Prover (NQTHM) Das Design von NQTHM wurde von John McCarthy und Woody Bledsoe beeinflusst. Gestartet 1971 in Edinburgh, Schottland, war dies ein vollautomatischer Theorem-Prover, der mit Pure Lisp gebaut wurde. Die wichtigsten Aspekte von NQTHM waren: die Verwendung von Lisp als Arbeitslogik. die Einhaltung eines Definitionsprinzips für rekursive Gesamtfunktionen. den umfangreichen Einsatz von Rewriting und "symbolische Auswertung". eine Induktion heuristisch basiert auf dem Ausfall der symbolischen Auswertung. HOL Light Geschrieben in OCaml, HOL Light ist entworfen, um eine einfache und saubere logische Grundlage und eine unklutterte Implementierung zu haben. Es ist im Wesentlichen ein weiterer Beweisassistent für die klassische höhere Ordnungslogik. Coq Entwickelt in Frankreich, Coq ist ein weiterer automatisierter Beweisassistent, der automatisch ausführbare Programme aus Spezifikationen, wie Ziel CAML oder Haskell Quellcode extrahieren kann. Eigenschaften, Programme und Proofs werden in der gleichen Sprache formalisiert wie die Berechnung der induktiven Konstruktionen (CIC). Anwendungen Automatisierte Argumentation wurde am häufigsten verwendet, um automatisierte Theorem-Provers zu bauen. Oft erfordern Theorem-Proversen jedoch einige menschliche Führungen, um wirksam zu sein und so allgemeiner als Beweisassistenten zu qualifizieren. In einigen Fällen sind solche Proversen mit neuen Ansätzen konfrontiert, um ein Theorem zu beweisen. Logic Theorist ist ein gutes Beispiel dafür. Das Programm kam mit einem Beweis für eine der Theoremen in Principia Mathematica, die effizienter war (Requiring weniger Schritte) als der Beweis von Whitehead und Russell. Automatisierte Argumentationsprogramme werden angewendet, um eine wachsende Anzahl von Problemen in der formalen Logik, Mathematik und Informatik, Logik-Programmierung, Software und Hardware-Verifikation, Schaltung Design und viele andere zu lösen. Die TPTP (Sutcliffe und Suttner 1998) ist eine Bibliothek solcher Probleme, die regelmäßig aktualisiert wird. Auch bei der CADE-Konferenz (Pelletier, Sutcliffe und Suttner 2002) gibt es einen regelmäßigen Wettbewerb unter automatisierten Theorem-Proversen; die Probleme für den Wettbewerb werden aus der TPTP-Bibliothek ausgewählt. Siehe auch Automatisiertes maschinelles Lernen (AutoML)Automatisiertes Theorem Proving Reasoning System Semantic Reasoner Program Analysis (Computer Science)Applications of künstliche Intelligenz Outline of künstliche Intelligenz Casuistry • Case-based Reasoning Abduktive Argumenting Inference Engine Commonsense Reasoning Konferenzen und Workshops International Joint Conference on Automated Reasoning (IJCAR) Konferenz über Automated Deduction (CADE)