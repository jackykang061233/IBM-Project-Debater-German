In der theoretischen Informatik und Mathematik ist die Theorie der Berechnung die Branche, die sich mit den Problemen befasst, die auf einem Modell der Berechnung gelöst werden können, mit einem Algorithmus, wie effizient sie gelöst werden können oder zu welchem Grad (z.B. ungefähre Lösungen gegen genaue). Das Feld ist in drei Hauptzweige unterteilt: Automatische Theorie und formale Sprachen, Rechenschaftstheorie und Rechenkomplexitätstheorie, die durch die Frage verknüpft sind: "Was sind die grundlegenden Fähigkeiten und Einschränkungen von Computern?". Um eine strenge Untersuchung der Berechnung durchzuführen, arbeiten Informatiker mit einer mathematischen Abstraktion von Computern, die ein Modell der Berechnung genannt werden. Es gibt mehrere Modelle im Einsatz, aber am häufigsten untersucht ist die Turing-Maschine. Informatiker studieren die Turing-Maschine, weil es einfach zu formulieren ist, kann analysiert und verwendet werden, um Ergebnisse zu beweisen, und weil es repräsentiert, was viele betrachten das mächtigste mögliche vernünftige Modell der Berechnung (siehe Kirche-Turing These). Es könnte scheinen, dass die potenziell unendliche Speicherkapazität ist ein unrealisierbares Attribut, aber jedes dezidierbare Problem gelöst durch eine Turing-Maschine wird immer nur eine endliche Menge Speicher erfordern. So kann grundsätzlich jedes Problem, das durch eine Turing-Maschine gelöst werden kann, durch einen Computer gelöst werden, der eine endliche Speichermenge aufweist. Geschichte Die Berechnungstheorie kann als die Erstellung von Modellen aller Art auf dem Gebiet der Informatik betrachtet werden. Daher werden Mathematik und Logik verwendet. Im letzten Jahrhundert wurde es eine unabhängige akademische Disziplin und wurde von der Mathematik getrennt. Einige Pioniere der Berechnungstheorie waren Ramon Llull, Alonzo Kirche, Kurt Gödel, Alan Turing, Stephen Kleene, Rózsa Péter, John von Neumann und Claude Shannon. Branches Automata Theorie Automata Theorie ist die Studie von abstrakten Maschinen (oder besser geeignet, abstrakte mathematische Maschinen oder Systeme) und die rechnerischen Probleme, die mit diesen Maschinen gelöst werden können. Diese abstrakten Maschinen werden automata genannt. Automata stammt aus dem griechischen Wort (Αυτόματα), was bedeutet, dass etwas an sich selbst tut. Die Automata-Theorie ist auch eng mit der formalen Sprachtheorie verbunden, da die automata oft von der Klasse der formalen Sprachen klassifiziert werden, die sie erkennen können. Ein Automat kann eine endliche Darstellung einer formalen Sprache sein, die ein unendliches Set sein kann. Automata werden als theoretische Modelle für Rechenmaschinen verwendet und für Nachweise über die Rechenbarkeit verwendet. Formale Sprachtheorie Die Sprachtheorie ist ein Zweig der Mathematik, die sich mit der Beschreibung von Sprachen als eine Reihe von Operationen über ein Alphabet beschäftigt. Es ist eng mit der Automata-Theorie verbunden, da automata verwendet werden, um formale Sprachen zu erzeugen und zu erkennen. Es gibt mehrere Klassen von formalen Sprachen, die jeweils eine komplexere Sprachspezifikation als die vorher, d.h. Chomsky Hierarchie, erlauben, und jede entspricht einer Klasse von automata, die sie erkennt. Da automata als Modelle für die Berechnung verwendet werden, sind formale Sprachen die bevorzugte Art der Spezifikation für jedes Problem, das berechnet werden muss. Die Computability-Theorie beschäftigt sich vor allem mit der Frage, inwieweit ein Problem auf einem Computer lösbar ist. Die Aussage, dass das Stillstandsproblem nicht durch eine Turing-Maschine gelöst werden kann, ist eines der wichtigsten Ergebnisse in der Berechnungstheorie, da es ein Beispiel für ein konkretes Problem ist, das sowohl einfach zu formulieren als auch unmöglich mit einer Turing-Maschine zu lösen ist. Ein Großteil der Rechenschaftstheorie baut auf dem aufhaltenden Problemergebnis auf. Ein weiterer wichtiger Schritt in der Rechenbarkeitstheorie war Rice's Theorem, der besagt, dass es für alle nicht trivialen Eigenschaften von Teilfunktionen unentscheidbar ist, ob eine Turing-Maschine eine Teilfunktion mit dieser Eigenschaft berechnet. Die Computability-Theorie ist eng mit dem Zweig der mathematischen Logik namens Recursion-Theorie verbunden, die die Einschränkung des Studiums nur Modelle der Berechnung entfernt, die für das Turing-Modell reduzierbar sind. Viele Mathematiker und rechnerische Theoretiker, die Rekursionstheorie studieren, werden sie als Rechenschaftstheorie bezeichnen. Die Komplexitätstheorie der Rechentechnik betrachtet nicht nur, ob ein Problem überhaupt auf einem Computer gelöst werden kann, sondern auch, wie effizient das Problem gelöst werden kann. Zwei Hauptaspekte werden berücksichtigt: Zeitkomplexität und Raumkomplexität, die jeweils wie viele Schritte es braucht, um eine Berechnung durchzuführen, und wie viel Speicher benötigt wird, um diese Berechnung durchzuführen. Um zu analysieren, wie viel Zeit und Raum ein bestimmter Algorithmus benötigt, drücken Informatiker die Zeit oder den Raum aus, um das Problem in Abhängigkeit von der Größe des Eingabeproblems zu lösen. Zum Beispiel wird das Finden einer bestimmten Zahl in einer langen Nummernliste härter, da die Zahlenliste größer wird. Wenn wir sagen, es gibt n Zahlen in der Liste, dann wenn die Liste nicht sortiert oder in irgendeiner Weise indexiert wird, müssen wir uns jede Zahl ansehen, um die Anzahl zu finden, die wir suchen. Wir sagen also, dass zur Lösung dieses Problems der Computer eine Reihe von Schritten ausführen muss, die linear in der Größe des Problems wachsen. Um dieses Problem zu vereinfachen, haben Informatiker Big O-Notation angenommen, die es ermöglicht, Funktionen in einer Weise zu vergleichen, die sicherstellt, dass bestimmte Aspekte der Konstruktion einer Maschine nicht berücksichtigt werden müssen, sondern nur das asymptotische Verhalten, da Probleme groß werden. So können wir in unserem vorherigen Beispiel sagen, dass das Problem O (n ) \{displaystyle O(n}) Schritte zur Lösung erfordert. Vielleicht ist das wichtigste offene Problem in der gesamten Informatik die Frage, ob eine bestimmte breite Klasse von Problemen mit NP effizient gelöst werden kann. Dies wird in den Complexity-Klassen P und NP weiter diskutiert, und P versus NP Problem ist eines der sieben Millennium-Preis-Probleme, die vom Clay Mathematics Institute im Jahr 2000 erklärt. Die offizielle Problembeschreibung wurde von Turing Award Gewinner Stephen Cook. Modelle der Berechnung Abgesehen von einer Turing-Maschine, andere Äquivalente (Siehe: Church-Turing thesis) Modelle der Berechnung sind im Einsatz. Lambda Calculus Eine Berechnung besteht aus einem anfänglichen Lambda-Ausdruck (oder zwei, wenn Sie die Funktion und ihren Eingang trennen möchten) plus einer endlichen Folge von Lambda-Bezeichnungen, die jeweils von dem vorhergehenden Begriff durch eine Anwendung von Beta-Reduktion abgeleitet werden. Kombinationslogik ist ein Konzept, das viele Ähnlichkeiten zu λ \{displaystyle \lambda } -calculus hat, aber auch wichtige Unterschiede existieren (z.B. Fixpunkt-Komminator Y hat normale Form in kombinatorischer Logik, aber nicht in λ \{displaystyle \lambda } -calculus). Die Kombinationslogik wurde mit großen Ambitionen entwickelt: Verständnis der Natur von Paradoxen, Fundamente der Mathematik wirtschaftlicher (konzeptuell), Beseitigung der Vorstellung von Variablen (also Klärung ihrer Rolle in der Mathematik).μ-recursive Funktionen eine Berechnung besteht aus einer mu-recursive Funktion, d.h. seiner definierenden Sequenz, jedem Eingabewert(n) und einer Sequenz von wiederkehrenden Funktionen, die in der definierenden Wenn also in der definierenden Reihenfolge einer rekursiven Funktion f ( x ) \{displaystyle f(x}) die Funktionen g ( x ) \{displaystyle g(x}) und h ( x , y ) \{displaystyle h(x,y}) auftreten, dann können Begriffe der Form g(5)=7 oder h(3,2)=10 auftreten. Jeder Eintrag in dieser Reihenfolge muss eine Anwendung einer Grundfunktion sein oder aus den oben genannten Einträgen durch Verwendung von Zusammensetzung, primitive Recursion oder μ Recursion folgen. Wenn z.B. f ( x ) = h ( x , g ( x ) ) \{displaystyle f(x)=h(x,g(x}, dann für f(5)=3 erscheint, müssen oben Begriffe wie g(5)=6 und h(5,6)=3 auftreten. Die Berechnung endet nur, wenn der Endterm den Wert der auf die Eingänge aufgebrachten rekursiven Funktion gibt. Markov Algorithmus ein String-Rewriting-System, das grammarähnliche Regeln verwendet, um auf Zeichenfolgen zu arbeiten. Registermaschine ist eine theoretisch interessante Idealisierung eines Computers. Es gibt mehrere Varianten. In den meisten von ihnen kann jedes Register eine natürliche Zahl (von unbegrenzter Größe) halten, und die Anweisungen sind einfach (und wenige in Anzahl), z.B. nur Dekrementierung (kombiniert mit bedingtem Sprung) und Inkrementierung existieren (und stoppen). Das Fehlen des unendlichen (oder dynamisch wachsenden) externen Speichers (seen bei Turing-Maschinen) kann dadurch verstanden werden, dass seine Rolle durch Gödel-Zahlungstechniken ersetzt wird: die Tatsache, dass jedes Register eine natürliche Zahl hält, ermöglicht die Möglichkeit, eine komplizierte Sache (z.B. eine Sequenz, oder eine Matrix etc.) durch eine entsprechende große natürliche Zahl zu repräsentieren - Unklarheit der Darstellung und Interpretation kann durch die Anzahl theoretische Grundlagen dieser Techniken erstellt werden. Neben den allgemeinen Rechenmodellen sind einige einfachere Rechenmodelle für spezielle, eingeschränkte Anwendungen nützlich. Regelmäßige Ausdrücke geben z.B. Stringmuster in vielen Kontexten an, von der Office-Produktivitätssoftware bis hin zu Programmiersprachen. Ein weiterer formalismus, der regelmäßigen Ausdrücke mathematisch gleichwertig ist, Finite automata wird in der Schaltung und in einigen Arten von Problemlösung verwendet. Kontextfreie Grammatiken geben Programmiersprachensyntax an. Nicht-deterministische Pushdown-Automaten sind ein weiterer Formalismus, der kontextfreien Grammatik entspricht. Primitive rekursive Funktionen sind eine definierte Unterklasse der rekursiven Funktionen. Verschiedene Berechnungsmodelle haben die Fähigkeit, verschiedene Aufgaben zu erledigen. Eine Möglichkeit, die Macht eines rechnerischen Modells zu messen, besteht darin, die Klasse der formalen Sprachen zu studieren, die das Modell erzeugen kann; so wird die Chomsky-Hierarchie der Sprachen erhalten. Referenzen Weiter lesen Lehrbücher für Informatiker( Es gibt viele Lehrbücher in diesem Bereich; diese Liste ist durch Notwendigkeit unvollständig.) Hopcroft, John E. und Jeffrey D. Ullman (2006). Einführung in Automata Theorie, Sprachen und Computation.3rd ed Lesung, MA: Addison-Wesley.ISBN 978-0-321-45536-9 Eine der Standardreferenzen im Feld. Linz P.Eine Einführung in die formale Sprache und automata. Narosa Publishing.ISBN 9788173197819. Michael Sipser (2013). Einführung in die Theory of Computation (3. ed.). Cengage Learning. ISBN 978-1-133-18779-0.Eitan Gurari (1989). Eine Einführung in die Theory of Computation. Computer Science Press.ISBN 0-7167-8182-4.Archiviert vom Original am 2007-01-07.Hein, James L. (1996) Theory of Computation. Sudbury, MA: Jones & Bartlett. ISBN 978-0-86720-497-1 Eine sanfte Einführung in das Feld, passend für zwei Jahre Bachelor-Computer-Wissenschaft Studenten. Taylor, R. Gregory (1998). Modelle der Computation und Formal Languages. New York: Oxford University Press. ISBN 978-0-19-510983-2 Ein ungewöhnlich lesbares Lehrbuch, passend für Oberstufen-Absolventen oder Anfänger-Absolventen. Lewis, F. D. (2007). Grundlagen der theoretischen Informatik Ein Lehrbuch zum Thema formale Sprachen, Automaten und Grammatik. Der Schwerpunkt liegt auf der Präsentation eines Überblicks über die Ergebnisse und ihre Anwendungen, anstatt Beweise für die Ergebnisse zu liefern. Martin Davis, Ron Sigal, Elaine J. Weyuker, Rechenschaftspflicht, Komplexität und Sprachen: Grundlagen der theoretischen Informatik, 2. ed., Academic Press, 1994, ISBN 0-12-206382-1. Umfasst ein breiteres Spektrum von Themen als die meisten anderen einführenden Bücher, einschließlich Programm semantik und Quantifizierung Theorie. Ziel bei Absolventen Studenten. Bücher über Rechenschaftstheorie aus der (weiteren) mathematischen Perspektive Hartley Rogers, Jr (1987). Theorie der wiederkehrenden Funktionen und effektiven Rechenschaft, MIT Drücken. ISBN 0-262-68052-1 S. Barry Cooper (2004). Vergleichbarkeit Theorie. Chapman und Hall/CRC.ISBN 1-58488-237-9. Carl H. Smith, Eine rekursive Einführung in die Berechnungstheorie, Springer, 1994, ISBN 0-387-94332-3. Ein kürzeres Lehrbuch für Absolventen in Informatik. Historische Perspektive Richard L. Epstein und Walter A. Carnielli (2000). Computability: Computable Functions, Logic und die Grundlagen der Mathematik, mit Computability: A Timeline (2. ed.). Wadsworth/Thomson Learning. ISBN 0-534-54644-7. Externe Links Theory of Computation at MIT Theory of Computation at Harvard Computability Logic - Eine Theorie der interaktiven Berechnung. Die wichtigste Webquelle zu diesem Thema.