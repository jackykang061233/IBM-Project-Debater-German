Kunden-Server-Modell ist eine verteilte Anwendungsstruktur, die Aufgaben oder Arbeitsbelastungen zwischen den Anbietern einer Ressource oder Dienstleistung, sogenannten Servern und Diensteanbietern, als Kunden aufgeteilt. Kunden und Server kommunizieren häufig über ein Computernetz auf getrennter Hardware, aber sowohl Kunden als auch Server können sich im selben System aufhalten. Ein Server-Auslauf betreibt ein oder mehrere Server-Programme, die ihre Ressourcen mit Kunden teilen. Ein Kunde teilt in der Regel keine seiner Ressourcen, aber er verlangt Inhalte oder Dienstleistungen von einem Server. Kunden starten daher Kommunikationssitzungen mit Servern, die auf neue Anfragen warten. Beispiele für Computeranwendungen, die das Modell des Kunden nutzen, sind E-Mail, Netzdruck und das World Wide Web. Rolle von Kunden und Server Kennzeichnend für den Kunden-Server ist die Beziehung von Kooperationsprogrammen in einem Antrag. Die Server-Komponente bietet eine Funktion oder eine Dienstleistung an einen oder viele Kunden, die Anträge auf solche Dienste stellen. Server werden von den angebotenen Diensten klassifiziert. Beispielsweise bedient ein Web-Server Web-Seiten und ein Dateiserver Computerdateien. Eine gemeinsame Ressource kann eine der Software und elektronischen Komponenten des Servers sein, von Programmen und Daten bis zu Prozessoren und Speichergeräten. Die gemeinsame Nutzung der Ressourcen eines Servers ist ein Service. Ob ein Computer ein Kunde, ein Server oder beides ist, hängt von der Art der Anwendung ab, die die Servicefunktionen erfordert. Ein einziger Computer kann zum Beispiel Web-Server und Server-Software gleichzeitig betreiben, um unterschiedliche Daten für Kunden zu verwenden, die verschiedene Arten von Anfragen machen. Kundensoftware kann auch mit Server-Software im selben Computer kommunizieren. Kommunikation zwischen Servern, wie z.B. mit synchronisierten Daten, wird manchmal als inter-Server oder Server-to-Server-Kommunikation bezeichnet. Kunden- und Serverkommunikation allgemein , ein Service ist eine abstrakte Nutzung von Computerressourcen, und ein Kunde muss sich nicht mit der Frage befassen, wie der Server während der Erfüllung des Antrags und der Reaktion funktioniert. Nur der Kunde muss die Antwort auf das bekannte Anwendungsprotokoll verstehen, d.h. den Inhalt und die Formatierung der Daten für den gewünschten Dienst. Kunden und Server tauschen Nachrichten in einem Anfrage-Reaktionsmuster aus. Der Kunde schickt einen Antrag und der Server gibt eine Antwort. Dieser Austausch von Nachrichten ist ein Beispiel für die interprozessale Kommunikation. Um zu kommunizieren, müssen die Computer eine gemeinsame Sprache haben, und sie müssen Regeln befolgen, damit sowohl der Kunde als auch der Server wissen, was er erwartet. Sprache und Kommunikation sind in einem Kommunikationsprotokoll definiert. Alle Protokolle arbeiten in der Anwendungsschicht. In dem Antragsschichtprotokoll werden die Grundzüge des Dialogs festgelegt. Um den Datenaustausch noch weiter zu formalisieren, kann der Server eine Anwendungsschnittstelle (API) durchführen. API ist eine abstrakte Schicht für den Zugang zu einem Dienst. Indem sie die Kommunikation auf ein bestimmtes Content-Format beschränkt, erleichtert sie die Parsierung. Indem er den Zugriff nutzt, erleichtert er den plattformübergreifenden Datenaustausch. Kurzfristig kann ein Server Anfragen von vielen verschiedenen Kunden erhalten. Ein Computer kann nur zu einem bestimmten Zeitpunkt eine begrenzte Anzahl von Aufgaben ausführen und stützt sich auf ein Planungssystem, um die Anträge von Kunden auf Berücksichtigung zu priorisieren. Um Missbrauch zu verhindern und die Verfügbarkeit zu maximieren, kann die Server-Software die Verfügbarkeit auf Kunden beschränken. Durch die Überlastung von Service-Angriffen soll die Verpflichtung eines Servers genutzt werden, Anfragen zu verarbeiten, indem es mit überhöhten Abrufsätzen überlastet. Verschlüsselung sollte angewendet werden, wenn sensible Informationen zwischen dem Kunden und dem Server mitgeteilt werden. Beispiel Wenn ein Bankkunden Online-Banking-Dienste mit einem Webbrowser (der Kunde) in Anspruch nimmt, leitet der Kunde eine Anfrage an den Web-Server der Bank ein. Informationen des Kunden können in einer Datenbank gespeichert werden, und der Web-Server nutzt den Server als Kunden. Ein Antragsserver interpretiert die zurückgeschickten Daten durch die Anwendung der Geschäftslogik der Bank und stellt den Output auf den Web-Server bereit. Letztendlich zieht der Webserver das Ergebnis für die Anzeige. In jedem Schritt dieser Sequenz des Kunden-Server-Nachrichtenaustauschs, eines Computerprozesses ein Ersuchen und Renditedaten. Dies ist das fragwürdige Kommunikationsmuster. Wenn alle Anträge erfüllt werden, ist die Sequenz vollständig, und der Webbrowser stellt den Kunden die Daten vor. Dieses Beispiel veranschaulicht ein Mustermuster, das auf das Modell des Kunden-Servers anwendbar ist: die Trennung der Bedenken. Geschichte Eine frühzeitige Form von Kunden-Server-Architektur ist ein entlegener Jobeintritt, der mindestens dem OS/360 (angekündigt 1964), in dem der Antrag auf Arbeitssuche gestellt wurde, und die Antwort war das Ergebnis. In den 60er- und 1970er Jahren verwendete der Kunde-Server-Modell, während Computerwissenschaftler, die ARPANET (auf dem Bachelor-Forschungsinstitut) aufbauen, die Bedingungen für Server-Aufnahme (oder Bedienungsbetrieb) und Benutzer (oder Verwendungs-Aufnahme) verwendet haben und die in den frühen Dokumenten RFC 5 und RFC 4 erscheinen. Diese Verwendung wurde Mitte der siebziger Jahre bei Xerox PARC fortgesetzt. Ein Kontext, in dem Forscher diese Bedingungen verwendet haben, war in der Gestaltung einer Programmiersprache mit Computernetzen „Decode-Encode Language“ (DEL). Zweck dieser Sprache war es, die Befehle eines Computers (der Nutzer) zu akzeptieren, der dem Benutzer die Statusberichte zurückgeben würde, da sie die Befehlssätze in Netzpackungen codiert. Ein anderer DEL-fähiger Computer, der Server-Aufnahme, erhielt die Pakete, entkoppelte sie und kehrten formatisierte Daten an den Benutzer-Aufnahmeort zurück. Ein DEL-Programm für den Benutzer erhielt die Ergebnisse, um dem Benutzer vorzulegen. Dies ist ein Kunden-Server-Transaktion. Entwicklung der DEL war erst 1969 angelaufen, das Jahr, in dem das Verteidigungsministerium der Vereinigten Staaten ARPANET (Vorstand des Internets) eingerichtet hat. Kunden-Aufnahme und Server-Host-Kunden und Server-Host haben subtly verschiedene Bedeutungen als Kunden und Server. Ein Gastgeber ist jeder Computer, der mit einem Netzwerk verbunden ist. Während die Wörter Server und Kunden entweder auf einen Computer oder auf ein Computerprogramm verweisen können, beziehen sich Server und Benutzer immer auf Computer. Der Gastgeber ist ein vielseitiger, multifunktioneller Computer; Kunden und Server sind nur Programme, die auf einem Host laufen. Im Kunden-Server-Modell ist ein Server wahrscheinlicher für die Aufgabe des Dienstes. Eine frühzeitige Nutzung des Wortkunden erfolgt in "Ausgleich von Daten aus der Funktion in einem Distributed-Dateisystem", ein Papier von Xerox PARC Computerwissenschaftler Howard Sturgis, James Mitchell und Jay Israel. Die Autoren sind vorsichtig, den Begriff für Leser zu definieren und zu erklären, dass sie ihn verwenden, um zwischen dem Benutzer und dem Benutzernetz Node (der Kunde) zu unterscheiden. Bis 1992 hatte der Wortserver in den allgemeinen Nenner aufgenommen. Zentralisierter Computer Das Kunden-Server-Modell verlangt nicht, dass Server-Aufnahmen mehr Ressourcen als Kunden-Aufnahmen haben müssen. Vielmehr ermöglicht es es jedem gängigen Computer, seine Fähigkeiten durch die Nutzung der gemeinsamen Ressourcen anderer Gastgeber auszuweiten. Zentralisiertes Rechensystem stellt jedoch eine große Menge an Ressourcen für eine kleine Anzahl von Computern bereit. Mehr Berechnungen werden von Kunden-Aufnahmen an die zentralen Computer geliefert, die einfacheren Kunden-Aufnahmen. Es stützt sich stark auf Netzressourcen (Server und Infrastruktur) für die Berechnung und Speicherung. Eine geschlechtslose Lasten selbst sein Betriebssystem vom Netz, und ein Computer-Terminal verfügt überhaupt kein Betriebssystem; es ist nur eine Input-/Output-Schnittstelle auf dem Server. Jedoch verfügt ein fetter Kunde, wie ein persönlicher Computer, über viele Ressourcen und stützt sich nicht auf einen Server für wesentliche Funktionen. Mikrocomputer sanken im Preis und stiegen in der Macht von den 1980er-Jahren bis Ende der 90er Jahre an, viele Organisationen überstiegen die Berechnung von zentralisierten Servern wie den wichtigsten Rahmen und Minicomputern auf Fettkunden. Mehr individuellere Kontrolle über Computerressourcen, aber komplizierter Informationstechnologiemanagement. In den 2000er Jahren reichten die Webanwendungen aus, um konkurrierende Anwendungenssoftware, die für eine spezifische Mikroarchitektur entwickelt wurden, auszuschöpfen. Diese Laufzeit, eine bezahlbarere Massenspeicherung und das Erfinden einer dienstleistungsorientierten Architektur waren zu den Faktoren, die zum Cloud-.-Trend der 2010er Jahre führten. Vergleich mit Peer-to-Peer-Architektur Neben dem Kunden-Server-Modell nutzen verteilte Rechenanwendungen oft die Anwendungsarchitektur von Peer-to-Peer (P2P). Der Server ist oft als zentralisiertes System konzipiert, das viele Kunden bedient. Rechenleistung, Speicher- und Speicheranforderungen eines Servers müssen in angemessener Weise an die erwartete Arbeitsbelastung angepasst werden. Lastausgleichs- und Nichtverbreitungssysteme werden häufig zur Größe des Servers über eine einzige physische Maschine eingesetzt. Lastausgleich ist definiert als die Methode und effiziente Verteilung des Netz- oder Anwendungsverkehrs über mehrere Server im Server-Betrieb. Jeder Lastbilanzr liegt zwischen Kundengeräten und Backend-Servern, erhält und verteilt auf alle verfügbaren Server, die sie erfüllen können. In einem Peer-to-Peer-Netz bündeln zwei oder mehr Computer (Peers) ihre Ressourcen und kommunizieren in einem dezentralen System. Peers sind coequal oder rüsten Knoten in einem nicht-hierarchischen Netzwerk. Anders als Kunden in einem Kunden-Server oder Kunden-que-Kundennetz kommunizieren Peers direkt. In Peer-to-Peer-Netzwerken kann ein Algorithmus im Protokoll von Peer-to-Peer-Kommunikationsbilanzen und sogar Peers mit bescheidenen Ressourcen helfen, die Last zu teilen. Kann ein Node nicht verfügbar werden, bleiben seine gemeinsamen Ressourcen solange verfügbar, wie andere Peers sie anbieten. Idealerweise muss ein Peer keine hohe Verfügbarkeit erzielen, weil andere, entlassene Peers für jede Ressourcenabfallzeit sorgen; da die Verfügbarkeit und die Belastungskapazität von Peers ändern, werden die Anträge auf Protokollüberweisungen gestellt. Kunden-Server und Master-slave gelten als Unterkategorien der verteilten Peer-to-Peer-Systeme. Siehe auch: