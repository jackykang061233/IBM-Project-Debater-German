In der Kryptographie werden Schlüsseltechniken verwendet, um einen möglicherweise schwachen Schlüssel zu machen, in der Regel ein Passwort oder Passphrase, mehr Sicherheit gegen einen blutigen Angriff, indem die Ressourcen (Zeit und möglicherweise Raum) erhöht werden, um jeden möglichen Schlüssel zu testen. Kennzeichen oder Passphrasen, die von Menschen hergestellt werden, sind oft kurz oder vorhersehbar genug, um das Manipulationsrisiko zu ermöglichen, und der Schlüsselbereich zielt darauf ab, solche Angriffe schwieriger zu machen, indem ein grundlegender Schritt des Versuchs eines einzigen Passwortkandidaten gemacht wird. Kernbereiche verbessern auch die Sicherheit in einigen wirklichen Anwendungen, in denen die Schlüssellänge eingeschränkt wurde, indem sie eine längere wichtige Länge aus der Perspektive eines blutigen Anschlagers ziehen. Es gibt mehrere Möglichkeiten, Schlüsselbereiche auszuführen. Ein Weg ist die Anwendung einer Kryptographiefunktion oder eines Blocks Zirpher in einem Teilnehmeranschluss. In Anwendungen, in denen der Schlüssel für eine Zirpher verwendet wird, kann der Schlüsselplan in der Peripherie geändert werden, damit er eine bestimmte Zeitspanne erhält. Ein weiterer Weg ist die Nutzung kryptographischer Funktionen, die große Speicheranforderungen haben – dies kann wirksam bei frustrierenden Angriffen durch speichergebundene Adversoren sein. Prozess Key reichende Algorithmen hängen von einem Algorithmus ab, der einen Input-Schlüssel erhält und dann erhebliche Anstrengungen zur Erzielung einer gestreckten Zirpher (im Folgenden ein verstärkter Schlüssel) zur Abwanderung von Randomität und längerer Schlüssellänge ausschließt. Der Algorithmus muss keine bekannte Kurzform haben, so dass der effizienteste Weg, um den Input und die Zirpher zu beziehen, darin besteht, den Schlüsselbereich des Algorithmus selbst zu wiederholen. Mit diesem Kompels-Blutte-Angriffer sollen die gleichen Anstrengungen für jeden Versuch unternommen werden. Kommt diese zusätzliche Anstrengung im Vergleich zu einer blutigen Schlüsselsuche aller Schlüssel mit einer bestimmten Schlüssellänge, so kann der Inputschlüssel nach derselben Länge beschrieben werden. Kernausdehnung gibt einen Angriffsgegner mit zwei Optionen: Versuch möglicher Kombinationen des verstärkten Schlüssels, aber dies ist unwiderruflich, wenn der erweiterte Schlüssel ausreichend lange und unvorhersehbar ist (ii.e., der Algorithmus-Abfall ist ausreichend, dass der Angriffsgegner den gesamten gestreckten Schlüsselraum testen muss) mögliche Kombinationen des schwächeren anfänglichen Schlüssels, die möglicherweise mit einem Wörterbuch-Angriff beginnen, wenn der ursprüngliche Schlüssel ein Passwort oder ein Passiv ist, aber der zusätzliche Aufwand für jeden Versuch könnte den Angriff unwirtschaftliche Kosten und Gedächtnis übersteigen. Wenn der Angriffsgegner die gleiche Klasse von Hardware wie der Nutzer benutzt, wird jede Ermutung die gleiche Zeit nehmen, um zu verarbeiten, wie er den Nutzer (z.B. ein zweites). Selbst wenn der Angriffsgegner viel mehr Rechenressourcen als der Nutzer hat, wird die Schlüsselspanne den Angriffsgegner nach wie vor verlangsamen und die Nutzung des Systems für einen rechtmäßigen Benutzer nicht ernsthaft beeinträchtigen. Dies ist, weil der Computer des Benutzers nur die gestreckte Funktion berechnen muss, sobald der Nutzer sein Passwort einnimmt, während der Anschlager ihn für jeden Fall berechnen muss. Dieser Prozess ändert nicht die ursprüngliche raumtropy. Der Schlüssel, der den Algorithmus ausdehnt, ist deterministisch und ermöglicht einen schwachen Input, um immer denselben erweiterten Schlüssel zu schaffen, aber so den verstärkten Schlüssel auf keine möglichen Kombinationen zu beschränken als die Ausgangsfläche. Infolgedessen ist dieser Anschlag weiterhin anfällig, wenn ungeschützt gegen bestimmte Zeitabschwünge, wie die Entwicklung von Regenbogentabellen, um mehrere Fälle des erweiterten Schlüsselraums parallel zu behandeln (effektiv eine kurze Verfolgung, um den Algorithmus zu wiederholen). Aus diesem Grund wird der Schlüsselbereich oft mit Salz kombiniert. Hash-basierte viele Bibliotheken bieten Funktionen an, die im Rahmen ihrer Funktion Schlüsselbereiche darstellen; siehe crypt(3) für ein Beispiel. PBKDF2 ist für die Erstellung eines Verschlüsselungsschlüssels von einem Passwort und nicht notwendigerweise für die PBKDF2. PBKDF2 kann sowohl für den Fall verwendet werden, dass die Zahl der Outputs niedriger ist als der in PBKDF2, der in der Regel SHA-2 (bis zu 512 Bits) verwendet wird oder als Verschlüsselungsschlüssel verwendet wird, um statische Daten zu verschlüsseln. Stärke und Zeit Diese Beispiele gehen davon aus, dass ein persönlicher Computer etwa 65.000 SHA-1-Herstellungen in einer Sekunde tun kann. So kann ein Programm, das Schlüsselbereiche nutzt, 65.000 Runden von Asche verwenden und den Nutzer für die meisten Sekunde verzögern. Hinweis darauf, dass ab Juli 2019 mehr als 10 Mrd USD SHA-1-Herstellungseinheiten in einem zweiten Schritt durchführen können. Prüfung eines Test-Passworts oder Passphrase erfordert in der Regel einen Hash-Betrieb. Wenn jedoch der Schlüsselbereich verwendet wurde, muss der Angriffsgegner einen verstärkten Schlüssel für jeden von ihnen getesteten Schlüssel berechnen, d. h. es gibt 65.000 Asche, pro Test zu berechnen. Dies erhöht die Arbeitsbelastung des Antragstellers um einen Faktor von 65.000 etwa 216, was bedeutet, dass der verstärkte Schlüssel etwa 16 zusätzliche Bits in der Schlüsselstärke wert ist. Moores Recht behauptet, dass Computergeschwindigkeiten etwa alle 1,5 Jahre verdoppelt. Nach dieser Annahme ist jedes 1,5 Jahre ein weiterer Teil der Schlüsselstärke plausibel brut-forcierbar. Dies bedeutet, dass 16 zusätzliche Teile der Stärke rund 16 x1.5= 24 Jahre später in Angriff genommen werden, aber es bedeutet auch, dass die Anzahl der Schlüsselbereiche, die ein System verwenden, etwa alle 1,5 Jahre verdoppelt werden sollte, um dasselbe Sicherheitsniveau zu erhalten (da die meisten Schlüssel sicherer sind als notwendig, werden Systeme, die eine konsequente deterministische Schlüsselgeneration erfordern, die Zahl der in Schlüsselbereichen verwendeten Iterationsarten wahrscheinlich nicht aktualisieren. In einem solchen Fall sollte der Designer darüber nachdenken, wie lange sie das Schlüsselentfernungssystem unauflösen möchten und für die Lebensdauer des Systems eine angemessene Zahl von Aschen wählen können. CPU-bound-Güterfunktionen sind nach wie vor anfällig für die Umsetzung von Hardware. solche Umsetzungen von SHA-1 gibt es nur wenige als 5.000 Tore und 400 Uhrzyklen. Mehr Millionen Tor FPGAs, die weniger als 100 % kosten, kann ein Angriffer für rund 5000 $ einen voll integrierten Hardware-Krektor bauen. Ein solches Design, das mit 100 MHz versehen ist, kann etwa 300.000 Schlüssel/z testen. Der Anschlager ist frei, einen guten Preis/Geschwindigkeits Kompromiss zu wählen, z.B. eine 150.000 Schlüssel/zweites Design für 2500 $. Der Schlüssel, der den Angriffsgegner in einer solchen Situation noch schwächt, wäre in der Lage, 300.000÷216  4.5 4,578 Schlüssel/z zu versuchen. Um gegen den Hardware-Ansatz vorzugehen, wurden kryptographische Funktionen entwickelt. Dieser Zugang zu großen Speichermengen in unvorhersehbarer Weise, so dass es ineffizient ist. Da große Mengen von geringem spätem Gedächtnis teuer sind, ist ein Angriffsmann deutlich abschreckend. Geschichte Im Jahr 1978 wurde die erste absichtlich langsame, passivation basierende Schlüsselableitungsfunktion CRYPT von Robert Morris zur Verschlüsselung von Microsoft-Passworten beschrieben. Es nutzte eine Iterationsrate von 25, ein 12-bit-Salz und eine Variante von DES als Teilfunktion. (DES) wurde in einem Versuch vermieden, Angriffen mit Standard DES Hardware zu verfälschen.) Kennzeichen waren auf maximal acht ASCII-Zeichen beschränkt. Obwohl es für seine Zeit ein großer Fortschritt war, wird CRYPT(3) jetzt als unzureichend angesehen. Die für die PDP-11-Zeit konzipierte Iteration ist zu niedrig, 12 Bits Salz ist eine Unannehmlichkeiten, aber nicht aufhören vorgeworfene pädagogische Angriffe, und die 8 Charaktergrenze verhindert den Einsatz stärkerer Passphrasen. moderne, wortbasierte Schlüsselableitungsfunktionen wie PBKDF2, verwenden einen Kryptografen, wie SHA-2, ein längeres Salz (z.B. 64 Bits) und eine hohe Iteration. Das US-amerikanische Institut für Normen und Technologie (NIST) empfiehlt eine Mindestanzahl von 10.000. „Für besonders kritische Schlüssel oder für sehr leistungsfähige Systeme oder Systeme, in denen die Benutzerfreundlichkeit nicht kritisch ist, kann eine Iterationsrate von 10 000 000 EUR angemessen sein.“ Im Jahr 2009 wurde ein speicherintensiver Schlüsselkonsolidierungsgorithmus, scrypt, mit der Absicht eingeführt, die Verwendung von kundenspezifischen, hoch parallelen Hardware zur Beschleunigung der Schlüsseltests zu beschränken. Im Jahr 2013 wurde ein Passwort Hashing-Wettbewerb abgehalten, um einen verbesserten Schlüsselbereich zu wählen, der Angriffen von Grafikverarbeitern und spezieller Zweck-Hardware widerstehen würde. Gewinner, Carran2, wurde im Juli 2015 ausgewählt. Manche Systeme, die Schlüsselbereiche, aber nicht alle CD-Verschlüsselungssoftware verwenden (siehe Vergleich der Verschlüsselungssoftware): 7-Zip Apache .htpasswd APR1 und OpenSSL verwenden 1000 Runden von MD5 Schlüsselbereichen. KeePass und KeePassXC, Open-Source-Passwortmanager. Im Jahr 2020 verwendet die neueste Version mit Standard 1 zweite wichtige Verzögerung. Software und andere IT-ähnliche Systeme bieten SHAcrypt-Modus an, die 5000 SHA256 oder SHA512hash Iterations-Standards mit einem Minimum von 1000 und maximal 999.999 erfüllen. Passwort Safe Open-Source-Passwortmanager. PGP, GPG Verschlüsselungssoftware. GPG-Standards: 65536 mal. Wi-Fi-Schutzzugang (WPA und WPA2) drahtlose Verschlüsselungsprotokolle im persönlichen Modus PBKDF2 mit 4096 Iterationsarten.(WPA3 verwendet Simultaneous Authentifizierung von Gleichstellungsansprüchen, die das Passwort nicht ausstellen. Siehe auch die Schlüsselableitungsfunktion – häufig verwendet Schlüsselbereiche PBKDF2, bcrypt, scrypt, Argon2 – weit verbreitet verwendete Schlüsselbereiche von Algorithmen Hash – eine etwas verwandte Methode. Hash- Kette Links