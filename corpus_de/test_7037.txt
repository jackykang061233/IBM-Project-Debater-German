Mobile App-Entwicklung ist der Akt oder Prozess, mit dem eine mobile App für mobile Geräte entwickelt wird, wie persönliche digitale Assistenten, digitale Mitarbeiter des Unternehmens oder Mobiltelefone. Diese Software-Anwendungen sind auf mobilen Geräten, wie einem Smartphone oder Tablet-Computer, ausgeführt. Diese Anwendungen können auf Telefonen während der Herstellungsplattformen vorinstalliert oder als Web-Anwendungen mittels server- oder clientseitiger Verarbeitung (z.B. JavaScript) bereitgestellt werden, um eine anwendungsartige Erfahrung innerhalb eines Webbrowsers bereitzustellen. Anwendungs-Software-Entwickler müssen auch eine lange Reihe von Bildschirmgrößen, Hardware-Spezifikationen und Konfigurationen aufgrund eines intensiven Wettbewerbs in mobiler Software und Änderungen in jeder der Plattformen berücksichtigen. Die mobile App-Entwicklung hat stetig zugenommen, in Einnahmen und Jobs erstellt. Ein 2013 Analyst-Bericht Schätzungen gibt es 529.000 direkte App-Wirtschaft Jobs innerhalb der EU dann 28 Mitglieder (einschließlich Großbritannien), 60 Prozent davon sind mobile App-Entwickler. Im Rahmen des Entwicklungsprozesses ist die mobile Benutzeroberfläche (UI)-Design auch bei der Erstellung mobiler Apps von wesentlicher Bedeutung. Mobile UI betrachtet Einschränkungen, Kontexte, Bildschirm, Eingabe und Mobilität als Konturen für Design. Der Benutzer ist oft der Fokus der Interaktion mit seinem Gerät, und die Schnittstelle beinhaltet Komponenten von Hardware und Software. Die Benutzereingabe ermöglicht es den Benutzern, ein System zu manipulieren, und die Ausgabe des Geräts ermöglicht es dem System, die Auswirkungen der Manipulation der Benutzer anzuzeigen. Mobile UI Design Zwänge umfassen begrenzte Aufmerksamkeit und Formfaktoren, wie die Bildschirmgröße eines mobilen Geräts für die Hand(en). Mobile UI-Kontexte signalisieren Cues aus Benutzeraktivität, wie z.B. Ort und Terminierung, die aus Benutzerinteraktionen innerhalb einer mobilen App angezeigt werden können. Insgesamt ist das Ziel des mobilen UI-Designs vor allem für eine verständliche, benutzerfreundliche Schnittstelle. Das UI von mobilen Apps sollte: die begrenzte Aufmerksamkeit der Nutzer berücksichtigen, Tastenanschläge minimieren und mit einem Minimum an Funktionen aufgabenorientiert sein. Diese Funktionalität wird von mobilen Anwendungsplattformen oder integrierten Entwicklungsumgebungen (IDEs) unterstützt. Mobile UIs oder Frontends verlassen sich auf mobile Back-Ends, um den Zugang zu Unternehmenssystemen zu unterstützen. Das mobile Back-End erleichtert Daten-Routing, Sicherheit, Authentisierung, Autorisierung, Arbeiten Off-Line und Service-Orchestrierung. Diese Funktionalität wird durch eine Mischung von Middleware-Komponenten unterstützt, einschließlich mobiler App-Server, mobiler Backend als Service (MBaaS) und serviceorientierter Architektur (SOA)-Infrastruktur. Plattform Die für die Entwicklung, Bereitstellung und Verwaltung mobiler Apps benötigten Plattformorganisationen bestehen aus vielen Komponenten und Werkzeugen, die es einem Entwickler ermöglichen, Anwendungen in die Zielplattformumgebung zu schreiben, zu testen und einzusetzen. Front-End-Entwicklungstools Front-end-Entwicklungstools konzentrieren sich auf die Benutzeroberfläche und Benutzererfahrung (UI-UX) und bieten folgende Fähigkeiten: UI-Design-Tools SDKs zum Zugriff auf Gerätefunktionen Cross-Plattform-Unterkünfte/supportNotable-Tools sind unten aufgeführt. Back-End Server Backend-Werkzeuge holen ab, wo die Frontend-Werkzeuge abfahren und bieten eine Reihe von wiederverwendbaren Dienstleistungen, die zentral verwaltet und kontrolliert werden und die folgenden Fähigkeiten bieten: Integration mit Backend-Systemen Benutzerauthentifizierungs-Autorisierung Datendienste Wiederverwendbare Geschäftslogik Verfügbare Werkzeuge sind unten aufgeführt. Sicherheits-Add-on-Schichten Damit Ihr eigenes Gerät (BYOD) in mehr Unternehmen zur Norm wird, benötigen IT-Abteilungen oft Stop-Gap, taktische Lösungen, die bestehende Apps, Telefone und Plattform-Komponenten aufschichten. Funktionen umfassen App-Verschlüsselung für die Sicherheitsdatenverschlüsselung Client-Aktionen Reporting und Statistik Systemsoftware Viele System-Level-Komponenten werden benötigt, um eine funktionierende Plattform für die Entwicklung mobiler Apps zu haben. Kriterien für die Auswahl einer Entwicklungsplattform enthalten in der Regel die Zielplattformen, bestehende Infrastruktur- und Entwicklungskompetenzen. Bei der Ausrichtung von mehr als einer Plattform mit plattformübergreifender Entwicklung ist es auch wichtig, die Auswirkungen des Werkzeugs auf die Nutzererfahrung zu berücksichtigen. Performance ist ein weiteres wichtiges Kriterium, da die Forschung auf mobilen Apps eine starke Korrelation zwischen Anwendungsleistung und Nutzerzufriedenheit anzeigt. Neben Performance und anderen Kriterien kann die Verfügbarkeit der Technologie und die Anforderung des Projekts die Entwicklung zwischen nativen und plattformübergreifenden Umgebungen vorantreiben. Um die Wahl zwischen nativen und plattformübergreifenden Umgebungen zu unterstützen, wurden einige Richtlinien und Benchmarks veröffentlicht. Typischerweise sind plattformübergreifende Umgebungen über mehrere Plattformen wiederverwendbar, die einen nativen Container unter Verwendung von HTML, CSS und JavaScript für die Benutzeroberfläche nutzen. Im Gegensatz dazu werden native Umgebungen für jede dieser Umgebungen auf eine Plattform ausgerichtet. Zum Beispiel, Android-Entwicklung in der Eclipse IDE mit Android Developer Tools (ADT) Plugins, Apple iOS-Entwicklung geschieht mit Xcode IDE mit Ziel-C und/oder Swift, Windows und BlackBerry haben jeweils eigene Entwicklungsumgebungen. Mobile App-Tests Mobile Anwendungen werden zunächst in der Entwicklungsumgebung mit Emulatoren getestet und später einer Feldprüfung unterzogen. Emulatoren bieten eine kostengünstige Möglichkeit, Anwendungen auf Mobiltelefonen zu testen, auf die Entwickler möglicherweise keinen physischen Zugriff haben. Im Folgenden sind Beispiele für Werkzeuge, die zum Testen der Anwendung auf den beliebtesten mobilen Betriebssystemen verwendet werden. Google Android Emulator - ein Android-Emulator, der auf einem Windows-PC als eigenständige App ausgeführt wird, ohne das komplette und komplexe Android-SDK herunterladen und installieren zu müssen. Es kann installiert werden und Android-kompatible Apps können auf ihm getestet werden. Der offizielle Android SDK Emulator - ein Mobilgerät-Emulator, der alle Hardware- und Software-Features eines typischen mobilen Geräts (ohne Anrufe) mimiert. TestiPhone - ein Web-Browser-basierter Simulator für schnelle Tests iPhone Web-Anwendungen. Dieses Tool wurde getestet und funktioniert mit Internet Explorer 7, Firefox 2 und Safari 3.iPhoney - gibt eine pixel-genaue Web-Browsing-Umgebung und es wird von Safari betrieben. Es kann während der Entwicklung Web-Seiten für das iPhone verwendet werden. Es ist kein iPhone-Simulator, sondern ist für Web-Entwickler konzipiert, die 320 von 480 (oder 480 von 320) Websites für die Verwendung mit iPhone erstellen möchten. I Phoney läuft nur auf OS X 10.4.7 oder später. BlackBerry Simulator - Es gibt eine Vielzahl von offiziellen BlackBerry Simulatoren zur Verfügung, um die Funktionalität der aktuellen BlackBerry Produkte zu emulieren und zu testen, wie die Gerätesoftware, Bildschirm, Tastatur und Trackwheel mit Anwendung arbeiten. Windows UI Automation - Um Anwendungen zu testen, die die Microsoft UI Automation Technologie verwenden, benötigt es Windows Automation API 3.0. Es wird unter Windows 7, Windows Server 2008 R2 und späteren Versionen von Windows vorinstalliert. Auf anderen Betriebssystemen können Sie unter Windows Update installieren oder von der Microsoft-Website herunterladen. MobiOne Developer - eine mobile Web-integrierte Entwicklungsumgebung (IDE) für Windows, die Entwickler dabei unterstützt, mobile Web-Anwendungen auf Geräte wie iPhone, BlackBerry, Android und den Palm Pre.MobiOne Developer zu kodieren, zu testen, zu debuggen, zu verpacken und zu implementieren, wurde Ende des Lebens bis Ende 2014 offiziell erklärt. Tools umfassen EggPlant: Ein GUI-basiertes automatisiertes Testtool für mobile App über alle Betriebssysteme und Geräte hinweg. Ranorex: Testautomatisierungstools für mobile, Web- und Desktop-Apps. Testdroid: Reale mobile Geräte und Testautomatisierungstools zum Testen von mobilen und Web-Apps. Patente Viele Patentanmeldungen stehen für neue Handy-Apps an. Die meisten davon sind in den technologischen Bereichen Geschäftsmethoden, Datenbankmanagement, Datenübertragung und Bedienoberfläche. Am 31. Mai 2011 behauptete Lodsys zwei seiner vier Patente: US 7,620,565 ("das "565 Patent") auf einem "kundenbasierten Design-Modul" und US-Patent Nr. 7,222,078 ("das "078 Patent") auf "Methoden und Systeme zum Sammeln von Informationen von Einheiten eines Commodity Across a Network" gegen folgende Anwendungsentwickler: Combay Iconfactory Illusion Labs Shovelmate Quickoffice Richard Shinderman of Brooklyn, New York Wulven Game Studios von Hanoi, Vietnam Siehe auch == Referenzen ==