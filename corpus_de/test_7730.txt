Ein Mikrocontroller (MCU für Mikrocontroller-Einheit) ist ein kleiner Computer auf einem einzigen Metalloxid-Halbleiter (MOS) integrierten Schaltkreis (IC) Chip. Ein Mikrocontroller enthält eine oder mehrere CPUs (Prozessorkerne) zusammen mit Speicher und programmierbaren Ein-/Ausgabe-Peripheriegeräten. Programmspeicher in Form von ferroelektrischem RAM, NOR Flash oder OTP ROM ist auch oft auf Chip, sowie eine kleine Menge RAM enthalten. Mikrocontroller sind für Embedded-Anwendungen konzipiert, im Gegensatz zu den Mikroprozessoren, die in Personalcomputern oder anderen allgemeinen Anwendungsbereichen eingesetzt werden, die aus verschiedenen diskreten Chips bestehen. In der modernen Terminologie ist ein Mikrocontroller ähnlich, aber weniger anspruchsvoll als ein System auf einem Chip (SoC). Ein SoC kann einen Mikrocontroller als eine seiner Komponenten enthalten, integriert ihn aber in der Regel mit erweiterten Peripheriegeräten wie einer Grafikverarbeitungseinheit (GPU,) einem Wi-Fi-Modul oder einem oder mehreren Coprozessoren. Mikrocontroller werden in automatisch gesteuerten Produkten und Geräten eingesetzt, wie z.B. Automotorsteuerungen, implantierbare medizinische Geräte, Fernbedienungen, Büromaschinen, Geräte, Elektrowerkzeuge, Spielzeuge und andere eingebettete Systeme. Durch die Verringerung der Größe und Kosten im Vergleich zu einer Konstruktion, die einen separaten Mikroprozessor, Speicher und Ein-/Ausgabeeinrichtungen verwendet, machen Mikrocontroller es wirtschaftlich, noch mehr Geräte und Prozesse digital zu steuern. Mischsignal-Mikrocontroller sind häufig, die Integration von analogen Komponenten, die zur Steuerung von nicht-digitalen elektronischen Systemen benötigt werden. Im Kontext des Internets der Dinge sind Mikrocontroller ein kostengünstiges und beliebtes Mittel zur Datenerfassung, Erfassung und Betätigung der physischen Welt als Kantengeräte. Einige Mikrocontroller können Vier-Bit-Worte verwenden und bei Frequenzen bis 4 kHz für geringen Stromverbrauch (einstellige Milliwatt oder Mikrowatt) arbeiten. Sie haben in der Regel die Möglichkeit, die Funktionalität zu behalten, während sie auf ein Ereignis wie Knopfdruck oder andere Unterbrechung warten; Stromverbrauch während des Schlafens (CPU-Uhr und die meisten Peripheriegeräte) kann nur Nanowatt sein, so dass viele von ihnen gut geeignet für langlebige Batterieanwendungen. Andere Mikrocontroller können leistungskritische Rollen bedienen, wo sie mehr wie ein digitaler Signalprozessor (DSP) mit höheren Taktgeschwindigkeiten und Stromverbrauch wirken müssen. Geschichte Hintergrund Die Herkunft sowohl des Mikroprozessors als auch des Mikrocontrollers läßt sich auf die Erfindung des auch als MOS-Transistors bekannten MOSFET (Metalloxid-Halbleiter-Feldeffekttransistor) zurückverfolgen. Es wurde 1959 von Mohamed M. Atalla und Dawon Kahng in Bell Labs erfunden und erstmals 1960 demonstriert. Im selben Jahr schlug Atalla das Konzept der MOS integrierten Schaltung vor, die ein integrierter Schaltungschip aus MOSFETs war. Bis 1964 hatten MOS-Chips höhere Transistordichte und geringere Fertigungskosten als bipolare Chips erreicht. MOS-Chips steigerten die Komplexität in einer von Moore's Gesetz vorhergesagten Rate weiter, was zu einer groß angelegten Integration (LSI) mit Hunderten von Transistoren auf einem einzigen MOS-Chip bis Ende der 1960er Jahre führte. Die Anwendung von MOS LSI-Chips auf die Berechnung war die Basis für die ersten Mikroprozessoren, da Ingenieure erkannten, dass ein vollständiger Computerprozessor auf einem einzigen MOS LSI-Chip enthalten sein könnte. Die ersten Multichip-Mikroprozessoren, die Four-Phase Systems AL1 1969 und die Garrett AiResearch MP944 1970 wurden mit mehreren MOS LSI-Chips entwickelt. Der erste Single-Chip-Mikroprozessor war der Intel 4004, der 1971 auf einem einzigen MOS LSI-Chip veröffentlicht wurde. Es wurde von Federico Faggin entwickelt, mit seiner Silizium-Gate-MOS-Technologie, zusammen mit Intel-Ingenieuren Marcian Hoff und Stan Mazor, und Busicom-Ingenieur Masatoshi Shima. Es folgte der 4-Bit Intel 4040, der 8-Bit Intel 8008 und der 8-Bit Intel 8080. Alle diese Prozessoren benötigten mehrere externe Chips, um ein Arbeitssystem zu implementieren, einschließlich Speicher und periphere Schnittstellenchips. Infolgedessen lagen die gesamten Systemkosten bei mehreren hundert (1970er US) Dollar, was es unmöglich macht, kleine Geräte wirtschaftlich zu computerisieren. MOS Technology führte Sub-$100 Mikroprozessoren, die 6501 und 6502, mit dem Hauptziel, dieses wirtschaftliche Hindernis anzusprechen, aber diese Mikroprozessoren benötigte noch externe Unterstützung, Speicher und periphere Chips, die die Gesamtsystemkosten in den Hunderten von Dollar gehalten. Entwicklung Ein Buch würdigt die TI Ingenieure Gary Boone und Michael Cochran mit der erfolgreichen Gründung des ersten Mikrocontrollers im Jahr 1971. Das Ergebnis ihrer Arbeit war das 1974 im Handel erhältliche TMS 1000. Es kombinierte nur Lesespeicher, Schreib-/Lesespeicher, Prozessor und Uhr auf einem Chip und wurde auf eingebettete Systeme ausgerichtet. In den frühen 70er Jahren begannen japanische Elektronikhersteller mit der Herstellung von Mikrocontrollern für Automobile, darunter 4-Bit-MCUs für In-Auto-Unterhaltung, automatische Abstreifer, elektronische Schlösser und Armaturenbrett und 8-Bit-MCUs für die Motorsteuerung. Als Reaktion auf die Existenz des Single-Chip TMS 1000 entwickelte Intel ein Computersystem auf einem Chip, der für Steuerungsanwendungen optimiert ist, den Intel 8048, mit kommerziellen Teilen, die im Jahr 1977 zuerst verschiffen. Es kombinierte RAM und ROM auf demselben Chip mit einem Mikroprozessor. Unter zahlreichen Anwendungen würde dieser Chip schließlich seinen Weg in über eine Milliarde PC-Tastaturen finden. Damals erklärte Intels Präsident Luke J. Valenter, dass der Mikrocontroller eines der erfolgreichsten Produkte in der Unternehmensgeschichte sei, und er erweiterte das Budget des Mikrocontrollers um über 25%. Die meisten Mikrocontroller hatten zu diesem Zeitpunkt gleichzeitige Varianten. Man hatte EPROM Programmspeicher, mit einem transparenten Quarzfenster im Deckel der Verpackung, um es durch Belichtung mit ultraviolettem Licht zu löschen. Diese löschbaren Chips wurden oft zum Prototyping verwendet. Die andere Variante war entweder eine Maske programmiert ROM oder eine PROM-Variante, die nur einmal programmierbar war. Für letztere wurde manchmal die Bezeichnung OTP verwendet, für "einmal programmierbar". In einem OTP-Mikrocontroller war das PROM in der Regel identisch wie das EPROM, aber das Chippaket hatte kein Quarzfenster; weil es keinen Weg gab, das EPROM ultravioletten Licht zu entlarven, konnte es nicht gelöscht werden. Da die auslöschbaren Versionen Keramikpakete mit Quarzfenstern erforderten, waren sie wesentlich teurer als die OTP-Versionen, die in kostengünstigen opaken Kunststoffverpackungen hergestellt werden konnten. Für die löschbaren Varianten war anstelle des weniger teuren Glases Quarz für seine Transparenz gegenüber ultraviolettem Licht erforderlich, auf das Glas weitgehend undurchsichtig ist, aber der Hauptkostendifferenzierer war das Keramikpaket selbst. 1993 erlaubte die Einführung des EEPROM-Speichers, Mikrocontroller (anfangs mit dem Microchip PIC16C84) schnell ohne ein für EPROM benötigtes teures Paket elektrisch zu löschen, was sowohl eine schnelle Prototyping- als auch eine In-System-Programmierung ermöglicht. (EEPROM-Technologie war vor dieser Zeit verfügbar, aber die frühere EEPROM war teurer und weniger langlebig, so dass es für kostengünstige Massen-produzierte Mikrocontroller nicht geeignet.) Im selben Jahr führte Atmel den ersten Mikrocontroller mit Flash-Speicher ein, eine spezielle Art von EEPROM. Andere Unternehmen folgten schnell Anzug, mit beiden Speichertypen. Heutzutage sind Mikrocontroller günstig und leicht zugänglich für Hobbyisten, mit großen Online-Communitys um bestimmte Prozessoren. Volumen und Kosten 2002 waren rund 55% aller weltweit verkauften CPUs 8-Bit-Mikrocontroller und Mikroprozessoren. Mehr als zwei Milliarden 8-Bit-Mikrocontroller wurden 1997 verkauft und laut Semico wurden 2006 über vier Milliarden 8-Bit-Mikrocontroller verkauft. In letzter Zeit behauptete Semico, dass der MCU-Markt 2010 um 36,5% und 2011 um 12% gewachsen sei. Ein typisches Zuhause in einem entwickelten Land ist wahrscheinlich nur vier allgemeine Mikroprozessoren, aber etwa drei Dutzend Mikrocontroller. Ein typisches Mittelklasse-Auto hat etwa 30 Mikrocontroller. Sie finden sich auch in vielen elektrischen Geräten wie Waschmaschinen, Mikrowellenöfen und Telefonen. Historisch hat das 8-Bit-Segment den MCU-Markt dominiert [.] 16-Bit-Mikrocontroller wurde im Jahr 2011 zum größten MCU-Band, überholt 8-Bit-Geräte zum ersten Mal in diesem Jahr.][IC Insights glaubt, dass die Herstellung des MCU-Marktes in den nächsten fünf Jahren erhebliche Veränderungen erfährt, wobei 32-Bit-Geräte ständig einen größeren Anteil an Verkaufs- und Einheitsvolumen erfassen. Bis 2017 werden mit 32-Bit-MCUs 55% des Mikrocontroller-Verkaufs ausgerechnet.][Im Hinblick auf die Stückvolumen werden 32-Bit-MCUs 2017 für 38% der Mikrocontroller-Versandungen erwartet, während 16-Bit-Geräte 34% des Gesamtwerts ausmachen und 4-/8-Bit-Designs 28% der verkauften Einheiten prognostizieren. Der 32-Bit-MCU-Markt wird aufgrund der steigenden Nachfrage nach höheren Präzisionsniveaus in Embedded-Processing-Systemen und des Konnektivitätswachstums im Internet rasch wachsen. [...] In den nächsten Jahren sollen komplexe 32-Bit-MCUs über 25% der Verarbeitungsleistung in Fahrzeugen ausmachen. Kosten für die Herstellung können unter $0.10 pro Einheit. Die Kosten sind im Laufe der Zeit gepumpt, wobei die preiswertesten 8-Bit-Mikrocontroller für unter 0,03 USD im Jahr 2018 verfügbar sind, und einige 32-Bit-Mikrocontroller um US$1 für ähnliche Mengen. Im Jahr 2012, nach einer globalen Krise – einem schlimmsten jährlichen Umsatzrückgang und Erholung und durchschnittlichen Verkaufspreis im Vergleich zum Vorjahr um 17% – die größte Reduktion seit den 1980er Jahren – betrug der durchschnittliche Preis für einen Mikrocontroller US$0,88 $(0,69 für 4-/8-bit, $0,59 für 16-bit, $1,76 für 32-bit). 2012 lag der weltweite Umsatz von 8-Bit-Mikrocontrollern bei rund 4 Milliarden US-Dollar, während 4-Bit-Mikrocontroller auch einen erheblichen Umsatz verzeichneten. Im Jahr 2015 konnten 8-Bit-Mikrocontroller für $0.311 (1.000 Einheiten,) 16-Bit für $0.385 (1.000 Einheiten,) und 32-Bit für $0.378 (1.000 Einheiten, aber bei $0.35 für 5.000) gekauft werden. 2018 können 8-Bit-Mikrocontroller für $0.03, 16-bit für $0.393 (1.000 Einheiten, aber bei $0.563 für 100 oder $0.349 für volle Rolle von 2.000) und 32-Bit für $0.503 (1.000 Einheiten, aber bei $0.466 für 5.000) gekauft werden. Ein preiswerter 32-Bit-Mikrocontroller, in Einheiten von einem, kann für $0.891. Im Jahr 2018 sind die preisgünstigen Mikrocontroller über 2015 alle teurer (mit Inflation berechnet zwischen 2018 und 2015 Preise für diese spezifischen Einheiten) zu: der 8-Bit-Mikrocontroller kann für $0.319 (1.000 Einheiten) oder 2.6% höher gekauft werden, der 16-Bit für $0.464 (1.000 Einheiten) oder 21% höher, und der 32-Bit für $ 0.503 (1.00066, aber bei $0.4 Kleiner Computer Am 21. Juni 2018 wurde der "weltweit kleinste Computer" von der Universität Michigan bekannt gegeben. Das Gerät ist ein "0.04mm3 16n W drahtloses und batterieloses Sensorsystem mit integriertem Cortex-M0+ Prozessor und optischer Kommunikation für die zelluläre Temperaturmessung." Es "Messt nur 0,3 mm auf eine Seite – gewarnt von einem Reiskorn.[...] Neben dem RAM und der Photovoltaik verfügen die neuen Rechengeräte über Prozessoren und drahtlose Sender und Empfänger. Da sie zu klein sind, um herkömmliche Funkantennen zu haben, empfangen und übertragen sie Daten mit sichtbarem Licht. Eine Basisstation bietet Licht für Leistung und Programmierung und erhält die Daten." Das Gerät ist 1/10 der Größe von IBMs bisher beanspruchten Welt-Record-Größe-Computer von Monaten zurück im März 2018, die "kleiner als ein Korn von Salz", hat eine Million Transistoren, kostet weniger als $0.10 zu Herstellung, und, kombiniert mit Blockchain-Technologie, ist für Logistik und Krypto-Anchors"-digitale Fingerabdruck-Anwendungen bestimmt. Embedded Design Ein Mikrocontroller kann als eigenständiges System mit Prozessor, Speicher und Peripherie betrachtet werden und als eingebettetes System verwendet werden. Die meisten Mikrocontroller, die heute eingesetzt werden, sind in andere Maschinen wie Automobile, Telefone, Geräte und Peripheriegeräte für Computersysteme eingebettet. Während einige eingebettete Systeme sehr anspruchsvoll sind, haben viele minimale Anforderungen an Speicher und Programmlänge, ohne Betriebssystem und geringe Software-Komplexität. Typische Eingabe- und Ausgabegeräte umfassen Schalter, Relais, Magnete, LEDs, kleine oder benutzerdefinierte Flüssigkristallanzeigen, Hochfrequenzgeräte und Sensoren für Daten wie Temperatur, Feuchtigkeit, Lichtstand etc. Embedded-Systeme haben in der Regel keine Tastatur, Bildschirm, Festplatten, Drucker oder andere erkennbare I/O-Geräte eines persönlichen Computers und können keine menschlichen Interaktionsgeräte jeglicher Art. Interrupts Microcontroller müssen Echtzeit (vorhersehbare, aber nicht unbedingt schnelle) Antwort auf Ereignisse im eingebetteten System liefern, die sie steuern. Wenn bestimmte Ereignisse auftreten, kann ein Interrupt-System den Prozessor signalisieren, die Verarbeitung der aktuellen Befehlssequenz auszusetzen und eine Interrupt-Service-Routine (ISR, oder "Interrupt-Handler") zu beginnen, die jede auf der Quelle des Interrupts erforderliche Verarbeitung vor der Rückkehr in die ursprüngliche Befehlssequenz durchführt. Mögliche Interruptquellen sind geräteabhängig und beinhalten häufig Ereignisse wie einen internen Timer-Überlauf, der eine analoge zur digitalen Umwandlung abschließt, eine logische Pegeländerung an einem Eingang, beispielsweise von einem zu drückenden Knopf, und von einer Kommunikationsverbindung empfangene Daten. Wenn der Stromverbrauch wie bei Batteriegeräten wichtig ist, können Interrupts auch einen Mikrocontroller aus einem Low-Power-Schlaf-Zustand aufwecken, in dem der Prozessor gestoppt wird, bis er benötigt wird, um etwas durch ein peripheres Ereignis zu tun. Programme Typischerweise müssen Mikrocontrollerprogramme in den verfügbaren On-Chip-Speicher passen, da es teuer wäre, ein System mit externem, dehnbarem Speicher bereitzustellen. Compiler und Assembler werden verwendet, um sowohl hoch- als auch montagesprachliche Codes in einen kompakten Maschinencode zur Speicherung im Speicher des Mikrocontrollers umzuwandeln. Je nach Gerät kann es sich bei dem Programmspeicher um einen permanenten, eingelesenen Speicher handeln, der nur werksseitig programmiert werden kann, oder es kann sich um feldveränderbare Flash- oder auslöschbare Lesespeicher handeln. Hersteller haben oft spezielle Versionen ihrer Mikrocontroller produziert, um die Hardware- und Softwareentwicklung des Zielsystems zu unterstützen. Ursprünglich enthalten diese EPROM-Versionen, die ein Fenster auf der Oberseite des Geräts haben, durch das Programmspeicher durch ultraviolettes Licht gelöscht werden kann, bereit für die Neuprogrammierung nach einem Programm (burn) und Testzyklus. Seit 1998 sind EPROM-Versionen selten und wurden durch EEPROM und Flash ersetzt, die einfacher zu bedienen sind (können elektronisch gelöscht werden) und billiger zu fertigen sind. Andere Versionen können verfügbar sein, wenn das ROM als externes Gerät aufgerufen wird, anstatt als internes Speicher, die jedoch aufgrund der weit verbreiteten Verfügbarkeit von billigen Mikrocontroller Programmierern selten werden. Die Verwendung von feldprogrammierbaren Geräten auf einem Mikrocontroller kann eine Feldaktualisierung der Firmware erlauben oder spätere Werksrevisionen zu Produkten erlauben, die montiert, aber noch nicht versendet wurden. Der programmierbare Speicher reduziert auch die für den Einsatz eines neuen Produkts erforderliche Vorlaufzeit. Werden Hunderttausende von identischen Vorrichtungen benötigt, können die zum Zeitpunkt der Herstellung programmierten Teile wirtschaftlich sein. Diese "mask programmierten" Teile haben das Programm in der gleichen Weise wie die Logik des Chips gelegt gleichzeitig. Ein kundenspezifischer Mikrocontroller enthält einen Block der digitalen Logik, der für zusätzliche Verarbeitungsfähigkeit, Peripherie und Schnittstellen personalisiert werden kann, die an die Anforderungen der Anwendung angepasst sind. Ein Beispiel ist die AT91CAP von Atmel. Andere Mikrocontroller-Features Mikrocontroller enthalten in der Regel mehrere bis Dutzende von allgemeinen Zweck-Ein-/Ausgangspins (GPIO). GPIO-Pins sind Software konfigurierbar für einen Eingang oder einen Ausgangszustand. Wenn GPIO-Pins in einen Eingangszustand konfiguriert sind, werden diese häufig verwendet, um Sensoren oder externe Signale zu lesen. Im Ausgangszustand konfiguriert, können GPIO-Pins externe Geräte wie LEDs oder Motoren, oft indirekt, durch externe Leistungselektronik antreiben. Viele eingebettete Systeme müssen Sensoren lesen, die analoge Signale erzeugen. Dies ist der Zweck des Analog-Digital-Wandlers (ADC). Da Prozessoren zur Interpretation und Verarbeitung digitaler Daten, d.h. 1s und 0s, gebaut werden, können sie nichts mit den analogen Signalen tun, die von einem Gerät an ihn gesendet werden können. Der Analog-Digital-Wandler dient also dazu, die eingehenden Daten in eine Form umzuwandeln, die der Prozessor erkennen kann. Ein weniger häufiges Merkmal auf einigen Mikrocontrollern ist ein Digital-Analog-Wandler (DAC), der es dem Prozessor ermöglicht, analoge Signale oder Spannungspegel auszugeben. Neben den Umrichtern umfassen auch viele eingebettete Mikroprozessoren eine Vielzahl von Timern. Einer der häufigsten Timertypen ist der programmierbare Intervall-Timer (PIT). Ein PIT kann entweder von einem Wert auf Null oder bis zur Kapazität des Zählregisters abzählen, überlaufen auf Null. Sobald es Null erreicht, sendet es einen Interrupt an den Prozessor, der angibt, dass er das Zählen beendet hat. Dies ist nützlich für Geräte wie Thermostaten, die periodisch die Temperatur um sie herum testen, um zu sehen, ob sie die Klimaanlage einschalten müssen, die Heizung ein, usw. Ein dedizierter Pulsbreitenmodulation (PWM)-Block ermöglicht es der CPU, Stromwandler, Widerstandslasten, Motoren usw. zu steuern, ohne viele CPU-Ressourcen in engen Zeitschleifen zu verwenden. Ein universeller asynchroner Empfänger/Sender (UART)-Block ermöglicht es, Daten über eine serielle Leitung mit sehr geringer Belastung der CPU zu empfangen und zu übertragen. Dedizierte On-Chip-Hardware beinhaltet auch oft Fähigkeiten, mit anderen Geräten (Chips) in digitalen Formaten wie Inter-Integrated Circuit (I2C,) Serial Peripheral Interface (SPI,) Universal Serial Bus (USB,) und Ethernet zu kommunizieren. Höhere Integration Mikrocontroller können keine externe Adresse oder Datenbus implementieren, da sie RAM und nichtflüchtige Speicher auf demselben Chip wie die CPU integrieren. Mit weniger Pins kann der Chip in einem viel kleineren, billigeren Paket platziert werden. Die Integration des Speichers und anderer Peripheriegeräte auf einem einzigen Chip und die Prüfung mit einer Einheit erhöht die Kosten dieses Chips, führt aber oft zu verringerten Nettokosten des gesamten eingebetteten Systems. Auch wenn die Kosten einer CPU, die integrierte Peripheriegeräte hat, etwas größer sind als die Kosten einer CPU und externer Peripheriegeräte, mit weniger Chips in der Regel eine kleinere und billigere Leiterplatte erlaubt und die erforderliche Arbeit reduziert, die Leiterplatte zu montieren und zu testen, zusätzlich zur Tendenz, die Fehlerrate für die fertige Montage zu verringern. Ein Mikrocontroller ist eine einzige integrierte Schaltung, die im allgemeinen folgende Merkmale aufweist: Zentrale Verarbeitungseinheit – von kleinen und einfachen 4-Bit-Prozessoren bis zu komplexen 32-Bit- oder 64-Bit-Prozessoren flüchtiger Speicher (RAM) für Datenspeicher ROM, EPROM, EEPROM oder Flash-Speicher für Programm- und Betriebsparameter-Speicher diskrete Eingabe- und Ausgabebits, die eine Steuerung oder Detektion des logischen Zustands eines einzelnen Paket-Pin-Serien-Eingangs wie serielle Diese Integration reduziert drastisch die Anzahl der Chips und die Menge an Verdrahtungs- und Leiterplattenraum, die benötigt werden, um äquivalente Systeme mit separaten Chips herzustellen. Weiterhin kann insbesondere bei Niederstiftzählgeräten jeder Stift an mehrere Innenumfangsbereiche anschließen, wobei die Stiftfunktion durch Software gewählt wird. Dadurch kann ein Teil in einer größeren Vielfalt von Anwendungen verwendet werden, als wenn Pins eigene Funktionen hatten. Mikrocontroller haben sich seit ihrer Einführung in die 1970er Jahre als sehr beliebt in Embedded Systemen erwiesen. Einige Mikrocontroller nutzen eine Harvard-Architektur: separate Speicherbusse für Anweisungen und Daten, so dass Zugriffe gleichzeitig stattfinden. Bei Verwendung einer Harvard-Architektur können Befehlsworte für den Prozessor eine andere Bitgröße als die Länge des internen Speichers und der Register sein; beispielsweise: 12-Bit-Anweisungen, die mit 8-Bit-Datenregistern verwendet werden.Die Entscheidung, welche peripher zu integrieren ist, ist oft schwierig. Die Microcontroller-Anbieter handeln oft Betriebsfrequenzen und entwickeln Flexibilität gegen zeit-to-market-Anforderungen von ihren Kunden und insgesamt geringere Systemkosten. Die Hersteller müssen die Notwendigkeit ausgleichen, die Chipgröße gegen zusätzliche Funktionalität zu minimieren. Mikrocontroller-Architekturen sind sehr unterschiedlich. Einige Ausführungen umfassen allgemeine Mikroprozessor-Kerne, mit einem oder mehreren ROM-, RAM- oder I/O-Funktionen auf das Paket integriert. Weitere Ausführungen sind für Steuerungsanwendungen konzipiert. Ein Mikro-Controller-Anweisungssatz hat in der Regel viele Anweisungen für die Bit-Manipulation (bit-weise Operationen), um Steuerungsprogramme kompakter zu machen. Beispielsweise kann ein allgemeiner Zweckprozessor mehrere Anweisungen erfordern, um ein Bit in einem Register und Zweig zu testen, wenn das Bit gesetzt wird, wo ein Mikrocontroller eine einzige Anweisung haben könnte, um diese allgemein erforderliche Funktion zu bieten. Mikrocontroller haben traditionell keinen Mathematik-Koprozessor, so dass schwimmende Punkt-Arithmetik durch Software durchgeführt wird. Einige neuere Designs umfassen jedoch eine FPU und DSP optimierte Funktionen. Ein Beispiel wäre die PIC32 MIPS-basierte Linie von Microchip. Programmierumgebungen Mikrocontroller wurden ursprünglich nur in Montagesprache programmiert, aber auch verschiedene hochrangige Programmiersprachen, wie C, Python und JavaScript, sind jetzt auch im gemeinsamen Einsatz für Target-Mikrocontroller und Embedded-Systeme. Compiler für allgemeine Anwendungssprachen haben in der Regel einige Einschränkungen sowie Verbesserungen, um die einzigartigen Eigenschaften von Mikrocontrollern besser zu unterstützen. Einige Mikrocontroller haben Umgebungen, um bestimmte Anwendungen zu entwickeln. Microcontroller-Anbieter stellen häufig Werkzeuge frei zur Verfügung, um ihre Hardware leichter zu übernehmen. Mikrocontroller mit Spezial-Hardware können eigene nicht-Standarddialekte von C, wie SDCC für die 8051 benötigen, die die Verwendung von Standard-Tools (wie Code-Bibliotheken oder statische Analyse-Tools) auch für Code, der nicht mit Hardware-Features zusammenhängt verhindern. Interpreters können auch nicht standardmäßige Funktionen enthalten, wie MicroPython, obwohl eine Gabel, CircuitPython, versucht hat, Hardware-Abhängigkeiten an Bibliotheken zu verschieben und haben die Sprache an einem mehr CPython Standard halten. Interpreter Firmware ist auch für einige Mikrocontroller verfügbar. Zum Beispiel BASIC auf den frühen Mikrocontrollern Intel 8052; BASIC und FORTH auf dem Zilog Z8 sowie einige moderne Geräte. Typischerweise unterstützen diese Dolmetscher die interaktive Programmierung. Simulatoren sind für einige Mikrocontroller verfügbar. Diese ermöglichen es einem Entwickler, zu analysieren, was das Verhalten des Mikrocontrollers und dessen Programm sein sollte, wenn sie den eigentlichen Teil verwenden. Ein Simulator zeigt den internen Prozessorzustand und auch den der Ausgänge, sowie die Erzeugung von Eingangssignalen. Während auf der einen Seite die meisten Simulatoren von nicht in der Lage sein, viele andere Hardware in einem System zu simulieren, können sie Bedingungen ausüben, die sonst schwer zu reproduzieren in der physischen Implementierung, und kann der schnellste Weg sein, Probleme zu debuggen und zu analysieren. Neuere Mikrocontroller sind oft mit einer On-Chip-Debug-Schaltung integriert, die beim Zugriff auf einen In-Schaltungs-Emulator (ICE) über JTAG ein Debuggen der Firmware mit einem Debugger ermöglichen. Ein Echtzeit-ICE kann die Anzeige und/oder Manipulation von internen Zuständen während des Laufens ermöglichen. Eine Tracing ICE kann ausgeführtes Programm und MCU Zustände vor/nach einem Triggerpunkt aufnehmen. Arten Ab 2008 gibt es mehrere Dutzend Mikrocontroller-Architekturen und Anbieter, darunter: ARM-Kernprozessoren (viele Hersteller)ARM Cortex-M-Kerne werden gezielt auf Mikrocontroller-Anwendungen Microchip Technology Atmel AVR (8-bit,) AVR32 (32-bit,) und AT91SAM (32-bit) Cypress Semiconductors M8C-Kern auf Basis ihrer PSoC (Programmable System-on-Chip) Maxim Integrated MAX32600, MAX32620, MAX32625, MAX32630, MAX32650, MAX32640 MIPS Microchip Technology PIC, (8-bit PIC16, PIC18, 16-bit dsPIC33 / PIC24,) (32-bit PIC32) Der Mikrocontrollermarkt ist extrem fragmentiert, mit zahlreichen Anbietern, Technologien und Märkten. Beachten Sie, dass viele Anbieter verkaufen oder mehrere Architekturen verkauft haben. Interrupte Latenz Im Gegensatz zu universellen Computern suchen Mikrocontroller, die in eingebetteten Systemen eingesetzt werden, oft, um die Latenz über den Befehlsdurchsatz zu optimieren. Zu den Themen gehören sowohl die Verringerung der Latenz, und es ist vorhersehbarer (um die Echtzeitkontrolle zu unterstützen). Wenn ein elektronisches Gerät einen Interrupt verursacht, müssen während des Kontextschalters die Zwischenergebnisse (Register) gespeichert werden, bevor die für die Bearbeitung des Interrupts zuständige Software ausgeführt werden kann. Sie müssen auch wieder hergestellt werden, nachdem der Interrupt-Handler fertig ist. Wenn es mehr Prozessor-Register gibt, kann dieser Speicher- und Wiederherstellungsprozess mehr Zeit nehmen, die Latenz zu erhöhen. ( Wenn eine ISR nicht die Verwendung einiger Register erfordert, kann sie sie einfach allein lassen, anstatt sie zu retten und wiederherzustellen, so dass in diesem Fall diese Register nicht mit der Latenz involviert sind.) Möglichkeiten, solche Kontext/Latenzwiebeln zu reduzieren, umfassen relativ wenige Register in ihren zentralen Verarbeitungseinheiten (unerwünstlich, weil es die meisten nicht interrupte Verarbeitung wesentlich verlangsamt), oder zumindest die Hardware nicht alle speichern (dies scheitert, wenn die Software dann durch das Speichern des Rest manuell kompensieren muss"). Eine weitere Technik beinhaltet die Ausgaben von Silizium-Gattern auf "Schattenregister": Ein oder mehrere Duplikat-Register, die nur von der Interrupt-Software verwendet werden, vielleicht einen dedizierten Stack unterstützen. Weitere Faktoren, die die Interrupt-Latenz beeinflussen, sind: Zyklen, die benötigt werden, um aktuelle CPU-Aktivitäten abzuschließen. Um diese Kosten zu minimieren, neigen Mikrocontroller dazu, kurze Pipeline (oft drei Anweisungen oder weniger) kleine Schreibpuffer zu haben, und sicherzustellen, dass längere Anweisungen dauerhaft oder wieder antreibbar sind. RISC Design-Prinzipien sorgen dafür, dass die meisten Anweisungen die gleiche Anzahl von Zyklen einnehmen und helfen, die Notwendigkeit für die meisten solcher Fortführung / Neustart-Logik zu vermeiden. Die Länge jedes kritischen Abschnitts, der unterbrochen werden muss. Der Zugang zu einem kritischen Abschnitt beschränkt den gleichzeitigen Zugriff auf die Datenstruktur. Wenn eine Datenstruktur von einem Interrupt-Handler aufgerufen werden muss, muss der kritische Abschnitt den Interrupt blockieren. Dementsprechend wird die Interrupt-Latenz um die Dauer erhöht, die Interrupt blockiert ist. Wenn es harte externe Zwänge in der Systemlatenz gibt, benötigen Entwickler oft Werkzeuge, um Unterbrechungslatten zu messen und nachzuverfolgen, welche kritischen Abschnitte Verlangsamungen verursachen. Eine gemeinsame Technik blockiert einfach alle Unterbrechungen für die Dauer des kritischen Abschnitts. Dies ist einfach zu implementieren, aber manchmal kritische Abschnitte erhalten unglücklich lang. Eine komplexere Technik blockiert nur die Unterbrechungen, die den Zugriff auf diese Datenstruktur auslösen können. Dies basiert oft auf Interruptprioritäten, die in der Regel nicht gut den relevanten Systemdatenstrukturen entsprechen. Dementsprechend wird diese Technik meist in sehr eingeschränkten Umgebungen eingesetzt. Prozessoren können Hardware-Unterstützung für einige kritische Abschnitte haben. Beispiele sind die Unterstützung des atomaren Zugriffs auf Bits oder Bytes innerhalb eines Wortes oder anderer atomarer Access Primitiven wie die in der ARMv6-Architektur eingeführten LDREX/STREX exklusiven Access Primitives. Unterbrechendes Nesting. Einige Mikrocontroller ermöglichen höhere Prioritätsunterbrüche, um niedrigere Prioritätsstufen zu unterbrechen. Dies ermöglicht es Software, Latenz zu verwalten, indem zeitkritische Unterbrechungen höhere Priorität (und damit niedriger und vorhersehbarer Latenz) als weniger kritische. Triggerrate. Wenn Interrupts rückgängig gemacht werden, können Mikrocontroller durch eine Form der Endanrufoptimierung einen zusätzlichen Kontext-Storage-/Restore-Zyklus vermeiden. Untere End-Mikrocontroller neigen dazu, weniger Interrupt-Latenzsteuerungen zu unterstützen als höhere Endstufen. Speichertechnologie Zwei verschiedene Arten von Speichern werden häufig mit Mikrocontrollern, einem nichtflüchtigen Speicher zum Speichern von Firmware und einem Schreib-Lese-Speicher für temporäre Daten verwendet. Daten Von den frühesten Mikrocontrollern bis heute wird der sechs-Transistor SRAM fast immer als Schreib-/Lese-Arbeitsspeicher verwendet, wobei einige weitere Transistoren pro Bit in der Registerdatei verwendet werden. Neben dem SRAM haben einige Mikrocontroller auch internes EEPROM zur Datenspeicherung, und sogar diejenigen, die keinen (oder nicht genug) haben, sind oft an externen seriellen EEPROM-Chip (wie den BASIC Stamp) oder externen seriellen Flash-Speicherchip angeschlossen. Einige Mikrocontroller ab 2003 haben einen selbstprogrammierbaren Flash-Speicher. Firmware Die frühesten Mikrocontroller verwendeten Maske ROM, um Firmware zu speichern. Spätere Mikrocontroller (wie die frühen Versionen der Freescale 68HC11 und frühen PIC-Mikrocontroller) hatten EPROM-Speicher, die ein transluzentes Fenster verwendet, um eine Löschung über UV-Licht zu ermöglichen, während Produktionsversionen kein solches Fenster hatten, wobei OTP (einmal programmierbar). Firmware-Updates waren gleichwertig, um den Mikrocontroller selbst zu ersetzen, so dass viele Produkte nicht aufrüstbar waren. Motorola MC68HC805 war der erste Mikrocontroller, der EEPROM verwendet, um die Firmware zu speichern. EEPROM-Mikrocontroller wurden 1993 populärer, als Microchip PIC16C84 eingeführt und Atmel einen 8051-Kern-Mikrocontroller einführte, der als erster NOR-Flash-Speicher die Firmware speicherte. Die heutigen Mikrocontroller verwenden fast ausschließlich Flash-Speicher, mit einigen Modellen mit FRAM, und einige ultra-low-cost Teile noch verwenden OTP oder Mask-ROM. Siehe auch Liste der gemeinsamen Mikrocontroller Liste der Wi-Fi Mikrocontroller Liste der Open-Source-Hardware-Projekte Microbotics Programmierbarer Logik-Controller Single-Board-Mikrocontroller Referenzen Externe Links Microcontroller bei Curlie