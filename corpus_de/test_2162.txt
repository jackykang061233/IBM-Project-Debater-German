In der Informatik, speziell Software-Engineering und Hardware-Engineering, sind formale Methoden eine besondere Art von mathematisch strengen Techniken für die Spezifikation, Entwicklung und Überprüfung von Software- und Hardwaresystemen. Der Einsatz formaler Methoden für Software- und Hardware-Design wird durch die Erwartung motiviert, dass, wie in anderen Ingenieursdisziplinen, eine entsprechende mathematische Analyse zur Zuverlässigkeit und Robustheit eines Designs beitragen kann. Formale Methoden werden am besten als Anwendung einer ziemlich breiten Vielfalt von theoretischen Informatik-Grundlagen, insbesondere Logik-Kalkuli, formale Sprachen, Automata-Theorie, diskrete Ereignisdynamik-System und Programm-Semantik beschrieben, aber auch Typ-Systeme und algebraische Datentypen zu Problemen in der Software- und Hardwarespezifikation und Verifikation. Hintergrund Semi-Formal Methoden sind Formalismen und Sprachen, die nicht als vollständig „formal“ angesehen werden. Es verbietet die Aufgabe, die Semantik auf eine spätere Stufe abzuschließen, die dann entweder durch menschliche Interpretation oder durch Interpretation durch Software wie Code oder Testfallgeneratoren durchgeführt wird. Taxonomy Formal Methoden können auf mehreren Ebenen verwendet werden: Level 0:Formale Spezifikation kann vorgenommen werden und dann ein Programm, das von diesem informellen entwickelt wurde. Dies wurde formale Methoden genannt. Dies kann in vielen Fällen die kostengünstigste Option sein. Ebene 1: Formale Entwicklung und formale Verifikation können verwendet werden, um ein Programm formaler zu erstellen. Beispielsweise können Nachweise von Eigenschaften oder Verfeinerung von der Spezifikation zu einem Programm vorgenommen werden. Dies kann am besten in Hochintegritätssystemen mit Sicherheit oder Sicherheit sein. Level 2: Theorem-Provers können verwendet werden, um voll formale maschinell geprüfte Beweise zu übernehmen. Trotz verbesserter Werkzeuge und sinkender Kosten kann dies sehr teuer sein und ist nur praktisch lohnenswert, wenn die Fehlerkosten sehr hoch sind (z.B. in kritischen Teilen des Betriebssystems oder des Mikroprozessors). Weitere Informationen hierzu finden Sie unten. Wie bei der Programmierung der Sprachsemantik können formale Methoden in etwa wie folgt klassifiziert werden: Denotationale Semantik, in der die Bedeutung eines Systems in der mathematischen Theorie der Domänen ausgedrückt wird. Die Befürworter solcher Methoden verlassen sich auf die wohlverstandene Natur der Domänen, um dem System Bedeutung zu verleihen; Kritiker weisen darauf hin, dass nicht jedes System intuitiv oder natürlich als Funktion betrachtet werden kann. Operationelle Semantik, bei der die Bedeutung eines Systems als Folge von Handlungen eines (vermutlich) einfacheren Rechenmodells ausgedrückt wird. Die Befürworter solcher Methoden weisen auf die Einfachheit ihrer Modelle als Mittel zur expressiven Klarheit hin; Kritiker stellen entgegen, dass das Problem der Semantik gerade verzögert wurde (die die Semantik des einfacheren Modells definiert?). Axiomatische Semantik, bei der die Bedeutung des Systems in Bezug auf Vor- und Nachbedingungen ausgedrückt wird, die vor und nach dem System eine Aufgabe erfüllen. Die Befürworter beachten die Verbindung zur klassischen Logik; Kritiker bemerken, dass solche Semantik nie wirklich beschreiben, was ein System tut (nur das, was vor und danach wahr ist). Leichte formale Methoden Einige Praktizierende glauben, dass die formale Methodengemeinschaft die vollständige Formalisierung einer Spezifikation oder eines Designs überschätzt hat. Sie behaupteten, dass die Ausdruckskraft der beteiligten Sprachen sowie die Komplexität der modellierten Systeme die vollständige Formalisierung zu einer schwierigen und teuren Aufgabe machen. Alternativ wurden verschiedene Leichtbauformverfahren vorgeschlagen, die die Teilspezifikation und die fokussierte Anwendung betonen. Beispiele für diese leichte Herangehensweise an formale Methoden sind die Alloy-Objektmodellierungsnotation, Denneys Synthese einiger Aspekte der Z-Notation mit gebrauchsfallgetriebener Entwicklung und die CSK VDM Tools. Verwendungen Formale Methoden können an verschiedenen Stellen durch den Entwicklungsprozess angewendet werden. Spezifikation Formale Methoden können verwendet werden, um eine Beschreibung des zu entwickelnden Systems, auf welchem Niveau(en) des gewünschten Details. Diese formale Beschreibung kann verwendet werden, um weitere Entwicklungsmaßnahmen zu führen (siehe folgende Abschnitte;) zusätzlich kann überprüft werden, ob die Anforderungen an das entwickelte System vollständig und genau spezifiziert wurden oder formalisierende Systemanforderungen durch Ausdruck in einer formalen Sprache mit einer genauen und eindeutig definierten Syntax und Semantik. Die Notwendigkeit formaler Spezifikationssysteme wurde seit Jahren festgestellt. In dem Bericht ALGOL 58 präsentierte John Backus eine formale Notation zur Beschreibung der Programmiersprache-Syntax, später als Backus-Normalform genannt, dann Backus-Naur Form (BNF.)Backus schrieb auch, dass eine formale Beschreibung der Bedeutung syntaktisch gültiger ALGOL-Programme nicht rechtzeitig zur Aufnahme in den Bericht abgeschlossen wurde. "Deshalb wird die formale Behandlung der Semantik von Rechtsprogrammen in ein späteres Papier aufgenommen." Es erschien nie. Entwicklung Formale Entwicklung ist der Einsatz formaler Methoden als integrierter Bestandteil eines werkzeuggestützten Systementwicklungsprozesses. Sobald eine formale Spezifikation hergestellt wurde, kann die Spezifikation als Leitfaden verwendet werden, während das Betonsystem während des Designprozesses entwickelt wird (d.h. typischerweise in Software, aber auch potenziell in Hardware realisiert). Zum Beispiel: Ist die formale Spezifikation in der betrieblichen Semantik, kann das beobachtete Verhalten des Betonsystems mit dem Verhalten der Spezifikation verglichen werden (die selbst ausführbar oder simulierbar sein sollte). Zusätzlich können die Betriebsbefehle der Spezifikation geeignet sein, die Übersetzung in ausführbaren Code zu leiten. Ist die formale Spezifikation in axiomatischer Semantik, können die Voraussetzungen und Postbedingungen der Spezifikation in dem ausführbaren Code geltend gemacht werden. Verifikation Formale Verifikation ist die Verwendung von Software-Tools, um Eigenschaften einer formalen Spezifikation zu beweisen, oder um zu beweisen, dass ein formales Modell einer Systemdurchführung seine Spezifikation erfüllt. Sobald eine formale Spezifikation entwickelt wurde, kann die Spezifikation als Grundlage für die Nachweise der Eigenschaften der Spezifikation verwendet werden (und hoffentlich durch Bezugnahme auf das entwickelte System.) Sign-off-Verifikation Die Sign-off-Verifikation ist die Verwendung eines formalen Verifikationstools, das sehr vertraut ist. Ein solches Werkzeug kann traditionelle Verifikationsverfahren ersetzen (das Werkzeug kann sogar zertifiziert werden). Menschlich-gerichtete Beweise Manchmal ist die Motivation, die Richtigkeit eines Systems zu beweisen, nicht die offensichtliche Notwendigkeit, die Richtigkeit des Systems wiederherzustellen, sondern ein Wunsch, das System besser zu verstehen. Infolgedessen werden einige Korrekturnachweise im Stil des mathematischen Nachweises erstellt: handschriftlich (oder typeet) mit natürlicher Sprache unter Verwendung einer solchen Nachweisen geläufigen informellen Ebene. Ein guter Beweis ist einer, der von anderen menschlichen Lesern lesbar und verständlich ist. Kritiken solcher Ansätze weisen darauf hin, dass die Mehrdeutigkeit, die in der natürlichen Sprache inhärent ist, Fehler in solchen Beweisen unentdeckt werden kann; oft können subtile Fehler in den Tiefebenen-Details vorhanden sein, die typischerweise von solchen Beweisen übersehen werden. Darüber hinaus erfordert die an der Herstellung eines solchen guten Nachweises beteiligte Arbeit ein hohes Maß an mathematischer Raffinesse und Kompetenz. Automatisierter Nachweis Demgegenüber ist das Interesse an der Herstellung von Korrekturnachweisen solcher Systeme auf automatisierte Weise gestiegen. Automatisierte Techniken fallen in drei allgemeine Kategorien: Automatisiertes Theorem proving, in dem ein System versucht, einen formalen Beweis von Grund auf zu erzeugen, angesichts einer Beschreibung des Systems, einer Reihe von logischen Axiomen und einer Reihe von Inferenzregeln. Modellprüfung, bei der ein System bestimmte Eigenschaften durch eine erschöpfende Suche aller möglichen Zustände überprüft, dass ein System während seiner Ausführung einlaufen könnte. Abstrakte Interpretation, bei der ein System eine Überapproximation einer Verhaltenseigenschaft des Programms überprüft, wobei eine Fixpunktrechnung über ein (möglicherweise vollständiges) Gitter verwendet wird, das es repräsentiert. Einige automatisierte Theorem-Provers benötigen Anleitung, welche Eigenschaften interessant genug sind, um zu verfolgen, während andere ohne menschliche Intervention arbeiten. Modell-Checker können schnell bei der Überprüfung von Millionen von uninteressanten Zuständen, wenn nicht ein ausreichend abstraktes Modell. Vertreter solcher Systeme argumentieren, dass die Ergebnisse eine höhere mathematische Sicherheit als human-produzierte Beweise haben, da alle mühsamen Details algorithmisch überprüft wurden. Die Ausbildung, die für die Nutzung solcher Systeme erforderlich ist, ist auch weniger als die, die benötigt werden, um gute mathematische Beweise von Hand zu produzieren, wodurch die Techniken für eine größere Vielfalt von Praktizierenden zugänglich gemacht werden. Kritiker bemerken, dass einige dieser Systeme wie Orakel sind: Sie machen eine Erklärung der Wahrheit, aber geben keine Erklärung dieser Wahrheit. Es besteht auch das Problem der "Verifikation des Prüfers", wenn das Programm, das bei der Verifikation hilft, selbst nicht bewiesen ist, kann es Grund geben, die Klanglichkeit der produzierten Ergebnisse zu bezweifeln. Einige moderne Modell-Check-Tools produzieren eine "sichere log" Details jeden Schritt in ihrem Beweis, so dass es möglich,, bei geeigneten Werkzeugen, unabhängige Überprüfung. Das Hauptmerkmal des abstrakten Interpretationsansatzes ist, dass es eine Klanganalyse liefert, d.h. keine falschen Negative zurückgegeben werden.Darüber hinaus ist es effizient skalierbar, indem die abstrakte Domäne, die die zu analysierende Eigenschaft darstellt, und durch die Anwendung von Erweiterungsbetreibern schnell Konvergenz zu erhalten. Anwendungen Formale Methoden werden in verschiedenen Bereichen von Hardware und Software angewendet, darunter Router, Ethernet Switche, Routing-Protokolle, Sicherheitsanwendungen und Betriebssystem-Mikrokerne wie seL4. Es gibt mehrere Beispiele, in denen sie verwendet wurden, um die Funktionalität der in DCs verwendeten Hardware und Software zu überprüfen. IBM verwendet ACL2, ein Theorem-Prover, im AMD x86 Prozessor-Entwicklungsprozess. Intel verwendet solche Methoden, um seine Hardware und Firmware zu überprüfen (permanent software programmiert in einen Nur-Lesespeicher). Gefährliche Daten Das Zentrum nutzte in den 1980er Jahren formale Methoden, um ein Compiler-System für die Ada Programmiersprache zu entwickeln, die weiter zu einem langlebigen Handelsprodukt ging. Es gibt mehrere andere Projekte der NASA, in denen formale Methoden angewandt werden, wie zum Beispiel das Next Generation Air Transportation System, die Integration von unbemannten Luftfahrzeugsystemen in das nationale Luftraumsystem und die von Airborne Coordinated Conflict Resolution and Detection (ACCoRD). B-Method mit Atelier B, wird verwendet, um Sicherheitsautomaten für die verschiedenen U-Bahnen zu entwickeln, die in der ganzen Welt von Alstom und Siemens installiert werden, sowie für die Common Criteria Zertifizierung und die Entwicklung von Systemmodellen von ATMEL und STMicroelectronics. Die meisten der bekannten Hardware-Anbieter, wie IBM, Intel und AMD, wurden häufig in der Hardware eingesetzt. Es gibt viele Bereiche der Hardware, in denen Intel FMs verwendet haben, um die Arbeit der Produkte zu überprüfen, wie parametrierte Überprüfung von Cache-Coherent-Protokoll, Intel Core i7 Prozessor Ausführung Motor Validierung (unter Verwendung von Theorem proving, BDDs und symbolische Auswertung), Optimierung für Intel IA-64 Architektur mit HOL light theorem prover, und Überprüfung von High-Performance Dual-Port Gigabit Ethernet-Controller mit Unterstützung für PCI-Technologie. In ähnlicher Weise hat IBM formale Methoden bei der Überprüfung von Powergates, Registern und der Funktionsprüfung des IBM Power7 Mikroprozessors eingesetzt. In der Softwareentwicklung In der Software-Entwicklung sind formale Methoden mathematische Ansätze zur Lösung von Software- (und Hardware-)Problemen auf den Anforderungen, Spezifikation und Design-Ebenen. Formale Methoden werden höchstwahrscheinlich auf sicherheitskritische oder sicherheitskritische Software und Systeme, wie Avionics Software angewendet. Software-Sicherheitsstandards, wie DO-178C ermöglicht die Verwendung formaler Methoden durch Ergänzung, und Gemeinsame Kriterien beauftragt formale Methoden auf höchstem Niveau der Kategorisierung. Für sequentielle Software sind Beispiele formaler Methoden die B-Method, die in automatisierten Theorem Proving, RAISE und Z-Notation verwendeten Spezifikationssprachen. Bei der funktionellen Programmierung hat immobilienbasierte Tests die mathematische Spezifikation und Prüfung (wenn nicht abschließende Prüfung) des erwarteten Verhaltens einzelner Funktionen erlaubt. Die Object Constraint Language (und Spezialisierungen wie Java Modeling Language) hat es erlaubt, objektorientierte Systeme formal festzulegen, wenn nicht unbedingt formal überprüft. Für gleichzeitige Software und Systeme, Petrinetze, Prozessalgebra und endliche Zustandsmaschinen (die auf automata-Theorie basieren - siehe auch virtuelle endliche Zustandsmaschine oder ereignisgetriebene endliche Zustandsmaschine) ermöglichen ausführbare Softwarespezifikation und können verwendet werden, um Anwendungsverhalten aufzubauen und zu validieren. Ein weiterer Ansatz für formale Methoden in der Softwareentwicklung ist es, eine Spezifikation in irgendeiner Form von Logik zu schreiben - gewöhnlich eine Variation der Erstbestelllogik (FOL) - und dann die Logik direkt auszuführen, als wäre es ein Programm. Die OWL-Sprache, basierend auf Beschreibung Logic (DL,) ist ein Beispiel. Es gibt auch die Arbeit, eine Version von Englisch (oder eine andere natürliche Sprache) automatisch auf und von der Logik zuzuordnen und die Logik direkt auszuführen. Beispiele sind Attempto Controlled English und Internet Business Logic, die nicht versuchen, den Vokabular oder Syntax zu kontrollieren. Ein Merkmal von Systemen, die bidirektionale englisch-logische Kartierung und direkte Ausführung der Logik unterstützen, ist, dass sie gemacht werden können, um ihre Ergebnisse auf englischer, geschäftlicher oder wissenschaftlicher Ebene zu erklären. Formale Methoden und Notationen Es gibt eine Vielzahl von formalen Methoden und Notationen. Spezifikationssprachen Abstract State Machines (ASMs)A Computational Logic for Applicative Common Lisp (ACL2) Actor model Alloy ANSI/ISO C Spezifikation Language (ACSL) Autonomic System Spezifikation Sprache (ASSL) B-Method CADP Common Algebraic Spezifikation Sprache (CASL) Esterel Java Modeling Language (JML) Knowledge Based Software Assistant (KBSA)Lustre mCRL2 Perfect Developer Petrinetze Predicative Programmierung Prozess calculi CSP LOTOS π-calculus RAISE RebecaModeling Sprache SPARK Ada Spezifikation und Beschreibung Sprache TLA+USL VDM VDM-SL VDM+ Z-Notation Model Checkers ESBMC MALPAS Software Static Analysis Toolset – ein industrieller Modell-Checker für formalen Nachweis von sicherheitskritischen Systemen PAT – ein kostenloses Modell-Checker, Simulator und Verfeinerungs-Checker für gleichzeitige Systeme und CSP-Erweiterungen (z.B. gemeinsame Variablen, Arrays, Fairness) SPIN UPPAAL Organisationen APCB BCS-FACS Formal Methods Europe Z User Group Siehe auch Zusammenfassung Automatisierte Theorem Design nach Vertrag Formale Methoden Personen Formale Spezifikation Formale Verifikation Formales System Modell Überprüfung Software Engineering Spezifikation Sprache Referenzen Dieser Artikel basiert auf dem Material, das vor dem 1. November 2008 aus dem Free On-line Dictionary of Computing herausgenommen wurde und unter den Relicensing-Bedingungen der GFDL, Version 1.3 oder später aufgenommen wurde. Weiter lesen Externe Links Formale Methoden Europa (FME)Formale Methoden Wiki Formale Methoden aus FoldocArchival Material Formale Methode Keyword auf Microsoft Academic Search via Archive.org Nachweis über Formal Methods nutzt und Auswirkungen auf die Industrie, unterstützt durch das DEPLOY-Projekt (EU FP7) in Archive.org