Software-Entwicklungsprozess ist der Prozess der Verbreitung von Software-Entwicklungen in kleinere, parallele oder sequentielle Schritte oder Unterverfahren zur Verbesserung von Design, Produktmanagement und Projektmanagement. Sie ist auch als Software-Entwicklungszyklus (SDLC) bekannt. Die Methode kann die Vorabdefinition von spezifischen Erlösern und Arten umfassen, die von einem Projektteam erstellt und fertig gestellt werden, um einen Antrag zu entwickeln oder zu erhalten. Die meisten modernen Entwicklungsprozesse lassen sich als erträglich beschreiben. Andere Methoden umfassen Kläranlage, Prototyp, iterative und inkrementelle Entwicklung, Spiralentwicklung, schnelle Anwendung und extreme Programmierung. Ein Lebenszyklusmodell wird manchmal als allgemeinerer Begriff für eine Kategorie von Methoden und ein Software-Entwicklungsprozess angesehen, um einen bestimmten Begriff zu nennen, der von einer bestimmten Organisation ausgewählt wird. Beispielsweise gibt es viele spezifische Software-Entwicklungsprozesse, die das Lebenszyklusmodell der Spirale passen. Häufig gilt das Feld als Teil des Lebenszyklus der Systeme. Geschichte Die Software-Entwicklungsmethodik (auch bekannt als SDM) hat sich bis zu den 1960er Jahren nicht entwickelt. Laut Elliott (2004) kann der Lebenszyklus der Systeme (SDLC) als der älteste formalisierte methodische Rahmen für den Aufbau von Informationssystemen angesehen werden. Die wichtigste Idee der IDEC besteht darin, die Entwicklung von Informationssystemen in sehr naher, strukturierter und methodischer Weise fortzusetzen, die jede Phase des Lebenszyklus erfordert – von der Idee bis zur Lieferung des endgültigen Systems bis hin zu strengen und sequentiellen Maßnahmen im Rahmen des angewandten Rahmens. Kernziel dieses methodischen Rahmens in den 60er Jahren war "die Entwicklung großer funktionsfähiger Betriebssysteme in einem Zeitalter großer Unternehmenskonglomeraten. Aktivitäten der Informationssysteme im Bereich der Schwerdatenverarbeitung und der Nummernklemmen. Methoden, Prozesse und Rahmenbedingungen reichen von spezifischen proskriptiven Schritten, die direkt von einer Organisation im Rahmen der täglichen Arbeit genutzt werden können, bis zu flexiblen Rahmenbedingungen, die eine Organisation verwendet, um ein individuelles Bündel von Schritten zu schaffen, die auf die Bedürfnisse eines bestimmten Projekts oder einer Gruppe zugeschnitten sind. In einigen Fällen verteilt ein Sponsor oder eine Wartungsorganisation eine offizielle Reihe von Dokumenten, die den Prozess beschreiben. Konkrete Beispiele: 70er Jahre Strukturierte Programmierung seit 1969 Cap Gemini SDM, ursprünglich von PANDATA, wurde 1974 die erste englische Übersetzung veröffentlicht. SDM steht für Systementwicklungsmethodologie1980s Strukturierte Systemanalyse und -konzept (SSADM) ab 1980 nach Bedarfsanalyse/Soft Systems-Methoden objektorientierte Programmierung (OOP) in den frühen 60er Jahren entwickelt und wurde Mitte der 90er Jahre ein marktbeherrschender Programmierungsansatz (RAD), seit 1991 dynamische Systementwicklungsmethode (DSDM), seit 1994 als das Team-Softwareverfahren seit 1995, seit 1998 von IBM im Rahmen der Rationalen Einheitsgebung (RUP), die seit 1998 im Rahmen der extremen Programmplanung fortgesetzt wurde. Agile Unified Process (AUP) wurde seit 2005 von Scott Ambler Disciplined Flexible Lieferung (DAD) Supersedes AUP2010s Scaled Agile Framework (SAFe) beibehalten Grand-Scale Scrum (LeSS)DevOps Man ist bemerkenswert, dass seit DSDM 1994 alle Methoden auf der oben genannten Liste mit Ausnahme von RUP funktionstüchtige Methoden sind, doch viele Organisationen, insbesondere Regierungen, nutzen noch vor-agile Prozesse (often- oder ähnliche). Software-Prozess und Softwarequalität sind eng miteinander verknüpft; einige unerwartete Facetten und Effekte wurden in der Praxis beobachtet, unter anderem wurden diese anderen Software-Entwicklungsprozesse in offener Quelle entwickelt. Die Annahme dieser bewährten Praktiken, die innerhalb der Beschlagnahmen eines Unternehmens bekannt und etabliert sind, wird als interne Quelle bezeichnet. Prototyping Software Prototyping baut Prototypen auf, d. h. unvollständige Versionen des Softwareprogramms werden entwickelt. Grundprinzipien sind: Prototyping ist keine eigenständige, vollständige Entwicklungsmethode, sondern ein Ansatz, um besondere Merkmale im Zusammenhang mit einer umfassenden Methode (wie incremental, spirale oder schnelle Anwendung (RAD) zu ermitteln. Versuche, das inhärente Projektrisiko zu verringern, indem es ein Projekt in kleinere Segmente durchbrochen und während des Entwicklungsprozesses einfacher wird. Der Kunde ist während des gesamten Entwicklungsprozesses beteiligt, der die Wahrscheinlichkeit erhöht, dass Kunden die endgültige Umsetzung akzeptieren. Manche Prototypen werden zwar mit der Erwartung entwickelt, dass sie zurückgeworfen werden, aber es ist in einigen Fällen möglich, sich von Prototypen bis Arbeitssystem zu entwickeln. Ein grundlegendes Verständnis des grundlegenden Unternehmensproblems ist notwendig, um die falschen Probleme zu lösen, aber dies gilt für alle Software-Methoden. Methodeologien Agile Entwicklung "Agile Software-Entwicklung" bezieht sich auf eine Gruppe von Software-Entwicklungsmethoden auf der Grundlage der iterativen Entwicklung, in der die Anforderungen und Lösungen durch die Zusammenarbeit zwischen der Selbstorganisation funktionsübergreifender Teams entwickelt werden. Im Jahr 2001 wurde der Begriff im Agile Manifesto formuliert. Agile Software-Entwicklung nutzt die iterative Entwicklung als Basis, spricht aber für einen leichteren und stärker bürgerorientierten Blick als traditionelle Ansätze. Agile-Prozesse integrieren die Iteration und das fortlaufende Feedback, das es bietet, um aufeinanderfolgende Verbesserungen vorzunehmen und ein Software-System zu liefern. Agile Modell umfasst auch folgende Softwareentwicklungsprozesse: Dynamische Systementwicklungsmethode (DSDM)Kanbanay Crystal Atern Lean Entwicklung kontinuierliche Integration ist die Praxis, alle Entwickler, die mehrere Male am Tag arbeiten, zu einer gemeinsamen Hauptlinie zusammenzuführen. Gradych zuerst benannt und schlug CI in seiner 1991 angewandten Methode vor, obwohl er sich nicht für die Integration mehrerer Zeiten ausgesprochen habe. Extreme Programmierung (XP) verabschiedete das CI-Konzept und sprach sich dafür aus, mehr als einmal pro Tag zu integrieren – vielleicht so viele wie zehnmal pro Tag. Incremental development Verschiedene Methoden sind für die Kombination linearer und iterativer Entwicklungsmethoden annehmbar, wobei das Hauptziel jeder darin besteht, das inhärente Projektrisiko zu verringern, indem es ein Projekt in kleinere Segmente durchbrochen und während des Entwicklungsprozesses einfacher wird. Es gibt drei wesentliche Varianten der inkrementellen Entwicklung: Eine Reihe von Mini-Waterlücken werden durchgeführt, in denen alle Phasen des Teichs für einen kleinen Teil eines Systems abgeschlossen werden, bevor sie in die nächste Erhöhung eintreten, oder allgemeine Anforderungen sind festgelegt, bevor sie zu einer entwicklungs-, Mini-Waterfall-Entwicklung einzelner Stufen eines Systems führen, oder das ursprüngliche Software-Konzept, die Bedarfsanalyse und die Gestaltung von Architektur und Systemkern werden über die Wasserschicht bestimmt, gefolgt von der schrittweisen Umsetzung, die zur Installation der endgültigen Version führt. Entwicklung einer schnellen Anwendung (RAD) ist eine Software-Entwicklungsmethodik, die die Entwicklung und den schnellen Bau von Prototypen anstelle großer Vor-Ort-Planmengen begünstigt. Die Planung von Software, die mit RAD entwickelt wird, ist mit der eigenen Software verbunden. Das Fehlen einer umfangreichen Vorplanung erlaubt es allgemein, Software viel schneller zu schreiben und es einfacher zu ändern. Der rasche Entwicklungsprozess beginnt mit der Entwicklung vorläufiger Datenmodelle und Geschäftsmodelle für Unternehmen, die auf strukturierte Techniken zurückgreifen. In der nächsten Phase werden die Anforderungen an Prototyp getestet, um die Daten- und Prozessmodelle zu verfeinern. Diese Stufen werden wiederholt iterativ; weitere Entwicklungsergebnisse in "eine kombinierte Geschäftsanforderungen und technische Entwurfserklärung, die für den Bau neuer Systeme verwendet werden soll". Zunächst wurde der Begriff verwendet, um einen von James Martin 1991 eingeführten Softwareentwicklungsprozess zu beschreiben. Laut Whitten (2003) ist es ein Zusammenschluss verschiedener strukturierter Techniken, insbesondere der datengesteuerten Informationstechnologietechnik, mit Prototyptechniken, um die Entwicklung von Softwaresystemen zu beschleunigen. Grundprinzipien der raschen Anwendung: Kernziel ist die schnelle Entwicklung und Lieferung eines hochwertigen Systems zu relativ niedrigen Investitionskosten. Versuche, das inhärente Projektrisiko zu verringern, indem es ein Projekt in kleinere Segmente durchbrochen und während des Entwicklungsprozesses einfacher wird. Ziel ist es, qualitativ hochwertige Systeme schnell zu produzieren, vor allem über Iterative Prototyping (auf jeder Stufe der Entwicklung), aktive Nutzerbeteiligung und computergestützte Entwicklungsinstrumente. In diesen Werkzeugen können Entwickler von Rechnern für Software Engineering (CASE), Datenbankenmanagementsysteme (DBMS), Programmiersprachen der vierten Generation, Codegeneratoren und objektorientierte Techniken einbezogen werden. Schwerpunkt liegt auf der Erfüllung des Unternehmensbedarfs, während technologische oder technische Spitzenleistungen weniger wichtig sind. Projektkontrolle beinhaltet die Priorisierung der Entwicklung und die Festlegung von Lieferzeiten oder „Zeitboxen“. Wenn das Projekt beginnt, liegt der Schwerpunkt auf der Verringerung der Anforderungen, die Zeitbox anzupassen, nicht in der Erhöhung der Frist. Insgesamt umfasst das gemeinsame Anwendungsdesign (JAD), bei dem die Nutzer intensiv an Systemkonzepten beteiligt sind, über Konsensaufbau in strukturierten Workshops oder elektronisch erleichterte Interaktion. Aktive Einbeziehung der Nutzer ist unerlässlich. Iterativ produziert die Produktionssoftware im Gegensatz zu einem verwerfenden Prototyp. Erstellung von Dokumentationen, die erforderlich sind, um die künftige Entwicklung und Wartung zu erleichtern. Standardsystemanalyse und Designmethoden können in diesen Rahmen eingebaut werden. Zellentwicklung Barry Boehm hat 1988 ein formales Software-System-Entwicklungskonzept veröffentlicht, das einen wesentlichen Aspekt des Klärmodells und schnelle Prototypmethoden kombiniert, um Vorteile von Top-down- und Bottom-up-Konzepten zu kombinieren. In einem wichtigen Bereich wurden viele von anderen Methoden vernachlässigt: absichtliche iterative Risikoanalyse, besonders für groß angelegte komplexe Systeme. Grundprinzipien sind: Konzentration ist auf die Risikobewertung und die Minimierung des Projektrisikos, indem ein Projekt in kleinere Segmente durchbrochen und während des Entwicklungsprozesses leichter geändert wird, sowie die Gelegenheit, Risiken zu bewerten und die Fortsetzung des Projekts während des gesamten Lebenszyklus zu erwägen. „Eachzyklus beinhaltet eine Progression durch die gleiche Reihe von Schritten, für jeden Teil des Produkts und für jedes seiner Ebenen der Ausarbeitung, von einem Gesamtkonzept der Zusammenarbeit bis zur Kodierung jedes einzelnen Programms. Jede Reise um die Spirale vier Grundvierer: (1) Festlegung von Zielen, Alternativen und Zwängen der Iteration; (2) Bewertung von Alternativen; Ermittlung und Lösung von Risiken; (3) Entwicklung und Überprüfung von Durchführbarkeiten aus der Iteration und (4) Planung der nächsten Iteration. Beginnen Sie jeden Zyklus mit einer Identifizierung der Interessengruppen und ihrer "Weinbedingungen" und beenden jeden Zyklus mit Überprüfung und Engagement. Wasserentwicklung Das Klärmodell ist ein sequentieller Entwicklungsansatz, bei dem die Entwicklung durch mehrere Phasen, in der Regel: Bedarfsanalyse, die zu einer Software-Anforderungen Spezifikation für die Ausführung von Software-Design-Test Integration führt, wenn es mehrere Teilsysteme gibt (oder Installation)Maintenance Die erste formale Beschreibung der Methode wird oft als Artikel bezeichnet, der von Winston W. Royce im Jahr 1970 veröffentlicht wurde, obwohl Royce den Begriffs-Kranken in diesem Artikel nicht verwendet hat. Royce stellte dieses Modell als Beispiel für ein fehlerhaftes, nicht arbeitendes Modell vor. Grundprinzipien sind: Projekt ist in sequentielle Phasen unterteilt, wobei einige Überschneidungen und Spritzen zwischen Phasen akzeptabel sind. Schwerpunkt ist die Planung, die Zeitpläne, die Zieldaten, die Haushalte und die Einführung eines gesamten Systems zu einem Zeitpunkt. Tight Kontrolle wird über das Leben des Projekts durch umfangreiche schriftliche Dokumentation, förmliche Überprüfungen und Genehmigung/Ausschreibung des Benutzer- und Informationstechnologiemanagements am Ende der meisten Phasen vor Beginn der nächsten Phase beibehalten. Schriftliche Dokumentation ist eine explizite Erreichbarkeit jeder Phase. Das Klärmodell ist ein traditionelles Ingenieurkonzept, das auf Software-Engineering angewendet wird. Ein strenger Ansatz des HACCP-Konzepts verhindert die Überprüfung und Überarbeitung einer Vorphase, sobald es abgeschlossen ist. Diese Unflexibilität in einem reinen Klärmodell ist eine Quelle der Kritik anderer flexibler Modelle. Im Laufe der Zeit wurden mehrere groß angelegte staatliche Projekte, die über den Haushalt laufen, in großem Umfang verschuldet und manchmal aufgrund des Big Design Up Front-Ansatzes nicht erfüllt. Außer wenn vertraglich vorgeschrieben, wurde das Klärmodell weitgehend durch flexiblere und vielseitigere Methoden ersetzt, die speziell für die Entwicklung von Software entwickelt wurden. Siehe Criticismus des Wassermodells. Fortgeschrittene Methoden Andere Methoden der Software auf hoher Ebene umfassen: Verhaltensorientierte Entwicklung und Management des Business-Prozesses Chaos Modell - Die wichtigste Regel ist immer die wichtigste Frage zuerst. Methode zur Förderung der Multifunktionalität - ein iterativer Ansatz Leichte Methode - eine allgemeine Begriffsbestimmung für Methoden, die nur wenige Regeln und Praktiken Strukturierungs- und Gestaltungsmethoden aufweisen - eine spezifische Version der langsamen Programmierung im Rahmen der größeren langsamen Bewegung betont sorgfältige und allmähliche Arbeit ohne (oder minimalen) Zeitdruck. Langsame Programmierung zielt darauf ab, Fehler und übermäßig schnelle Freisetzungspläne zu vermeiden. V-Modell (Software-Entwicklung) - eine Erweiterung des einheitlichen Systems für das Filtermodell (UP) ist ein iterativer Software-Entwicklungsmethodik-Rahmen auf der Grundlage einer einheitlichen Modellierungssprache (UML). UP organisiert die Entwicklung von Software in vier Phasen, jede besteht aus einem oder mehreren Durchführbarkeiten der Software in diesem Stadium der Entwicklung: Einführung, Ausarbeitung, Bau und Leitlinien. Viele Werkzeuge und Produkte sind vorhanden, um die Umsetzung zu erleichtern. Eines der beliebtesten Versionen von UP ist der Rationale Einheitsprozeß (RUP). Große Bang-Methode - ein Ansatz für kleine oder nicht definierte Projekte, das in der Regel wenig bis ohne Planung mit hohem Risiko umfasst. Meta-Designs Manche "Verfahrensmodelle" sind abstrakte Beschreibungen zur Bewertung, Vergleich und Verbesserung des von einer Organisation angenommenen spezifischen Prozesses. ISO/IEC 12207 ist die internationale Norm, die die Methode zur Auswahl, Umsetzung und Überwachung des Lebenszyklus von Software beschreibt. The Capability Maturity Modell Integration (CMMI) ist eines der führenden Modelle und basiert auf bewährten Praktiken. unabhängige Bewertungsgremien, wie gut sie ihre festgelegten Prozesse verfolgen, nicht über die Qualität dieser Prozesse oder die produzierte Software. CMMI hat CMM ersetzt. ISO 9000 beschreibt Normen für einen formal organisierten Prozess zur Herstellung eines Produkts und der Methoden zur Verwaltung und Überwachung des Fortschritts. Obwohl der Standard ursprünglich für den Produktionssektor geschaffen wurde, wurden auch ISO 9000 Normen für die Softwareentwicklung angewandt. Wie CMMI gewährleistet die Zertifizierung mit ISO 9000 nicht die Qualität des Endergebnisses, nur dass formalisierte Geschäftsprozesse folgen. ISO/IEC 15504 Informationstechnologie Prozessanalyse, auch bekannt als Software-Prozess-Verbesserung der Fähigkeitsbestimmung (SPICE), ist ein „Rahmen für die Bewertung von Softwareprozessen“. Diese Norm zielt darauf ab, ein klares Modell für den Prozessvergleich festzulegen. SPICE wird viel wie CMMI verwendet. Sie arbeitet an der Verwaltung, Kontrolle, Anleitung und Überwachung der Softwareentwicklung. Dieses Modell wird dann verwendet, um zu messen, was eine Entwicklungsorganisation oder ein Projektteam tatsächlich während der Softwareentwicklung tut. Diese Informationen werden analysiert, um Schwachstellen zu erkennen und Verbesserungen zu erzielen. Sie ermittelt auch Stärken, die für diese Organisation oder Team weiterhin oder in gemeinsame Praxis integriert werden können. ISO/IEC 24744 Software Engineering – Metamodel für Entwicklung Methodologien sind ein Powertype-basiertes Metamodell für Software-Entwicklungsmethoden. SPEM 2.0 von der Object Management Group Soft systems Method - eine allgemeine Methode zur Verbesserung der Managementverfahren - eine allgemeine Methode zur Verbesserung der Informationssysteme In der Praxis haben sich im Laufe der Jahre eine Vielzahl solcher Rahmenbedingungen entwickelt, jeweils mit eigenen anerkannten Stärken und Schwächen. Eine Software-Entwicklungsmethodik ist nicht unbedingt für die Nutzung aller Projekte geeignet. Jede der verfügbaren methodischen Rahmenbedingungen sind für bestimmte Arten von Projekten am besten geeignet, die auf verschiedenen technischen, organisatorischen, Projekt- und Teamüberlegungen basieren. Software-Entwicklungsorganisationen führen Prozessmethoden durch, um den Entwicklungsprozess zu erleichtern. Manchmal können Auftragnehmer Methoden verlangen, ein Beispiel ist die US-Verteidigungsindustrie, die eine Bewertung auf der Grundlage von Prozessmodellen verlangt, um Verträge zu erhalten. Internationale Norm zur Beschreibung der Methode zur Auswahl, Durchführung und Überwachung des Lebenszyklus für Software ist ISO/IEC 12207. Ein Jahrzehnte lang anhaltendes Ziel war es, wiederholte, vorhersehbare Prozesse zu finden, die Produktivität und Qualität verbessern. Manche versuchen, die scheinbar unbefriedigende Aufgabe der Software zu vereinheitlichen oder zu formalisieren. Andere wenden Projektmanagementtechniken an, um Software zu entwerfen. Große Anzahl von Software-Projekten erfüllen ihre Erwartungen in Bezug auf Funktionalität, Kosten oder Lieferzeit - siehe Liste der gescheiterten und überbudgetbezogenen Software-Projekte für einige bemerkenswerte Beispiele. Organisationen können eine Software Engineering-Prozess-Gruppe (SEPG) schaffen, die den Schwerpunkt für die Verbesserung der Verfahren bildet. Kompostiert von Line-Akteuren, die unterschiedliche Fähigkeiten besitzen, liegt die Gruppe im Zentrum der gemeinsamen Anstrengungen aller in der Organisation, die an der Verbesserung des Software-Engineering beteiligt ist. Ein besonderes Entwicklungsteam kann sich auch auf die Planung von Umgebungsdetails einigen, wie die integrierte Entwicklungsumfeld genutzt wird, und ein oder mehrere marktbeherrschende Programmierungsparate, Programmierungsstilregeln oder die Wahl bestimmter Softwarebibliotheken oder Software-Rahmen. Diese Details werden in der Regel nicht durch die Auswahl von Modell- oder allgemeinen Methoden bestimmt. Siehe auch Systementwicklung Lebenszyklus computergestützter Software-Engineering (ein Teil dieser Werkzeuge unterstützen spezifische Methoden) Liste der Philosophien der Softwareentwicklung Entwurf von Software Engineering OpenUP Projekt Management Software Entwicklungssoftware Entwicklungssoftware Schätzung der Software Freisetzung des Lebenszyklus Top-down und Bottom-up-Design# Informatik Verweise Externe Links Auswahl eines Entwicklungsansatzes an cms.hhs.gov. Gerhard Fischer, "Die Software-Technologie des 21. Jahrhunderts: Von Software Reuse bis hin zu kooperativem Softwaredesign" 2001 Karte flexibler Praktiken in Agile Alliance