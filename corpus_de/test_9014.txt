FreeRTOS ist ein Echtzeit-Betriebssystem-Kernel für eingebettete Geräte, die auf 35 Mikrocontroller-Plattformen portiert wurden. Es wird unter der MIT-Lizenz verteilt. Geschichte Der FreeRTOS-Kernel wurde ursprünglich von Richard Barry um 2003 entwickelt und später von Barrys Firma,Real Time Engineers Ltd. entwickelt und gepflegt.Im Jahr 2017 hat Real Time Engineers Ltd. die Leitung des FreeRTOS-Projekts an Amazon Web Services übergeben. Barry arbeitet weiterhin an FreeRTOS als Teil eines AWS-Teams. Implementierung FreeRTOS ist klein und einfach konzipiert. Der Kernel selbst besteht aus nur drei C-Dateien. Um den Code lesbar, einfach zu portieren und zu pflegen, wird er meist in C geschrieben, aber es gibt einige Montagefunktionen, die bei Bedarf enthalten sind (meist in architekturspezifischen Scheduler-Routinen). FreeRTOS bietet Methoden für mehrere Threads oder Aufgaben, Mutexes, Semaphores und Software-Timer. Ein taktloser Modus ist für Low-Power-Anwendungen vorgesehen. Gewindeprioritäten werden unterstützt. FreeRTOS-Anwendungen können vollständig statisch zugeordnet werden. Alternativ können RTOS-Objekte mit fünf Systemen der Speicherzuweisung dynamisch zugewiesen werden: nur zuordnen; mit einem sehr einfachen, schnellen, Algorithmus zuzuordnen und frei; ein komplexer, aber schneller und freier Algorithmus mit Speicherkoaleszenz; eine Alternative zu dem komplexeren Schema, das Speicherkoaleszenz enthält, die eine Heap über mehrere Speicherbereiche zu zerbrechen erlaubt.und C-Bibliothek zuzuordnen und frei mit einem gegenseitigen Ausschlussschutz. Es gibt keine der fortschrittlicheren Funktionen, die typischerweise in Betriebssystemen wie Linux oder Microsoft Windows gefunden werden, wie Gerätetreiber, erweitertes Speichermanagement, Benutzerkonten und Netzwerken. Der Schwerpunkt liegt auf Kompaktheit und Geschwindigkeit der Ausführung. FreeRTOS kann als "Thread-Bibliothek" und nicht als "Betriebssystem" gedacht werden, obwohl Kommandozeilenschnittstelle und POSIX-ähnliche I/O-Abstraktions-Add-Ons verfügbar sind. FreeRTOS implementiert mehrere Threads, indem das Hostprogramm in regelmäßigen kurzen Intervallen ein Thread-Tick-Verfahren aufgerufen wird. Die Thread-Tick-Methode schaltet Aufgaben in Abhängigkeit von Priorität und einem Rund-Robin-Scheduling-System. Das übliche Intervall beträgt 1 bis 10 Millisekunden (1/1000 bis 1/100 einer Sekunde), über einen Interrupt aus einem Hardware-Timer, aber dieses Intervall wird oft entsprechend einer bestimmten Anwendung geändert. Der Download enthält vorbereitete Konfigurationen und Demonstrationen für jeden Port und Compiler, so dass schnelle Anwendung Design. Die FreeRTOS.org Website enthält auch viele Dokumentationen und RTOS Tutorials (zusätzliche Anleitungen und Tutorials sind gegen Gebühr verfügbar), sowie Details des RTOS-Designs. Schlüsselmerkmale Buch- und Referenzhandbücher. Kleiner Speicherfußabdruck, niedriger Overhead und schnelle Ausführung. Tick-less Option für Low-Power-Anwendungen. Beabsichtigt für Hobbyisten und professionelle Entwickler, die an kommerziellen Produkten arbeiten. Der Scheduler kann sowohl für den präemptiven als auch für den kooperativen Betrieb konfiguriert werden. Coroutine-Unterstützung (Koordinationen in FreeRTOS sind einfache und leichte Aufgaben mit eingeschränkter Nutzung des Call Stacks) Trace-Unterstützung durch generische Spuren-Makros. Tools wie Tracealyzer von FreeRTOS-Partner Percepio können so das Laufzeitverhalten von FreeRTOS-basierten Systemen zum Debuggen und Verifizieren erfassen und visualisieren. Dazu gehören Task-Scheduling und Kernel-Aufrufe für Semaphore und Warteschlangen. Tracealyzer ist ein kommerzielles Werkzeug. Unterstützte Architekturen Derivations Amazon FreeRTOS Amazon bietet eine Erweiterung von FreeRTOS, genannt:FreeRTOS. Dies ist FreeRTOS mit Bibliotheken für IOT-Unterstützung, speziell für Amazon Web Services. Seit Version 10.0.0 im Jahr 2017 hat Amazon die Leitung des FreeRTOS-Codes übernommen, einschließlich aller Aktualisierungen des ursprünglichen Kernels. SAFERTOS SAFERTOS wurde als komplementäre Version von FreeRTOS entwickelt, mit gemeinsamer Funktionalität aber speziell für die sicherheitskritische Umsetzung konzipiert. FreeRTOS wurde HAZOP unterworfen und Schwächen identifiziert und behoben. Das Ergebnis wurde durch einen vollen IEC 61508 SIL 3 Entwicklungs-Lebenszyklus, die höchste Ebene für eine Software-only-Komponente gelegt. SAFERTOS wurde von WITTENSTEIN High Integrity Systems in Zusammenarbeit mit Real Time Engineers Ltd, dem primären Entwickler des FreeRTOS-Projekts, entwickelt. Sowohl SAFERTOS als auch FreeRTOS teilen den gleichen Planungsalgorithmus, haben ähnliche APIs und sind ansonsten sehr ähnlich, aber sie wurden mit unterschiedlichen Zielen entwickelt. SAFERTOS wurde ausschließlich in der C-Sprache entwickelt, um Anforderungen an die Zertifizierung an IEC61508 zu erfüllen. SAFERTOS kann ausschließlich im on-chip gelesenen Speicher eines Mikrocontrollers für die Einhaltung von Standards liegen. Bei der Implementierung in Hardware-Speicher kann SAFERTOS-Code nur in seiner ursprünglichen, bereits zertifizierten Konfiguration verwendet werden. Das bedeutet, dass die Zertifizierung von Systemen den Kernelanteil ihrer Designs nicht neu testen muss. SAFERTOS ist im ROM einiger Stellaris Microcontroller von Texas Instruments enthalten. SAFERTOS Quellcode muss nicht separat gekauft werden. In diesem Nutzungsszenario wird eine C-Header-Datei verwendet, um SAFERTOS API-Funktionen an ihren Standort im Nurlesespeicher abzubilden. OPENRTOS OPENRTOS ist eine kommerziell lizenzierte Version von Amazon FreeRTOS, verkauft von WITTENSTEIN High Integrity Systems. Dieses Produkt bietet Unterstützung und ermöglicht es Unternehmen, den Amazon FreeRTOS-Kernel und Bibliotheken ohne die a:FreeRTOS MIT-Lizenz zu verwenden. Siehe auch Embedded Betriebssystem Referenzen Externe Links Offizielle Website