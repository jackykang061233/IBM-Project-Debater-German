In Computernetzen ist ein Tunneling-Protokoll ein Kommunikationsprotokoll, das die Bewegung von Daten von einem Netzwerk zu einem anderen ermöglicht. Es beinhaltet die Möglichkeit, private Netzwerkkommunikationen über ein öffentliches Netzwerk (z.B. das Internet) über einen Prozess, der Verkapselung genannt wird, zu senden. Da Tunneling die Verkehrsdaten in eine andere Form umpackt, vielleicht mit Verschlüsselung als Standard, kann es die Art des Verkehrs verbergen, der durch einen Tunnel geführt wird. Das Tunneling-Protokoll funktioniert, indem der Datenteil eines Pakets (die Nutzlast) verwendet wird, um die Pakete zu tragen, die den Dienst tatsächlich bereitstellen. Tunneling verwendet ein geschichtetes Protokollmodell wie das der OSI- oder TCP/IP-Protokoll-Suite, verletzt aber in der Regel die Schichtung, wenn die Nutzlast verwendet wird, um einen Dienst zu führen, der nicht normalerweise vom Netzwerk bereitgestellt wird. Typischerweise arbeitet das Lieferprotokoll in dem geschichteten Modell gleich oder höher als das Nutzlastprotokoll. Ein Tunneling-Protokoll kann beispielsweise erlauben, dass ein fremdes Protokoll über ein Netzwerk läuft, das dieses bestimmte Protokoll nicht unterstützt, wie z.B. IPv6 über IPv4. Eine weitere wichtige Verwendung ist die Bereitstellung von Diensten, die unpraktisch oder unsicher sind, die nur über die zugrunde liegenden Netzwerkdienste angeboten werden, wie etwa die Bereitstellung einer Unternehmensnetzwerkadresse an einen entfernten Benutzer, dessen physikalische Netzwerkadresse nicht Teil des Unternehmensnetzwerks ist. Umfassende Firewall-Politik Benutzer können auch Tunneling verwenden, um eine Firewall "überspringen", mit einem Protokoll, das die Firewall normalerweise blockieren würde, aber in einem Protokoll verpackt, dass die Firewall nicht blockiert, wie HTTP. Wenn die Firewall-Politik diese Art von Verpackung nicht ausdrücklich ausschließt, kann dieser Trick dazu dienen, die beabsichtigte Firewall-Politik (oder jede Reihe von verriegelten Firewall-Politiken) zu umgehen. Eine weitere HTTP-basierte Tunnelingmethode verwendet die HTTP CONNECT Methode/Command. Ein Client stellt den HTTP CONNECT-Befehl einem HTTP-Proxy aus. Der Proxy macht dann eine TCP-Verbindung zu einem bestimmten Server:port und gibt Daten zwischen diesem Server:port und der Client-Verbindung weiter. Da dies ein Sicherheitsloch erstellt, beschränken CONNECT-fähige HTTP-Proxies den Zugriff auf die CONNECT-Methode häufig ein. Der Proxy ermöglicht Verbindungen nur zu bestimmten Ports, wie 443 für HTTPS. Technische Übersicht Als Beispiel für Netzwerkschicht über Netzwerkschicht dient Generic Routing Encapsulation (GRE), ein Protokoll, das über IP (IP-Protokollnummer 47) läuft, oft dazu, IP-Pakete mit RFC 1918 Privatadressen über das Internet zu übertragen, indem Pakete mit öffentlichen IP-Adressen verwendet werden. In diesem Fall sind die Liefer- und Nutzlastprotokolle gleich, aber die Nutzlastadressen sind mit denen des Liefernetzes unvereinbar. Es ist auch möglich, eine Verbindung unter Verwendung der Datenlinkschicht herzustellen. Das Layer 2 Tunneling Protocol (L2TP) ermöglicht die Übertragung von Frames zwischen zwei Knoten. Ein Tunnel wird standardmäßig nicht verschlüsselt: Das gewählte TCP/IP-Protokoll bestimmt das Sicherheitsniveau. SSH nutzt den Port 22, um die Datenverschlüsselung von Nutzlasten über eine öffentliche Netzwerkverbindung (z.B. Internet) zu ermöglichen, wodurch VPN-Funktionalität bereitgestellt wird. IPsec verfügt über einen End-to-End-Transportmodus, kann aber auch über ein vertrauenswürdiges Sicherheits-Gateway in einem Tunnelbetrieb arbeiten. Um einen bestimmten Protokollstapel durch Tunneling zu verstehen, müssen die Netzwerkingenieure sowohl die Payload- als auch die Lieferprotokoll-Sets verstehen. Gemeinsame Tunneling-Protokolle IP in IP (Protokoll 4): IP in IPv4/IPv6 SIT/IPv6 (Protokoll 41): IPv6 in IPv4/IPv6 GRE (Protokoll 47): Generisches Routing Encapsulation OpenVPN (UDP-Port 1194)SSTP (TCP-Port 443): Secure Socket Tunneling Protocol IPSec (Protokoll 50 und 51): Internet Protocol Security L2TP (Protokoll 115):Layer 2 Tunneling Protocol VXLAN (UDP-Port 4789): Virtual Extensible Local Area Network. Kabeljau Secure Shell Tunneling Ein Secure Shell (SSH) Tunnel besteht aus einem verschlüsselten Tunnel, der über eine SSH-Protokollverbindung erstellt wurde. Benutzer können SSH-Tunnel einrichten, um unverschlüsselten Verkehr über ein Netzwerk über einen verschlüsselten Kanal zu übertragen. Es ist ein softwarebasierter Ansatz zur Netzwerksicherheit und das Ergebnis ist eine transparente Verschlüsselung. Zum Beispiel, Microsoft Windows-Maschinen können Dateien mit dem Protokoll Server Message Block (SMB) teilen, einem nicht verschlüsselten Protokoll. Wenn man ein Microsoft Windows-Datei-System remote über das Internet zu montieren, könnte jemand auf der Verbindung snooping übertragene Dateien sehen. Um das Windows-Dateisystem sicher zu montieren, kann man einen SSH-Tunnel erstellen, der den gesamten SMB-Verkehr über einen verschlüsselten Kanal zum entfernten Dateiserver führt. Obwohl das SMB-Protokoll selbst keine Verschlüsselung enthält, bietet der verschlüsselte SSH-Kanal, durch den es fährt, Sicherheit. Sobald eine SSH-Verbindung aufgebaut ist, startet der Tunnel mit SSH, der einen Port auf dem entfernten oder lokalen Host hört. Alle Verbindungen dazu werden an die angegebene Adresse und den von dem gegnerischen (wie zuvor) Host stammenden Port weitergeleitet. Eine TCP-verkapselnde Nutzlast (z.B. PPP) über eine TCP-basierte Verbindung (z.B. SSH-Portweiterleitung) wird als TCP-over-TCP bekannt und kann so einen dramatischen Verlust an Übertragungsleistung (ein Problem, das als "TCP-Schmelzunge" bezeichnet wird) verursachen, weshalb virtuelle private Netzwerksoftware stattdessen ein Protokoll einfacher als TCP für die Tunnelverbindung verwenden kann. Dies ist jedoch oft kein Problem bei der Verwendung von OpenSSH-Port-Forwarding, weil viele Anwendungsfälle nicht TCP-over-TCP-Tunneling mit sich bringen; die Abschmelzung wird vermieden, weil der OpenSSH-Client die lokale, clientseitige TCP-Verbindung verarbeitet, um auf die tatsächliche Nutzlast zu gelangen, die gesendet wird, und sendet dann diese Nutzlast direkt über die eigene TCP-Verbindung des Tunnels auf die Server-Wow-Seite ab. Selbstverständlich erfolgt diese Umhüllung und Entwrapping auch in umgekehrter Richtung des bidirektionalen Tunnels. SSH-Tunnel bieten ein Mittel, um Firewalls zu umgehen, die bestimmte Internet-Dienste verbieten – solange ein Aufstellungsort ausgehende Verbindungen ermöglicht. Beispielsweise kann eine Organisation den Zugriff auf Internet-Webseiten (Port 80) verbieten, ohne den Proxy-Filter der Organisation zu durchlaufen (die der Organisation ein Mittel zur Überwachung und Kontrolle des durch das Internet gesehenen Nutzers zur Verfügung stellt). Aber Benutzer können nicht wollen, dass ihre Web-Verkehr durch den Proxy-Filter der Organisation überwacht oder blockiert. Wenn Benutzer sich mit einem externen SSH-Server verbinden können, können sie einen SSH-Tunnel erstellen, um einen bestimmten Port auf ihrer lokalen Maschine an Port 80 auf einem Remote-Webserver weiterzuleiten. Um auf den Remote-Webserver zuzugreifen, würden Benutzer ihren Browser auf den lokalen Port unter http://localhost hinweisen. Einige SSH-Clients unterstützen die dynamische Portweiterleitung, die es dem Benutzer ermöglicht, eine SOCKS 4/5 Proxy zu erstellen. In diesem Fall können Benutzer ihre Anwendungen konfigurieren, um ihren lokalen SOCKS Proxy-Server zu verwenden. Dies gibt mehr Flexibilität als die Schaffung eines SSH-Tunnels zu einem einzigen Port, wie zuvor beschrieben. SOCKS kann den Benutzer von den Einschränkungen der Verbindung nur mit einem vordefinierten Remoteport und Server befreien. Wenn eine Anwendung SOCKS nicht unterstützt, kann ein Proxyifier verwendet werden, um die Anwendung auf den lokalen SOCKS Proxyserver umzuleiten. Einige Proxyifier, wie Proxycap, unterstützen SSH direkt und vermeiden so die Notwendigkeit eines SSH-Clients. In den letzten Versionen von OpenSSH ist es sogar erlaubt, Schicht 2 oder Schicht 3 Tunnel zu erstellen, wenn beide Enden solche Tunneling-Funktionen ermöglicht haben. Dies erzeugt auf beiden Enden der Verbindung Tun (Schicht 3, Standard) oder Tap (Schicht 2) virtuelle Schnittstellen. Dadurch kann ein normales Netzwerkmanagement und Routing verwendet werden, und bei Verwendung auf Routern kann der Verkehr für ein gesamtes Subnetz getunnelt werden. Ein paar Tap virtuelle Schnittstellen funktionieren wie ein Ethernet-Kabel, das beide Enden der Verbindung verbindet und Kernelbrücken verbinden kann. Siehe auch HTTP Tunnel ICMP Tunnel NVGRE GPRSTunnelling Protocol (GTP) Pseudo-wire Tunnel Broker Virtual Extensible LAN (VXLAN)Virtuelles privates Netzwerk (VPN) Stunnel OSI Modell (Diagram) Referenzen Dieser Artikel basiert auf dem Material, das vor dem 1. November 2008 aus dem Free On-line Dictionary of Computing stammt und unter den Relicensing-Bedingungen der GFDL, Version 1.3 oder später aufgenommen wurde. Externe Links PortFusion verteilt reverse / forward, lokale Vorwärts-Proxy- und Tunneling-Lösung für alle TCP-Protokolle SSH VPN Tunnel, siehe SSH-BASED VIRTUAL PRIVATE NETWORKS Abschnitt BarbaTunnel Project - Kostenlose Open Source Implementierung von HTTP-Tunnel und UDP-Tunnel auf Windows VpnHood Project - Kostenlose Open Source Implementierung eines VPNs mit Steckdosen-Umleitung