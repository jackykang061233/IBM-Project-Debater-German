Eine diskrete Cosinustransformation (DCT) drückt eine endliche Folge von Datenpunkten in Bezug auf eine Summe von bei unterschiedlichen Frequenzen oszillierenden Cosinusfunktionen aus. Die DCT, die 1972 von Nasir Ahmed vorgeschlagen wurde, ist eine weit verbreitete Transformationstechnik in der Signalverarbeitung und Datenkompression. Es wird in den meisten digitalen Medien verwendet, einschließlich digitale Bilder (wie JPEG und HEIF, wo kleine hochfrequente Komponenten verworfen werden können), digitales Video (wie MPEG und H.26x,) digitales Audio (wie Dolby Digital, MP3 und AAC,) digitales Fernsehen (wie SDTV, HDTV und VOD,) digitales Radio (wie AAC+ und DAB,) + AC und Sprachcodierung (wie Aen). DCTs sind auch für zahlreiche andere Anwendungen in Wissenschaft und Technik wichtig, wie digitale Signalverarbeitung, Telekommunikationsgeräte, Reduzierung der Netzwerkbandbreitennutzung und spektrale Methoden für die numerische Lösung von Teildifferenzgleichungen. Die Verwendung von Cosinus anstelle von Sinusfunktionen ist für die Kompression kritisch, da sich (wie unten beschrieben) herausstellt, dass weniger Cosinusfunktionen benötigt werden, um ein typisches Signal anzunähern, während bei Differentialgleichungen die Cosine eine bestimmte Wahl der Grenzbedingungen ausdrücken. Insbesondere handelt es sich bei einem DCT um eine Fourier-bezogene Transformation ähnlich der diskreten Fourier-Transformation (DFT), aber nur um echte Zahlen. Die DCTs sind in der Regel mit Fourier-Serie-Koeffizienten einer periodisch und symmetrisch erweiterten Sequenz verbunden, während DFTs mit Fourier-Serie-Koeffizienten von nur periodisch erweiterten Sequenzen zusammenhängen. DCTs entsprechen DFTs von etwa der doppelten Länge, die auf realen Daten mit gerader Symmetrie (da die Fourier-Transformation einer realen und sogar funktionierenden Funktion real und sogar ist), während in einigen Varianten die Eingabe- und/oder Ausgabedaten um eine halbe Probe verschoben werden. Es gibt acht Standard-DCT-Varianten, von denen vier gemeinsam sind. Die häufigste Variante der diskreten Cosinus-Transformation ist die Typ-II DCT, die oft einfach "die DCT" genannt wird. Dies war die ursprüngliche DCT, wie sie von Ahmed vorgeschlagen wurde. Seine Inverse, die Typ-III DCT, wird entsprechend oft einfach "die inverse DCT" oder "die IDCT" genannt. Zwei verwandte Transformationen sind die diskrete Sinustransformation (DST), die einer DFT von realen und ungeraden Funktionen entspricht, und die modifizierte diskrete Cosinustransformation (MDCT), die auf einem DCT von überlappenden Daten basiert. Mehrdimensionale DCTs (MD DCTs) werden entwickelt, um das Konzept von DCT auf MD-Signale zu erweitern. Es gibt mehrere Algorithmen, um MD DCT zu berechnen. Es wurden verschiedene schnelle Algorithmen entwickelt, um die rechnerische Komplexität der Implementierung von DCT zu reduzieren. Eines davon ist die ganze Zahl DCT (IntDCT), eine ganzzahlige Annäherung der Standard DCT, die in mehreren ISO/IEC und ITU-T internationalen Standards verwendet wird. DCT-Verdichtung, auch Blockkompression genannt, komprimiert Daten in Sätzen diskreter DCT-Blöcke. DCT-Blöcke können eine Reihe von Größen, einschließlich 8x8 Pixel für den Standard DCT, und variierte ganze DCT-Größen zwischen 4x4 und 32x32 Pixel. Die DCT verfügt über eine starke "Energieverdichtung"-Eigenschaft, die bei hohen Datenverdichtungsverhältnissen eine hohe Qualität erreichen kann. Jedoch können blockartige Kompressionsartefakte auftreten, wenn eine starke DCT-Verdichtung angewendet wird. Geschichte Die diskrete Kosinustransformation (DCT) wurde zunächst von Nasir Ahmed konzipiert, während er an der Kansas State University arbeitete, und er schlug 1972 das Konzept der National Science Foundation vor. Er beabsichtigte ursprünglich DCT zur Bildkompression. Ahmed entwickelte einen praktischen DCT-Algorithmus mit seinem Doktoranden T. Natarajan und Freund K. R. Rao an der University of Texas in Arlington 1973, und sie fanden, dass es der effizienteste Algorithmus für Bildkompression war. Sie präsentierten ihre Ergebnisse in einem Januar 1974 Papier mit dem Titel "Discrete Cosine Transform". Es beschreibt, was nun als Typ-II-DCT (DCT-II,) sowie als Typ-III-Inverse DCT (IDCT) bezeichnet wird. Es war eine Benchmark-Publikation und wurde seit ihrer Veröffentlichung als grundlegende Entwicklung in tausenden von Werken genannt. Die Grundlagenforschung und -veranstaltungen, die zur Entwicklung der DCT führten, wurden in einer späteren Veröffentlichung von Ahmed zusammengefasst: "How I Came Up with the Discrete Cosine Transform". Seit ihrer Einführung im Jahre 1974 gibt es erhebliche Untersuchungen über die DCT. 1977, Wen-Hsiung Chen veröffentlichte eine Zeitung mit C. Harrison Smith und Stanley C. Fralick, die einen schnellen DCT-Algorithmus präsentierte, und er gründete Compression Labs, um DCT-Technologie zu kommerziellisieren. Weitere Entwicklungen sind ein Papier von 1978 von M.J Narasimha und A.M Peterson sowie ein Papier von B.G Lee. Diese Forschungsarbeiten, zusammen mit dem Original 1974 Ahmed-Papier und dem 1977 Chen-Papier, wurden von der Joint Photographic Experts Group als Basis für den verlustigen Bildkompressionsalgorithmus von JPEG im Jahr 1992 zitiert. Im Jahr 1975 hat John A. Roese und Guner S. Robinson die DCT für bewegungskompensierte Video-Codierung für den Interframe angepasst. Sie experimentierten mit der DCT und der schnellen Fourier-Transformation (FFT), die sowohl interframe-Hybrid-Codeer entwickelt, und fanden heraus, dass die DCT aufgrund ihrer reduzierten Komplexität die effizienteste ist, um Bilddaten bis zu 0,25-bit pro Pixel für eine Videotelephone-Szene mit Bildqualität zu komprimieren, die einem Intra-frame-Codeer mit 2-bit pro Pixel vergleichbar ist. Die DCT wurde auf Videocodierung von Wen-Hsiung Chen angewendet, die 1977 einen schnellen DCT-Algorithmus mit C.H Smith und S.C Fralick entwickelt und Compression Labs gegründet, um DCT-Technologie zu vermarkten. 1979 entwickelten Anil K. Jain und Jaswant R. Jain die bewegungskompensierte DCT-Videokompression, auch Blockbewegungskompensation genannt. Dies führte dazu, dass Chen 1981 einen praktischen Videokompressionsalgorithmus entwickelt hat, genannt Bewegungkompensierte DCT oder adaptive Szenencodierung. Motion-kompensierte DCT später wurde die Standard-Codierungstechnik für Videokompression ab Ende der 1980er Jahre. Die ganze Zahl DCT wird in Advanced Video Coding (AVC,) im Jahr 2003 eingeführt, und High Efficiency Video Coding (HEVC,) in 2013 eingeführt verwendet. Die ganze Zahl DCT wird auch im High Efficiency Image Format (HEIF) verwendet, das eine Teilmenge des HEVC-Videocodierungsformats zur Codierung von stillen Bildern verwendet. Eine DCT-Variante, die modifizierte diskrete Cosinus-Transformation (MDCT), wurde 1987 von John P. Princen, A.W Johnson und Alan B. Bradley an der University of Surrey entwickelt, nach früherer Arbeit von Princen und Bradley im Jahr 1986. Das MDCT wird in den meisten modernen Audiokompressionsformaten verwendet, wie Dolby Digital (AC-3,) MP3 (der einen hybriden DCT-FFT-Algorithmus verwendet), Advanced Audio Coding (AAC,) und Vorbis (Ogg). Die diskrete Sinustransformation (DST) wurde aus dem DCT abgeleitet, indem der Neumann-Zustand bei x = 0 durch einen Dirichlet-Zustand ersetzt wurde. Die DST wurde 1974 im DCT-Papier von Ahmed, Natarajan und Rao beschrieben.A type-I DST (DST-I) wurde später von Anil K beschrieben. Jain 1976 und ein Typ-II-DST (DST-II) wurde dann 1978 von H.B Kekra und J.K Solanka beschrieben. NasirAhmed entwickelte 1995 auch einen verlustfreien DCT-Algorithmus mit Giridhar Mandyam und Neeraj Magotra an der University of New Mexico. Dadurch kann die DCT-Technik zur verlustfreien Verdichtung von Bildern verwendet werden. Es ist eine Modifikation des ursprünglichen DCT-Algorithmus und enthält Elemente der inversen DCT und Delta-Modulation. Es ist ein effektiver verlustfreier Kompressionsalgorithmus als Entropie-Codierung. Lossless DCT ist auch als LDCT bekannt. Wavelet-Codierung, die Verwendung von Wavelet verwandelt sich in Bildkompression, begann nach der Entwicklung von DCT-Codierung. Die Einführung des DCT führte zur Entwicklung der Wavelet-Codierung, einer Variante der DCT-Codierung, die Wavelets anstelle des blockbasierten Algorithmus von DCT verwendet. Die diskrete Wavelet-Transformation (DWT)-Codierung wird im JPEG 2000 Standard verwendet, der von 1997 bis 2000 entwickelt wurde, und im 2008 veröffentlichten Dirac-Videokompressionsformat des BBC. Wavelet-Codierung ist prozessorintensiver, und es muss noch weit verbreitete Bereitstellung im verbraucherorientierten Einsatz sehen. Anwendungen Die DCT ist die am weitesten verbreitete Transformationstechnik in der Signalverarbeitung und bei weitem die am weitesten verbreitete lineare Transformation in der Datenkompression. DCT-Datenkompression war für die Digitale Revolution grundlegend. Unkomprimierte digitale Medien sowie verlustlose Kompression hatten impraktisch hohe Speicher- und Bandbreitenanforderungen, die durch die hocheffiziente DCT verlustige Kompressionstechnik deutlich reduziert wurden, die in der Lage war, Datenkompressionsverhältnisse von 8:1 bis 14:1 für nahezu Studioqualität bis zu 100:1 für akzeptable Inhalte zu erreichen. Die breite Annahme von DCT-Komprimierungsstandards führte zur Entstehung und Verbreitung digitaler Medientechnologien, wie digitale Bilder, digitale Fotos, digitales Video, Streaming-Medien, digitales Fernsehen, Streaming-TV, Video-on-Demand (VOD,) digitales Kino, High-Definition-Video (HD-Video,) und High-Definition-TV (HDTV). Das DCT, insbesondere das DCT-II, wird häufig in der Signal- und Bildverarbeitung, insbesondere zur verlustfreien Kompression, eingesetzt, da es eine starke "Energieverdichtung"-Eigenschaft aufweist: In typischen Anwendungen neigt die meisten Signalinformationen dazu, sich in wenigen niederfrequenten Komponenten des DCT zu konzentrieren. Für stark korrelierte Markov-Prozesse kann sich die DCT der Verdichtungseffizienz der Karhunen-Loève-Transformation (die im Dekorrelationssinn optimal ist) nähern. Wie weiter unten erläutert, ergibt sich dies aus den in den Kosinusfunktionen impliziten Randbedingungen. Auch bei der Lösung von partiellen Differentialgleichungen nach spektralen Methoden werden DCT weit verbreitet eingesetzt, wobei die unterschiedlichen Varianten des DCT an den beiden Enden des Arrays geringfügig unterschiedliche Gleich-/Gleichgrenzenbedingungen entsprechen. DCTs sind auch eng mit Chebyshev-Polynomen verwandt, und schnelle DCT-Algorithmen (unten) werden in Chebyshev-Annäherung willkürlicher Funktionen durch Reihe von Chebyshev-Polynomen verwendet, beispielsweise in Clenshaw-Curtis-Quertur. Der DCT ist der Kodierungsstandard für Multimedia-Telekommunikationsgeräte. Es ist weit verbreitet für Bit-Rate-Reduktion und die Nutzung der Netzwerk-Bandbreite zu reduzieren. Die DCT-Kompression reduziert die für digitale Signale erforderliche Speicher- und Bandbreite erheblich. Allgemeine Anwendungen Die DCT ist in vielen Anwendungen weit verbreitet, darunter die folgenden. DCT visuelle Medienstandards Der DCT-II, auch als einfach der DCT bezeichnet, ist die wichtigste Bildkompressionstechnik. Es wird in Bildkompressionsstandards wie JPEG und Videokompressionsstandards wie H.26x, MJPEG, MPEG, DV, Theora und Daala verwendet. Dort werden die zweidimensionalen DCT-II von N × N \{displaystyle N\times N} Blöcke berechnet und die Ergebnisse quantisiert und entropiecodiert. In diesem Fall ist N \{displaystyle N} typischerweise 8 und die DCT-II-Formel wird auf jede Zeile und Spalte des Blocks angewendet. Das Ergebnis ist ein 8 × 8-Transformationskoeffizienten-Array, bei dem das (0, 0) \{displaystyle (0,0)}-Element (top-left) die DC (Nullfrequenz)-Komponente ist und Einträge mit zunehmenden vertikalen und horizontalen Indexwerten höhere vertikale und horizontale Raumfrequenzen darstellen. Advanced Video Coding (AVC) verwendet die ganze Zahl DCT (IntDCT), eine ganzzahlige Näherung des DCT. Es verwendet 4x4 und 8x8 ganze DCT Blöcke. High Efficiency Video Coding (HEVC) und das High Efficiency Image Format (HEIF) verwenden verschiedenste DCT-Blockgrößen zwischen 4x4 und 32x32 Pixel. Ab 2019 ist AVC bei weitem das am häufigsten verwendete Format für die Aufnahme, Komprimierung und Verteilung von Videoinhalten, die von 91% von Videoentwicklern verwendet werden, gefolgt von HEVC, die von 43% von Entwicklern verwendet wird. Bildformate Videoformate MDCT-Audiostandards Allgemeine Audiosprache-Codierung MD DCT Multidimensionale DCTs (MD DCTs) haben mehrere Anwendungen, hauptsächlich 3-D DCTs wie die 3-D DCT-II, die mehrere neue Anwendungen wie Hyperspectral Imaging-Codierung, variable zeitliche Länge 3-D DCT-Codierung, Video-Codierung Algorithmen, adaptive Video Codierung und 3-D-Compression. Durch die Erweiterung der Hardware, Software und Einführung mehrerer schneller Algorithmen steigt die Notwendigkeit, M-D DCTs zu verwenden. DCT-IV hat Popularität für seine Anwendungen bei der schnellen Umsetzung von neu bewerteten Polyphasenfilterbanken, gerafften orthogonalen Transformations- und cosinemodulierten Wavelet-Basen gewonnen. Die digitale Signalverarbeitung DCT spielt bei der digitalen Signalverarbeitung eine sehr wichtige Rolle. Durch die Verwendung des DCT können die Signale komprimiert werden. DCT kann in der Elektrokardiographie zur Komprimierung von EKG-Signalen verwendet werden. DCT2 bietet ein besseres Kompressionsverhältnis als DCT. Die DCT ist weit verbreitet in digitalen Signalprozessoren (DSP) sowie digitaler Signalverarbeitungssoftware implementiert. Viele Unternehmen haben DSPs auf Basis von DCT-Technologie entwickelt. DCTs sind weit verbreitet für Anwendungen wie Codierung, Decodierung, Video, Audio, Multiplexing, Steuersignale, Signalisierung und Analog-Digital-Wandlung. DCTs werden auch häufig für High-Definition-Fernsehgeräte (HDTV)-Encoder/Decoder-Chips verwendet. Compression Artefakte Ein häufiges Problem mit DCT-Verdichtung in digitalen Medien sind blockartige Kompressionsartefakte, die durch DCT-Blöcke verursacht werden. Der DCT-Algorithmus kann blockbasierte Artefakte verursachen, wenn eine starke Kompression angewendet wird. Durch die Verwendung des DCT in den meisten digitalen Bild- und Videocodierungsstandards (wie JPEG, H.26x und MPEG-Formate) sind DCT-basierte blockartige Kompressionsartefakte in digitalen Medien weit verbreitet. In einem DCT-Algorithmus wird ein Bild (oder Bild in einer Bildfolge) in quadratische Blöcke unterteilt, die unabhängig voneinander verarbeitet werden, dann wird das DCT dieser Blöcke genommen und die resultierenden DCT-Koeffizienten quantisiert. Dieses Verfahren kann zur Blockierung von Artefakten führen, vor allem bei hohen Datenkompressionsverhältnissen. Dies kann auch den "Moskito-Rausch"-Effekt verursachen, der häufig im digitalen Video (wie die MPEG-Formate) zu finden ist. DCT-Blöcke werden oft in der Glimmkunst verwendet. Der Künstler Rosa Menkman nutzt DCT-basierte Kompressionsartefakte in ihrer Gliitch-Kunst, insbesondere die DCT-Blöcke, die in den meisten digitalen Medienformaten wie JPEG-Digital-Bilder und MP3-Digital-Audio gefunden werden. Ein weiteres Beispiel ist Jpegs vom deutschen Fotografen Thomas Ruff, der absichtliche JPEG-Artefakte als Basis des Bildes verwendet. Informelle Übersicht Wie jede Fourier-bezogene Transformation drücken diskrete Cosinustransformationen (DCT) eine Funktion oder ein Signal in Bezug auf eine Summe von Sinusoiden mit unterschiedlichen Frequenzen und Amplituden aus. Wie die diskrete Fourier-Transformation (DFT) arbeitet ein DCT auf einer Funktion an einer endlichen Anzahl diskreter Datenpunkte. Die offensichtliche Unterscheidung zwischen einem DCT und einer DFT besteht darin, dass der frühere nur Cosinusfunktionen verwendet, während dieser sowohl Cosine als auch Sinus (in Form komplexer Exponentials) verwendet. Dieser sichtbare Unterschied ist jedoch lediglich eine Folge einer tieferen Unterscheidung: Ein DCT impliziert unterschiedliche Randbedingungen von der DFT oder anderen verwandten Transformationen. Die Fourier-bezogenen Transformationen, die auf einer Funktion über eine endliche Domäne, wie die DFT oder DCT oder eine Fourier-Serie arbeiten, können als implizit eine Erweiterung dieser Funktion außerhalb der Domäne betrachtet werden. Das heißt, sobald Sie eine Funktion f ( x ) \{displaystyle f(x)} schreiben als Summe von Sinusoiden können Sie diese Summe bei jedem x \{displaystyle x} auswerten, auch für x \{displaystyle x}, wo das Original f ( x ) \{displaystyle f(x)} nicht angegeben wurde. Die DFT, wie die Fourier-Serie, impliziert eine periodische Verlängerung der ursprünglichen Funktion. Eine DCT, wie eine Cosine-Transformation, impliziert eine gleichmäßige Erweiterung der ursprünglichen Funktion. Da DCT jedoch auf endlichen, diskreten Sequenzen arbeiten, ergeben sich zwei Probleme, die nicht für die kontinuierliche Cosinus-Transformation gelten. Zunächst muss angegeben werden, ob die Funktion sowohl an den linken als auch an den rechten Grenzen der Domäne (d.h. die Min-n- und max-n-Grenzen in den untenstehenden Definitionen) gerade oder ungerade ist. Zweitens muss man angeben, um welchen Punkt die Funktion gerade oder seltsam ist. Betrachten Sie insbesondere eine Sequenz abcd von vier gleich beabstandeten Datenpunkten und sagen Sie, dass wir eine noch linke Grenze festlegen. Es gibt zwei sinnvolle Möglichkeiten: Entweder liegen die Daten sogar um die Probe a, in diesem Fall ist die gerade Erweiterung dcbabcd, oder die Daten liegen sogar um den Punkt auf halbem Weg zwischen a und dem vorherigen Punkt, wobei die gerade Erweiterung dcbaabcd (a wiederholt wird). Diese Wahlen führen zu allen Standardvariationen von DCTs und auch diskrete Sinustransformationen (DSTs.) Jede Grenze kann entweder sogar oder ungerad sein (2 Wahlen pro Grenze) und kann symmetrisch um einen Datenpunkt oder den Punkt auf halbem Weg zwischen zwei Datenpunkten (2 Wahlen pro Grenze,) für insgesamt 2 × 2 × 2 × 2 × 2 = 16 Möglichkeiten sein. Die Hälfte dieser Möglichkeiten, die auch die linke Grenze haben, entspricht den 8 Arten von DCT; die andere Hälfte sind die 8 Arten von DST. Diese unterschiedlichen Randbedingungen beeinflussen stark die Anwendungen der Transformation und führen zu einzigartigen nützlichen Eigenschaften für die verschiedenen DCT-Typen. Am unmittelbarsten werden bei Verwendung von Fourier-bezogenen Transformationen zur Lösung von partiellen Differentialgleichungen nach spektralen Methoden die Randbedingungen direkt als Teil des Problems angegeben. Oder für die MDCT (basierend auf dem Typ-IV DCT) sind die Randbedingungen in der kritischen Eigenschaft des MDCT von zeitdomänen Aliasing Storno innig beteiligt. In subtiler Weise sind die Randbedingungen für die "Energieverdichtung"-Eigenschaften verantwortlich, die DCTs für die Bild- und Audiokompression nützlich machen, da die Grenzen die Konvergenzgeschwindigkeit jeder Fourier-ähnlichen Serie beeinflussen. Insbesondere ist es bekannt, dass etwaige Diskontinuitäten in einer Funktion die Konvergenzgeschwindigkeit der Fourier-Serie verringern, so dass mehr Sinusoide benötigt werden, um die Funktion mit einer gegebenen Genauigkeit darzustellen. Das gleiche Prinzip regelt die Nützlichkeit der DFT und anderer Transformationen zur Signalkompression; je glatter eine Funktion ist, desto weniger Begriffe in ihrer DFT oder DCT sind erforderlich, um sie genau darzustellen, und je mehr sie komprimiert werden kann. (Hier denken wir an die DFT bzw. DCT als Approximation für die Fourier-Serie bzw. Cosine-Serie einer Funktion, um über ihre Glätte zu sprechen.) Die implizite Periodizität der DFT bedeutet jedoch, dass in der Regel an den Grenzen Diskontinuitäten auftreten: Ein beliebiges Segment eines Signals ist unwahrscheinlich, dass der gleiche Wert sowohl an der linken als auch an der rechten Grenze liegt. (Ein ähnliches Problem ergibt sich für den DST, bei dem die ungerade linke Randbedingung eine Diskontinuität für jede Funktion impliziert, die an dieser Grenze nicht zufällig Null ist.) Demgegenüber ergibt ein DCT, bei dem beide Begrenzungen sogar immer eine kontinuierliche Ausdehnung an den Grenzen ergeben (obwohl die Steigung im allgemeinen diskontinuierlich ist). Aus diesem Grund führen DCTs, insbesondere DCTs der Typen I, II, V und VI (die Typen, die zwei gerade Grenzen haben) in der Regel besser für die Signalkompression aus als DFTs und DSTs. In der Praxis wird für solche Anwendungen üblicherweise ein Typ-II-DCT bevorzugt, zum Teil aus Gründen der rechnerischen Bequemlichkeit. Formale Definition Die diskrete Cosinus-Transformation ist eine lineare, invertierbare Funktion f : R N → R N \{displaystyle f:\mathbb {R} ^{N}\to \mathbb {R} ^^{N} (wo R \{displaystyle \mathbb {R}} den Satz von realen Zahlen bedeutet) oder gleichwertig eine invertierbare N × N quadratische Matrix. Es gibt mehrere Varianten der DCT mit leicht modifizierten Definitionen. Die N-Realzahlen x0, ..., xN-1 werden in die N-Realzahlen X0, ..., XN-1 gemäß einer der Formeln umgewandelt: DCT-I X k = 1 2 ( x 0 + ( - 1 )k x N - 1 ) + Σ n = 1 N - 2 x n cos ‡ [ π N - 1 n k ] k = 0, ..., N - 1. \{displaystyle X_{k}={\frac 1}{2}}(x_{0}+(-1)^{k}x_{N-1})+\sum n=1^{N-2}x_{n}\cos links[{\frac \{pi {N-1}nk\right]\quad \quad k=0,\dots ,N-1.} Einige Autoren multiplizieren die x0 und xN-1 Begriffe durch √2, und multiplizieren entsprechend die X0 und XN-1 Begriffe um 1/√2. Dies macht die DCT-I-Matrix orthogonal, wenn eine weitere Multiplikation um einen Gesamtmaßstabsfaktor von 2 N - 1 \{displaystyle \{sqrt \{tfrac 2}{N-1, bricht aber die direkte Korrespondenz mit einer real-even DFT. Das DCT-I ist exakt äquivalent (bis zu einem Gesamtmaßstabsfaktor von 2) zu einer DFT von 2 N - 2 \{displaystyle 2N-2} realen Zahlen mit gleichmäßiger Symmetrie. Beispielsweise entspricht ein DCT-I von N = 5 reale Zahlen abcde genau einem DFT von acht realen Zahlen abcdedcb (gerade Symmetrie), geteilt durch zwei. ( Im Gegensatz dazu sind die DCT-Typen II-IV eine Halb-Proben-Verschiebung in der entsprechenden DFT.)Hinzumerken, dass die DCT-I nicht für N kleiner als 2 definiert ist.(Alle anderen DCT-Typen sind für jede positive N definiert.)Dort entspricht die DCT-I den Randbedingungen: xn liegt sogar um n = 0 und sogar um n = N-1; ähnlich für Xk. DCT-II X k = Σ n = 0 N - 1 x n cos ‡ [ π N (n + 1 2 ) k ] k = 0 , ... , N - 1. \{displaystyle X_{k}=\sum n=0{N-1}x_{n}\cos left[{\frac \{pi N}\left(n+{\frac 1}{2}}\right)k\right]\quad \quad k=0,\dots ,N-1.} Die DCT-II ist wahrscheinlich die am häufigsten verwendete Form und wird oft einfach als "die DCT" bezeichnet. Diese Transformation ist exakt äquivalent (bis zu einem Gesamt-Skalafaktor von 2) zu einem DFT von 4 N \{displaystyle 4N} realen Eingängen von gleichmäßiger Symmetrie, bei denen die sogar indizierten Elemente Null sind. Das heißt, es ist die Hälfte der DFT der 4 N \{displaystyle 4N} Eingänge y n \{displaystyle y_{n}, wobei y 2 n = 0 \{displaystyle y_{2n}=0, y 2 n + 1 = x n \{displaystyle y_{2n+1}=x_{n for 0 ≤ n < N \{displaystyle 0\leq n<N}, y 2 N = 0 \{displaystyle y_{2N}=0 und y 4 N - n = y n \{displaystyle y_{2N}=0 und y 4 N - n = y n \{displaystyle y_{4N-n}=y_{n for 0 < n < 2 N \{displaystyle 0<n<2N} .DCT II Transformation ist auch mit 2N Signal möglich, gefolgt von einer Multiplikation durch Halbverschiebung. Das zeigt Makhoul. Einige Autoren multiplizieren den X0-Termin um 1/√2 und multiplizieren die resultierende Matrix um einen Gesamtmaßstabsfaktor von 2 N \{displaystyle \{sqrt \{tfrac 2}{N (siehe unten für die entsprechende Änderung in DCT-III). Dies macht die DCT-II-Matrix orthogonal, bricht aber die direkte Korrespondenz mit einem real-even DFT halbverschobenen Eingang. Dies ist beispielsweise die Normalisierung von Matlab. In vielen Anwendungen, wie JPEG, ist die Skalierung willkürlich, weil Skalenfaktoren mit einem nachfolgenden Rechenschritt (z.B. dem Quantisierungsschritt in JPEG) kombiniert werden können und eine Skalierung gewählt werden kann, die die Berechnung des DCT mit weniger Multiplikationen erlaubt. Die DCT-II impliziert die Randbedingungen: xn ist sogar um n = -1/2 und sogar um n = N - 1/2; Xk ist sogar um k = 0 und ungerad um k = N. DCT-III X k = 1 2 x 0 + Σ n = 1 N - 1 x n cos ♦ [ π N n (k + 1 2 ) ] k = 0, ... , N - 1. \{displaystyle X_{k}={\fran=1{N-1}x_{n}\cos left[{\frac \{pi N}n\left(k+{\frac 1}{2}}\right)\right]\quad \quad k=0,\dots ,N-1.} Da es sich um die Inverse von DCT-II (bis zu einem Skalenfaktor siehe unten) handelt, wird diese Form manchmal einfach als "inverse DCT" (IDCT) bezeichnet. Einige Autoren teilen den x0-Termin um √2 statt um 2 (Ergebnis insgesamt x0/√2 Term) und multiplizieren die resultierende Matrix um einen Gesamtskalafaktor von 2 N \{displaystyle \{sqrt \{tfrac 2}{N (siehe oben für die entsprechende Änderung in DCT-II), so dass die DCT-II und DCT-III transposes voneinander sind. Dies macht die DCT-III-Matrix orthogonal, bricht aber die direkte Korrespondenz mit einer real-even DFT von halbverschobenem Ausgang. Die DCT-III impliziert die Randbedingungen: xn ist sogar um n = 0 und ungerad um n = N; Xk liegt sogar um k = -1/2 und sogar um k = N-1/2. DCT-IV X k = Σ n = 0 N - 1 x n cos [ π N (n + 1 2 ) (k + 1 2 ) ] k = 0, ..., N - 1. \{displaystyle X_{k}=\sum n=0{N-1}x_{n}\cos left[{\frac \{pi N}\left(n+{\frac 1}{2}}\right)\left(k+{\frac 1}{2}\right)\right]\quad \quad k=0,\dots ,N-1.} Die DCT-IV-Matrix wird orthogonal (und damit eindeutig symmetrisch, ihre eigene Inverse) wenn eine weitere Multiplikation um einen Gesamtmaßstabsfaktor von 2 / N \{displaystyle \{sqrt {2/N} multipliziert. Eine Variante des DCT-IV, bei der Daten von verschiedenen Transformationen überlappt werden, wird als modifizierte diskrete Cosinus-Transformation (MDCT) bezeichnet. Die DCT-IV impliziert die Randbedingungen: xn ist sogar um n = -1/2 und ungerad um n = N - 1/2; ähnlich für Xk. DCT V-VIII DCT der Typen I-IV behandeln beide Grenzen konsequent bezüglich des Symmetriepunktes: Sie sind entweder um einen Datenpunkt für beide Grenzen oder auf halbem Wege zwischen zwei Datenpunkten für beide Grenzen geradlinig/oddiert. DCTs der Typen V-VIII hingegen bedeuten Grenzen, die um einen Datenpunkt für eine Grenze und auf halbem Weg zwischen zwei Datenpunkten für die andere Grenze gleichmäßig/oddiert sind. Mit anderen Worten, DCT-Typen I-IV entsprechen real-even DFTs sogarer Ordnung (unabhängig davon, ob N gerade oder ungerad ist), da die entsprechende DFT Länge 2(N - 1) (für DCT-I) oder 4N (für DCT-II/III) oder 8N (für DCT-IV) hat. Die vier zusätzlichen Arten der diskreten Cosinus-Transformation entsprechen im Wesentlichen real-even DFTs von logisch ungeraden Ordnung, die Faktoren von N ± 1/2 in den Nennern der Kosinus-Argumente haben. Diese Varianten scheinen jedoch in der Praxis selten verwendet zu werden. Ein Grund ist vielleicht, dass FFT-Algorithmen für ungerade DFTs in der Regel komplizierter sind als FFT-Algorithmen für gerade lange DFTs (z.B. die einfachsten Radyx-2 Algorithmen sind nur für gerade Längen), und diese erhöhte Intriktität überträgt auf die DCTs wie unten beschrieben. ( Das triviale real-even-Array, eine Längen-one DFT (odd length) einer einzigen Zahl a, entspricht einem DCT-V der Länge N = 1.) Inverse Transformationen Unter Verwendung der oben genannten Normungskonventionen ist die Inverse von DCT-I DCT-I multipliziert mit 2/(N - 1). Die Inverse von DCT-IV ist DCT-IV multipliziert mit 2/N. Die Inverse von DCT-II ist DCT-III multipliziert mit 2/N und umgekehrt. Wie bei der DFT ist der Normalisierungsfaktor vor diesen Transformationsdefinitionen lediglich eine Konvention und unterscheidet sich zwischen den Behandlungen. Zum Beispiel multiplizieren einige Autoren die Transformationen um 2 / N \{displaystyle \{sqrt {2/N}, so dass die Inverse keinen zusätzlichen multiplikativen Faktor benötigt. In Kombination mit entsprechenden Faktoren von √2 (siehe oben), kann dies verwendet werden, um die Transformationsmatrix orthogonal zu machen. Mehrdimensionale DCTs Mehrdimensionale Varianten der verschiedenen DCT-Typen folgen direkt aus den eindimensionalen Definitionen: sie sind einfach ein trennbares Produkt (äquivalenterweise eine Zusammensetzung) von DCTs entlang jeder Dimension. M-D DCT-II Beispielsweise ist ein zweidimensionales DCT-II eines Bildes oder einer Matrix einfach das eindimensionale DCT-II, von oben, entlang der Zeilen und dann entlang der Spalten (oder umgekehrt) durchgeführt. Das heißt, die 2D DCT-II wird durch die Formel gegeben (ohne Normalisierung und andere Skalenfaktoren wie oben:) X k 1 , k 2 = Σ n 1 = 0 N 1 - 1 ( Σ n 2 = 0 N 2 - 1 x n 1 , n 2 cos ‡ [ π N 2 ( n 2 + 1 2 ) k 2 ] ) cos ≠ [ π N 1 (n 1 + 1 2 ) k 1 ] = Σ n 1 = 0 N 1 - 1 Σ n 2 = 0 N 2 - 1 x n 1 , n 2 cos [ π N 2 (n 2 + 1 2) k 2].\{displaystyle start{aligned}X_{k_{1},k_{2}}&=\sum n_{1}=0{N_{1}-1}\left(\sum) n_{2}=0{N_{2}-1}x_{n_{1},n_{2}\cos left[{\frac , N_{2} (n_{2}+{\frac 1}{2}}\right)k_{2}\right]\right)\cos links[{\frac \{pi ) #1}========== n_{2}=0{N_{2}-1}x_{n_{1},n_{2}\cos left[{\frac , N_{1} (n_{1}+{\frac 1}{2}}\right)k_{1}\right]\cos links[{\frac \{pi{pi N_{2} (n_{2}+{\frac 1}{2}}\right)k_{2}\right].\end{align Das Inverse eines mehrdimensionalen DCT ist nur ein trennbares Produkt der Inversen der entsprechenden eindimensionalen DCTs (siehe oben), z.B. der eindimensionalen Inversen, die in einem Zeilenspaltalgorithmus entlang einer Dimension aufgebracht werden. Das 3-D DCT-II ist nur die Ausdehnung von 2-D DCT-II im dreidimensionalen Raum und kann durch die Formel X k 1 , k 2 , k 3 = Σ n 1 = 0 N 1 - 1 Σ n 2 = 0 N 2 - 1 Σ n 3 = 0 N 3 - 1 x n 1 , n 2 , n 3 cos ≠ [ π N 1 (n 1 + 1] [ π N 2 (n 2 + 1 2 ) k 2 ] cos [ π N 3 (n 3 + 1 2) k 3], für k i = 0, 1 , 2 , ... , N i - 1. \{displaystyle X_{k_{1},k_{2},k_{3}=\sum #1}========== ***_________________________________________________________________________________ n_{3}=0{N_{3}-1}x_{n_{1},n_{2},n_{3}\cos left[{\frac , N_{1} (n_{1}+{\frac 1}{2}}\right)k_{1}\right]\cos links[{\frac \{pi{pi N_{2} (n_{2}+{\frac 1}{2}}\right)k_{2}\right]\cos links[{\frac \{pi{pi N_{3} (n_{3}+{\frac 1}{2}}\right)k_{3}\right,\quad \text{for) k_{i}=0,1,2,\dots ,N_{i}-1. Die Inverse von 3-D DCT-II ist 3-D DCT-III und kann aus der Formel berechnet werden, die durch x n 1 , n 2 , n 3 = Σ k 1 = 0 N 1 - 1 Σ k 2 = 0 N 2 - 1 Σ k 3 = 0 N 3 - 1 k 1 k, k 2 [ π N 2 (n 2 + 1 2 ) k 2 ] cos [ π N 3 (n 3 + 1 2) k 3], für n i = 0, 1 , 2 , ... , N i - 1. \{displaystyle * ***______________________________________________________________________________________ ***______________________________________________________________________________________ k_{3}=0{N_{3}-1}X_{k_{1},k_{2},k_{3}\cos left[{\frac , N_{1} (n_{1}+{\frac 1}{2}}\right)k_{1}\right]\cos links[{\frac \{pi{pi N_{2} (n_{2}+{\frac 1}{2}}\right)k_{2}\right]\cos links[{\frac \{pi{pi N_{3} (n_{3}+{\frac 1}{2}}\right)k_{3}\right,\quad \text{for) n_{i}=0,1,2,\dots ,N_{i}-1. Technisch ist die Berechnung eines zwei,- dreidimensionalen DCT durch Sequenzen von eindimensionalen DCTs entlang jeder Dimension als Zeilensäulenalgorithmus bekannt. Wie bei multidimensionalen FFT-Algorithmen gibt es jedoch andere Methoden, um dasselbe zu berechnen, während die Berechnungen in einer anderen Reihenfolge durchgeführt werden (d.h. die Algorithmen für die unterschiedlichen Dimensionen interleaving/combining). Aufgrund des schnellen Wachstums der Anwendungen auf Basis des 3-D DCT werden für die Berechnung von 3-D DCT-II mehrere schnelle Algorithmen entwickelt. Vector-Radix-Algorithmen werden zur Berechnung von M-D DCT verwendet, um die Rechenkomplexität zu reduzieren und die Rechengeschwindigkeit zu erhöhen. Um 3-D DCT-II effizient zu berechnen, wurde ein schneller Algorithmus, Vector-Radix Decimation in Frequency (VR DIF) Algorithmus entwickelt. 3-D DCT-II VR DIF Zur Anwendung des VR-DIF-Algorithmus sind die Eingangsdaten wie folgt zu formulieren und neu anzuordnen. 1 * (n_{1}+1,2n_{2}+1,2n_{3})\{\tilde x}(N-n_{1}-1,N-n_{2}-1,N-n_{3}-1)=x(2n_{1}+1,2n_{2}+1,2n_{3}+1)\\end{array, wobei 0 ≤ n 1 n_{1},n_{2},n_{3}\leq ) N{2}-1Die Figur an das benachbarte zeigt die vier Stufen, die mit dem VR-DIF-Algorithmus an der Berechnung von 3-D-DCT-II beteiligt sind. Die erste Stufe ist die 3-D-Reorderung mit der durch die obigen Gleichungen dargestellten Index-Mapping. Die zweite Stufe ist die Schmetterlingsberechnung. Jede Schmetterling berechnet acht Punkte zusammen, wie in der Abbildung unten gezeigt, wobei c (φ i) = cos ċ (φ i) \{displaystyle c(\varphi _{i})=\cos(\varphi _{i})}. n_{1}=1^{N-1}\sum n_{2}=1^{N-1\sum n_{3}=1{N-1}{\tilde x}(n_{1},n_{2},n_{3})\cos(\varphi k_{1})\cos(\varphi k_{2})\cos(\varphi k_{3)} mit φ i = π 2 N ( 4 N i + 1 ) und i = 1 Wenn die geraden und die ungeraden Teile k1, k2 \{displaystyle k_{1},k_{2 und k3 \{displaystyle k_{3} und betrachtet werden, kann die allgemeine Formel für die Berechnung der 3-D DCT-II als X (k1, k2, k3 ) = Σ n 1 = 1 N 2 n_{1}=1{\\tfra - Nein. n_{2}=1 - Nein. n_{1}=1^{\tfra ) n}{2}\right) + ( - 1 ) j x ~ ( n 1 , n 2 + n 2 , n 3 ) + ( - 1 ) j + l x ~ ( n 1 , n 2 + n 2 , n 3 + n 2 ) \{Displaystyle (-+1)^^{j}{\tilde x}\left(n_{1},n_{2}} n}{2},n_{3}\right)+(-1)^{j+l}{\tilde x}\left(n_{1},n_{2}+{fra\frac n}{2},n_{3}+{\frac n}{2}}\right) + ( − 1 ) i x ~ ( n 1 + n 2, n 2, n 3 ) + (-1 ) i + j x ~ ( n 1 + n 2 + n 2 , n 2 , n 3 ) \{displaystyle (-+1) n}{2},n_{2},n_{3}\right)+(-1)^{i+j}{\tilde x}\left(n_{1}+{fra\frac n}{2}+{\frac n}{2},n_{2},n_{3}\right) + ( − 1 ) i + l x ~ (n 1 + n 2 , n 2 , n 3 + n 3 ) \{displaystyle (-1)^{i+l}{\tilde x}\left(n_{1}+{\fra\ n}{2},n_{2},n_{3}+{\frac n}{3}}}\right) + ( − 1 ) i + l x ~ ( n 1 + n 2 , n 2 + n 2 , n 3 + n 2 , wobei i , j , l = 0 oder 1. \{displaystyle) n}{2},n_{2}+{\frac n}{2}},n_{3}+{\frac n}{2}}\right){\text wobei }i,j,l=0{\text oder 1. Arithmetische Komplexität Die gesamte 3-D-DCT-Berechnung braucht [ log 2 identifiziert N ] \{displaystyle [\log _{2}N] Stufen, und jede Stufe beinhaltet N 3 / 8 \{displaystyle N^{3}/8 Schmetterlinge. Die gesamte 3-D-DCT erfordert [ (N 3 / 8 ) log 2 nett N ] \{displaystyle links[(N^{3}/8)\log _{2}N\right] Schmetterlinge zu berechnen. Jeder Schmetterling benötigt sieben reale Multiplikationen (einschließlich triviale Multiplikationen) und 24 reale Additionen (einschließlich triviale Additionen). Die Gesamtzahl der realen Multiplikationen, die für diese Stufe benötigt werden, beträgt [7 / 8] N 3 log 2 ≠ N] \{displaystyle links[(7/8)N^{3}\log _{2}N\right] und die Gesamtzahl der realen Additionen, d.h. einschließlich der Postzusätze (recursive Additionen), die direkt nach der Schmetterlingsstufe oder nach der Bit-recur berechnet werden können _{2}N\right] _text{Real}+\underbrace links[{\frac 3 _2}N-3N^{3}+3N^{2}\right] _text{Recursive}}=\left[{\frac 9}{2}N{3}\log _2}N-3N^{3}+3N^{2}\right] . Die konventionelle Methode zur Berechnung von MD-DCT-II verwendet einen Row-Column-Frame (RCF) Ansatz, der auf den neuesten Hardwareplattformen rechnerisch komplex und weniger produktiv ist. Die Anzahl der Multiplikationen, die erforderlich sind, um VR DIF Algorithm im Vergleich zum RCF-Algorithmus zu berechnen, sind einige in der Zahl. Die Anzahl der Multiplikationen und Ergänzungen, die am RCF-Ansatz beteiligt sind, wird durch [3 2 N 3 log 2 oz N] \{displaystyle left[{\frac 3}{2}N^{3}\log _{2}N\right] und [9 2 N 3 log 2 N - 3 N 3 + 3 N 2] \{displaystyle links[{\frac 9}{2}N^3}\log_2}N-3N{3}+3N{2}\right] bzw. Aus Tabelle 1 ist ersichtlich, dass die Gesamtzahl der Multiplikationen, die mit dem 3-D DCT VR-Algorithmus verbunden sind, geringer ist als diejenige, die mit dem RCF-Ansatz um mehr als 40% verbunden ist. Darüber hinaus umfasst der RCF-Ansatz Matrixtranspose und mehr Indexierung und Datenübernahme als der neue VR-Algorithmus. Dadurch wird der 3-D DCT VR-Algorithmus effizienter und besser für 3-D-Anwendungen geeignet, die die 3-D DCT-II wie Videokompression und andere 3-D-Bildverarbeitungsanwendungen beinhalten. Die Hauptüberlegung bei der Wahl eines schnellen Algorithmus besteht darin, Rechen- und Strukturkomplexitäten zu vermeiden. Da die Technologie von Computern und DSPs vorangeht, wird die Ausführungszeit von arithmetischen Operationen (Multiplikationen und Additionen) sehr schnell, und regelmäßige Rechenstruktur wird der wichtigste Faktor.Obwohl der oben vorgeschlagene 3-D VR-Algorithmus die theoretische untere Grenze der Anzahl der Multiplikationen nicht erreicht, hat er eine einfachere Rechenstruktur im Vergleich zu anderen 3-D DCT-Algorithmen. Es kann mit einem einzigen Schmetterling realisiert werden und besitzt die Eigenschaften des Cooley-Tukey FFT-Algorithmus in 3-D. Der 3-D VR stellt somit eine gute Wahl dar, um arithmetische Operationen bei der Berechnung des 3-D DCT-II zu reduzieren und gleichzeitig die einfache Struktur zu erhalten, die den Schmetterlingsstil Cooley-Tukey FFT Algorithmen charakterisiert. Das Bild nach rechts zeigt eine Kombination von horizontalen und vertikalen Frequenzen für ein 8 x 8 (N 1 = N 2 = 8 \{displaystyle N_{1}=N_{2}=8 ) zweidimensionales DCT. Jeder Schritt von links nach rechts und oben nach unten ist eine Erhöhung der Frequenz um 1/2 Zyklus. So ergibt z.B. ein rechts vom oberen linken Quadrat eine halbzyklische Erhöhung der horizontalen Frequenz. Ein weiterer Schritt nach rechts ergibt zwei Halbzyklen. Ein Rückzug ergibt zwei Halbwellen horizontal und eine Halbwelle vertikal. Die Quelldaten (8x8) werden in eine lineare Kombination dieser 64 Frequenzquadrate transformiert. MD-DCT-IV Die M-D DCT-IV ist nur eine Erweiterung der 1-D DCT-IV auf die M-Domäne. Das 2-D DCT-IV einer Matrix oder eines Bildes wird durch X k, l = Σ n = 0 N - 1 Σ m = 0 M - 1 x n, m cos ≠ ( 2 m + 1 ) ( 2 k + 1 ) gegeben. ( 2 n + 1 ) ( 2 l + 1 ) ( 2 l + 1 ) π 4 M ) .wo k = 0, 1 , 2 , N - 1 und l = 0 , 1 , 2 , ... , M - 1. \{displaystyle X_{k,l}=\sum * n=0{N-1}\sum m=0^{M-1}x_{n,m}\cos left({\frac {2m+1)(2k+1)\pi {4N}\right)\cos left({\frac {2n+1)(2l+1)\pi 4M}\right){\text{.where }k=0,1,2...,N-1{\text und }l=0,1,2\,1,2\,1,2, Wir können die MD DCT-IV mit der regulären Zeilensäulenmethode berechnen oder wir können die Polynom-Transformationsmethode für die schnelle und effiziente Berechnung verwenden. Die Hauptidee dieses Algorithmus besteht darin, die Polynom-Transform zu verwenden, um das mehrdimensionale DCT direkt in eine Reihe von 1-D-DCTs umzuwandeln. MD DCT-IV hat auch mehrere Anwendungen in verschiedenen Bereichen. Berechnung Obwohl die direkte Anwendung dieser Formeln O(N2) Operationen erfordern würde, ist es möglich, dasselbe mit nur O(N log N) Komplexität zu berechnen, indem die Berechnung ähnlich der schnellen Fourier-Transformation (FFT) faktorisiert wird. Man kann auch DCTs über FFTs zusammen mit O(N) Vor- und Nachbearbeitungsschritten berechnen. Im allgemeinen sind O(N log N) Methoden zur Berechnung von DCTs als schnelle Cosinus-Transformation (FCT)-Algorithmen bekannt. Die effizientesten Algorithmen sind im Prinzip in der Regel diejenigen, die direkt für die DCT spezialisiert sind, im Gegensatz zu einem gewöhnlichen FFT plus O(N) extra Operationen (siehe unten für eine Ausnahme). Allerdings sind auch spezialisierte DCT-Algorithmen (einschließlich all derjenigen, die die niedrigsten bekannten arithmetischen Zählungen erzielen, zumindest für Power-of-Two-Größen) typischerweise eng mit FFT-Algorithmen verbunden - da DCTs im Wesentlichen DFTs von real-even Daten sind, kann man einen schnellen DCT-Algorithmus entwerfen, indem man eine FFT einnimmt und die redundanten Operationen aufgrund dieser Symmetrie eliminiert. Dies kann sogar automatisch erfolgen (Frigo & Johnson, 2005). Algorithmen auf Basis des Cooley-Tukey FFT-Algorithmus sind am häufigsten, aber jeder andere FFT-Algorithmus ist auch anwendbar. Beispielsweise führt der Winograd FFT-Algorithmus zu minimalen Multiplikationsalgorithmen für die DFT, wenn auch allgemein zu Kosten von mehr Additionen, und ein ähnlicher Algorithmus wurde von Feig & Winograd (1992) für die DCT vorgeschlagen. Da die Algorithmen für DFTs, DCTs und ähnliche Transformationen alle so eng miteinander verbunden sind, wird jede Verbesserung der Algorithmen für eine Transformation theoretisch zu sofortigen Gewinnen für die anderen Transformationen führen (Duhamel & Vetterli 1990). Während DCT-Algorithmen, die eine unmodifizierte FFT verwenden, im Vergleich zu den besten spezialisierten DCT-Algorithmen oft einige theoretische Overhead haben, haben diese auch einen deutlichen Vorteil: hoch optimierte FFT-Programme sind weit verbreitet. So ist es in der Praxis oft einfacher, hohe Leistung für allgemeine Längen N mit FFT-basierten Algorithmen zu erhalten.(Performance auf moderne Hardware wird typischerweise nicht einfach durch arithmetische Zählungen dominiert, und Optimierung erfordert erheblichen technischen Aufwand.) Spezielle DCT-Algorithmen, auf der anderen Seite, siehe weit verbreitete Verwendung für Transformationen von kleinen, festen Größen wie die 8 × 8 \{displaystyle 8\times 8} DCT-II verwendet in JPEG-Komprimation, oder die kleinen DCTs (oder MDCTs) typischerweise in der Audiokompression verwendet. (Ermäßigte Codegröße kann auch ein Grund sein, ein spezialisiertes DCT für Embedded-Device-Anwendungen zu verwenden.) In der Tat sind sogar die DCT-Algorithmen mit einer gewöhnlichen FFT manchmal äquivalent, um die redundanten Operationen aus einer größeren FFT von real-symmetrischen Daten zu streichen, und sie können sogar aus der Perspektive von arithmetischen Zählungen optimal sein. Beispielsweise entspricht ein Typ-II DCT einem DFT der Größe 4 N \{Displaystyle 4N} mit real-eben Symmetrie, deren gerade-indizierte Elemente Null sind. Eines der häufigsten Methoden zur Berechnung dieser über eine FFT (z.B. das in FFTPACK und FFTW verwendete Verfahren) wurde von Narasimha & Peterson (1978) und Makhoul (1980) beschrieben und diese Methode in Hinweisen als einen Schritt eines Radyx-4 Dezimations-in-Time Cooley-Tukey-Algorithmus, der auf die logische real-even DFT entsprechend der DCT II angewendet wird ( Der radix-4 Schritt reduziert die Größe 4 N \{displaystyle 4N} DFT auf vier Größen- N \{displaystyle N} DFTs von realen Daten, von denen zwei Null sind und zwei von denen gleich sind durch die gleichmäßige Symmetrie, also eine einzelne Größe- N \{displaystyle N} FFT von realen Daten plus O (N) \{displaystyle O(N)} Schmetterlinge.) Da die geradlinigen Elemente Null sind, ist dieser Radyx-4-Schritt genau gleich wie ein Split-Radiix-Schritt; wird die nachfolgende Größe-N \{displaystyle N} real-data FFT auch von einem Real-Data-Split-Radiix-Algorithmus (wie in Sorensen et al. 1987) durchgeführt, so entspricht der resultierende Algorithmus tatsächlich dem, was lange der niedrigste veröffentlichte arithme Zählerstand für den power-II-II-D Eine kürzliche Reduzierung der Betriebszählung auf 17 9 N log 2 N + O (N ) \{displaystyle \{frac 17}{9}N\log _{2}N+O(N) verwendet auch eine real-data FFT. Es gibt also nichts intrinsisch schlechtes darüber, die DCT über eine FFT aus einer arithmetischen Perspektive zu berechnen – es ist manchmal nur eine Frage, ob der entsprechende FFT-Algorithmus optimal ist. ( In der Praxis könnte die Funktion-Call-Overhead beim Aufruf einer separaten FFT-Routine für kleine N \{displaystyle N} von Bedeutung sein, aber dies ist eine Implementierung anstatt eine algorithmische Frage, da sie durch Einrollen/Inlining gelöst werden kann.) Beispiel von IDCT Betrachten Sie dieses 8x8 Grauwertbild des Großbuchstabens A. Jede Basisfunktion wird mit seinem Koeffizienten multipliziert und dieses Produkt dem Endbild hinzugefügt. Siehe auch Diskrete Wavelet-Transformation JPEG#Discrete cosine transform — Enthält ein potenziell leichter zu verstehen Beispiel der DCT-Transformation Liste der Fourier-bezogenen Transformationen Modified diskret cosine transform Erläuterungen Citations Weiteres Lesen Narasimha, M.; Peterson, A. (Juni 1978). "Über die Berechnung der diskreten Cosinustransform". IEEE Transactions on Communications.26 (6:) 934–936. doi:10.1109/TCOM.1978.1094144. Makhoul, J. (Februar 1980)."Eine schnelle Kosinus-Transformation in ein und zwei Dimensionen". IEEE Transactions on Acoustics, Speech, and Signal Processing.28 (1:) 27–34.doi:10.1109/TASSP.1980.1163351. Sorensen, H.; Jones, D.; Heideman, M.; Burrus, C. (Juni 1987). "Real-valuierte schnelle Fourier-Transformationsalgorithmen". IEEE Transactions on Acoustics, Speech, and Signal Processing.35 (6:) 849–863.CiteSeerX 10.1.1.205.4523.doi:10.1109/TASSP.1987.1165220. Plonka, G.; Tasche, M. (Januar 2005). "Fast und numerisch stabile Algorithmen für diskrete Cosinus-Transformationen". Linear Algebra und seine Anwendungen.394 (1:) 309–345. doi:10.1016/j.laa.2004.07.015. Duhamel, P.; Vetterli, M. (April 1990). " Schnelle Fourier-Transformationen: Eine Tutorial-Review und ein Stand der Technik". Signalverarbeitung (Übermitteltes Manuskript).19 (4:) 259–299.doi:10.1016/0165-1684(90)90158-U Ahmed, N. (Januar 1991). "Wie ich mit der diskreten Kosinus-Transformation aufkam." Digital Signal Processing.1 (1:) 4–9.doi:10.1016/1051-2004(91)90086-Z Feig, E.; Winograd, S. (September 1992). "Fast Algorithmen für die diskrete Cosinus-Transformation". IEEE Transactions on Signal Processing.40 (9:) 2174–2193.Bibcode:1992ITSP...40.2174F doi:10.1109/78.157218.Malvar, Henrique (1992), Signal Processing with Lapped Transforms, Boston: Artech House, ISBN 978-0-89006-467-2 Martucci, S. A.(Mai 1994) IEEE Transactions on Signal Processing.42 (5:) 1038–1051.Bibcode:1994ITSP...42.1038M doi:10.1109/78.295213.Oppenheim, Alan; Schafer, Ronald; Buck, John (1999,) Diskrete-Time Signal Processing (2. ed,.) Obersattel, N.J: Prentice Hall, ISBN 978-0-13-754920-7 Frigo, M.; Johnson, S. G. (Februar 2005). "The Design and Implementation of FFTW3" (PDF). Verfahren der IEEE.93 (2:) 216–231.CiteSeerX 10.1.1.66.3097.doi:10.1109/JPROC.2004.840301.S2CID 6644892.Boussakta, Said.; Alshibami, Hamoud O. (April 2004). "Fast Algorithm for the 3-D DCT-II" (PDF). IEEE Transactions on Signal Processing.52 (4:) 992–1000.Bibcode:2004ITSP...52.992B doi:10.1109/TSP.2004.823472.S2CID 3385296. Cheng, L. Z.; Zeng, Y. H. (2003). "Neuer schneller Algorithmus für mehrdimensionale Typ-IV DCT". IEEE Transactions on Signal Processing.51 (1:) 213–220.doi:10.1109/TSP.2002.806558. Wen-Hsiung Chen; Smith, C.; Fralick, S. (September 1977)."Ein schnelles computergestütztes Algorithm für die diskrete Cosine Transform".IEEE Transactions on Communications.25 (9:) 1004–1009.doi:10.1109/TCOM.1977.1093941. Presse, WH; Teukolsky, SA; Vetterling, WT; Flannery, BP (2007,) "Section 12.4.2. Cosine Transform," Numerische Rezepte: Die Kunst des wissenschaftlichen Rechnens (3. ed.) New York: Cambridge University Press, ISBN 978-0-521-88068-8 Externe Links Syed Ali Khayam: Die diskrete Cosine Transform (DCT:) Theorie und Anwendung Implementierung von MPEG Integer Näherung von 8x8 IDCT (ISO/IEC 23002-2) Matteo Frigo und Steven G. Johnson: FFTW,http://www.fftw.org/. Eine kostenlose (GPL) C-Bibliothek, die schnelle DCTs (Typen I-IV) in einer oder mehreren Dimensionen beliebiger Größe berechnen kann. Takuya Ooura: Allgemeines FFT-Paket, http://www.kurims.kyoto-u.ac.jp/~ooura/fft.html. Kostenlos C & FORTRAN-Bibliotheken zur Berechnung von schnellen DCTs (Typen II-III) in einem, zwei oder drei Dimensionen, Leistung von 2 Größen. Tim Kientzle: Schnelle Algorithmen zur Berechnung der 8-Punkt-DCT und IDCT, http://drdobbs.com/parallel/184410889.LTFAT ist eine kostenlose Matlab/Octave Toolbox mit Schnittstellen zur FFTW-Implementierung der DCTs und DSTs vom Typ I-IV. Brian Armstrong (geboren 25. Januar 1983) ist ein Milliardär American Business Executive und Investor, der CEO von Kryptowährung Trading Company Coinbase ist. Er erhielt Medienberichterstattung für seine Politik, den Arbeitsplatz frei von politischem Aktivismus patrimonio neto zu halten:11 Meilen (USD). Ausbildung und frühes Leben Armstrong wurde am 25. Januar 1983 in der Nähe von San Jose, Kalifornien, zu Ingenieuren Eltern geboren. Er besuchte die Rice University in Texas und verdiente 2005 einen dualen Bachelor-Abschluss in Wirtschaft und Informatik, gefolgt von einem Master in Informatik im Jahr 2006. Während bei Rice, begann er eine Business-Anpassungs-Tutoren an Studenten, und nach dem Studium verbrachte ein Jahr in Buenos Aires während der Arbeit an einem Bildungsunternehmen. Während er in Buenos Aires die Auswirkungen der Hyperinflation sah, die Argentinien damals beeinflusste. Die frühe Karriere von Career Armstrong umfasste die Arbeit als Entwickler für IBM und Berater bei Deloitte. Im Jahr 2010 kam er über das Bitcoin Whitepaper veröffentlicht unter dem alias Satoshi Nakamoto. 2011 trat er als Software-Ingenieur bei Airbnb an und war in den 190 Ländern, in denen Airbnb damals tätig war, mit Zahlungssystemen konfrontiert. Bei Airbnb sah er die Schwierigkeiten, Geld nach Südamerika zu schicken. Er begann Wochenenden und Nächte zu arbeiten, um Code in Ruby und JavaScript zu schreiben, um Kryptocoins zu kaufen und zu speichern. 2012 trat er in den Startbeschleuniger Y Combinator ein und erhielt eine Investition von $150.000, die er früher Coinbase fand. CoinbaseIn 2012, Armstrong und Fred Ehrsam Mitbegründer Coinbase, als Weg für Kryptowährung-Enthusiasten zu handeln Bitcoins und andere digitale Währungen. Armstrong war seine erste CEO.Eine Finanzierungsrunde 2018 bewertete das Unternehmen auf 8,1 Milliarden US-Dollar, und im Dezember 2020 reichte das Unternehmen mit der SEC ein, durch eine Direktliste öffentlich zu werden. Nach einer direkten Auflistung im April 2021 stieg die Marktkapitalisierung von Coinbase auf $85B und Armstrongs Gesamtnetz im Wert von $10B. Book/Documentary Armstrong erschien in der 2014 amerikanischen Dokumentarfilm The Rise and Rise of Bitcoin. Er war auch als Hauptprotagonist in der 2020 Roman "Kings of Crypto:One Startup's Quest to Take Cryptocurrency Out of Silicon Valley and Onto Wall Street" ResearchHub Armstrong selbst finanziert und gründete die wissenschaftliche Forschungsstelle ResearchHub, modeled on the GitHub Code Repository, als eine Möglichkeit, Forschungspapiere der Öffentlichkeit zur Verfügung zu stellen. Politische Ansichten Armstrong schrieb im September 2020 einen Blog-Post, der Coinbase als "Mission Focused Company" bezeichnete und Mitarbeiteraktivismus und Diskussion über politische und soziale Fragen bei der Arbeit entmutigte. Er bot Abfindungspakete für jeden in Coinbase, der sich mit dieser Richtlinie nicht wohl fühlte. 60 Mitarbeiter verließen Coinbase. Vorher unterstützte Armstrong die Black Lives Matter Bewegung und twitterte, als George Floyd getötet wurde: "Ich habe mich entschlossen, zu sprechen. Es ist eine Schande, dass dies auch in diesem Tag und Alter gesagt werden muss, aber Rassismus, Polizeibrutalität und ungleiche Gerechtigkeit sind eindeutig falsch, und wir müssen alle arbeiten, um sie von der Gesellschaft zu eliminieren." Anerkennung 2017, im Alter von 34, Armstrong wurde #10 auf Fortunes 40 unter 40 Liste. Im Jahr 2019 wurde Armstrong zur 100 Nächsten Liste der Zeitschrift Time benannt. In 2021, Forbes benannt Armstrong #1 auf seiner Crypto Rich List, mit einem geschätzten Netto von $ 6.5 Milliarden ab Februar 2021. Philanthropie Im Jahr 2018 war Armstrong die erste Kryptowährung Exekutive, um die Giving Pledge zu unterzeichnen, als er gelobt, den Großteil seines Reichtums an philanthropische Ursachen wegzugeben. Er setzte auch eine philanthropische Anstrengung namens GiveCrypto.org ein, um den Menschen zu ermöglichen, öffentliche oder anonyme Spenden zu machen, um anderen in Armut leben zu helfen. Referenzen Externe Links Offizielle Website