Die Veranstaltungsrechnung ist eine logische Sprache für die Darstellung und Begründung von Ereignissen und deren Wirkungen, die zunächst von Robert Kowalski und Marek Sergot im Jahr 1986 präsentiert wurden. Er wurde in den 1990er Jahren von Murray Shanahan und Rob Miller erweitert. Ähnlich wie bei anderen Sprachen, aus Gründen der Veränderung, stellt die Ereignisrechnung die Auswirkungen von Handlungen auf Grippe. Ereignisse können aber auch außerhalb des Systems sein. Im Falle von Kalkül kann man den Wert von Grippen zu bestimmten Zeitpunkten, die Ereignisse, die zu gegebenen Zeitpunkten stattfinden, und ihre Auswirkungen angeben. Flöten und Veranstaltungen Im Falle von Kalkül werden Grippen reifiziert. Dies bedeutet, dass sie nicht durch Prädikate, sondern durch Funktionen formalisiert werden. Ein separater Prädikathalter Es wird verwendet, um zu sagen, welche Grippen zu einem bestimmten Zeitpunkt halten. So bedeutet z. B. H o l d s A t ( o n (b o x, t a b l e) , t ) \{displaystyle \{mathit {HoldsAt}(on(box,table),t, dass die Box zum Zeitpunkt t auf der Tabelle ist; in dieser Formel Holds Bei ist ein Prädikat, während auf ist eine Funktion. Veranstaltungen werden auch als Begriffe dargestellt. Die Auswirkungen der Ereignisse werden mit den Prädikaten Initiate und Terminate gegeben. Insbesondere bedeutet I n i t i a t e s ( e, f , t ) \{displaystyle \{mathit {Initiates}(e,f,t) dass, wenn das durch den Begriff e dargestellte Ereignis zum Zeitpunkt t ausgeführt wird, der Grippe f nach t gilt. Das Prädikat Terminate hat eine ähnliche Bedeutung, wobei der einzige Unterschied darin besteht, dass f nach t falsch sein wird. Domain-unabhängige Axiome Wie andere Sprachen zur Darstellung von Handlungen formalisiert das Ereignis die korrekte Evolution des Grippes über Formeln, die den Wert jedes Grippes nach Ausführung einer willkürlichen Aktion erklären. Die Veranstaltungsrechnung löst das Rahmenproblem in einer Weise, die den Nachfolge-Zustands-Achsen der Situationsrechnung ähnlich ist: Ein Grippe ist zum Zeitpunkt t wahr, wenn und nur, wenn es in der Vergangenheit wahr gemacht wurde und in der Zwischenzeit nicht falsch gemacht wurde. H o l d s A t (f , t ) ← [ H a p e n s (e , t 1 ) I n i t i t e s ( e, f , t 1 ) C l i p e d e t l , f , t ) \{displaystyle \{mathit {HoldsAt}(f,t)\leftarrow \{[mathit Happens}}(e,t_{1})\wedge \{mathit Initiates}}(e,f,t_{1})\wedge (t_{1}>t)\wedge \neg \{mathit Clipped}}(t_{1},f,t) Diese Formel bedeutet, daß der durch den Begriff f dargestellte Einfluß zum Zeitpunkt t wahr ist, wenn: ein Ereignis e stattgefunden hat: H a p e n s ( e, t 1 ) \{displaystyle \{mathit Happens}(e,t_{1) ; dies fand in der Vergangenheit statt: t 1 < t \{displaystyle \{mathit t}_{1}<t; dieses Ereignis hat den fließenden f als Effekt: I n i t i a t e s ( e, f , t 1 ) \{displaystyle \{mathit Initiates}(e,f,t_{1) ; der Grippe ist inzwischen nicht falsch gemacht worden C l p e d ( t 1 , f , t ) \{displaystyle \{mathit Clipped}}(t_{1},f,t) Eine ähnliche Formel wird verwendet, um den umgekehrten Fall zu formieren, bei dem ein fließender Zustand zu einem bestimmten Zeitpunkt falsch ist. Andere Formeln werden auch für die korrekte Formalisierung von Grippen benötigt, bevor sie Auswirkungen eines Ereignisses waren. Diese Formeln sind ähnlich wie oben, jedoch H a p p e n s ( e, t 1 ) I n i t i a t e s ( e, f , t 1 ) \{displaystyle \{mathit Happens}(e,t_{1})\wedge \{mathit Initiates}}(e,f,t_{1) wird durch H o l d s A t (f , t 1 oma ersetzt C l i p e d (t 1 , f , t 2 ) ≡ ) ∃ ∃ ∃ ∃ ∃ ∃ ) ) ) ) ) ) φ φ φ φ φ σ φ σ σ φ σ σ φ σ φ σ φ σ φ σ φ σ σ φ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ φ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ σ T e r t e s e , f , t ) \{displaystyle \{mathit Clipped}}(t_{1},f,t_{2})\equiv \exists e,t[{\mathit {Happens}}(e,t)\wedge (t_{1}\leq t<t_{2}\wedge \{mathit {Terminates}}}(e,f,t) Domainabhängige Axiome Die obigen Axiome beziehen sich auf den Wert der Prädikate HoldsAt, Initiate und Terminate, geben aber nicht an, welche Grippen bekanntermaßen wahr sind und welche Ereignisse tatsächlich Grippe wahr oder falsch machen. Dies geschieht durch die Verwendung einer Reihe von Domänen-abhängigen Axiomen. Die bekannten Werte von Grippen sind als einfache Literale H o l d s A t (f , t ) \{displaystyle \{mathit {HoldsAt}(f,t) angegeben.Die Wirkungen von Ereignissen werden durch Formeln über die Auswirkungen von Ereignissen mit ihren Voraussetzungen angegeben. Wenn das Ereignis geöffnet ist, ist die entsprechende Formel im Ereignis-Calculus: I n i t i a t e s ( e, f , t ) ≡ e = o p e n ψ\ i s o p e n ψ e n ψ e n ψ e n φ e n φ e n φ e n φ e n φ e n φ e n φ e Der rechte Ausdruck dieser Gleichwertigkeit besteht aus einer Disjunktion: für jedes Ereignis und fließend, die durch das Ereignis wahr gemacht werden können, gibt es einen Disjunkt, der besagt, dass e tatsächlich dieses Ereignis ist, dass f tatsächlich so fließend ist, und dass die Voraussetzung des Ereignisses erfüllt ist. Die vorstehende Formel gibt den Wahrheitswert von I n i t i a t e s ( e, f , t ) \{displaystyle \{mathit {Initiates}(e,f,t) für jedes mögliche Ereignis und Grippe an. Dadurch müssen alle Effekte aller Ereignisse in einer einzigen Formel kombiniert werden. Dies ist ein Problem, denn die Hinzufügung eines neuen Ereignisses erfordert eine Änderung einer bestehenden Formel anstatt neue zu ergänzen. Dieses Problem kann durch die Anwendung von Umschreibung auf eine Reihe von Formeln gelöst werden, die einen Effekt eines Ereignisses angibt: I n i t e s ( o p e n , i s o p e n , t ) H o l d s A t (h a s k e y , t ) \{displaystyle \{mathit {Initiates}}(open,isopen,t)\leftarrow \{mathit (HoldsAt) I n i t i a t e s (b r e a k , i s o p e n , t ) ← ) \{displaystyle \{mathit {Initiates}}(break,isopen,t)\leftarrow \{mathit (HoldsAt) I n i t i a t e s (b r e a k , b r e n , t ) ← H o l d s A t (h a s h a m e r , t ) \{displaystyle \{mathit {Initiates}}(break,broken,t)\leftarrow \{mathit (HoldsAt) Diese Formeln sind einfacher als die vorstehende Formel, da jeder Effekt jedes Ereignisses separat angegeben werden kann. Die einzige Formel, die besagt, welche Ereignisse e und Grippen f i n i t e s ( e, f , t ) \{displaystyle \{mathit {Initiates}}(e,f,t) wahr sind, wurde durch eine Reihe kleinerer Formeln ersetzt, die jeweils die Wirkung eines Ereignisses auf einen Grippen erzählen. Diese Formeln entsprechen jedoch nicht der oben genannten Formel. In der Tat geben sie nur hinreichende Bedingungen an, damit I n i t i a t e s ( e, f , t ) \{displaystyle \{mathit {Initiates}(e,f,t) wahr werden kann, was durch die Tatsache, dass Initiates in allen anderen Fällen falsch ist, abgeschlossen werden sollte. Diese Tatsache kann durch einfache Umschreibung der Prädikatsinitiate in der obigen Formel formalisiert werden. Es ist wichtig zu beachten, dass diese Umschreibung nur auf den Formeln erfolgt, in denen Initiate und nicht auf den Domain-unabhängigen Axiomen angegeben werden. Das Prädikat Terminate kann in der gleichen Weise angegeben werden Initiates ist. Für das Prädikat Happens kann ein ähnlicher Ansatz verfolgt werden. Die Auswertung dieses Prädikats kann durch Formeln durchgeführt werden, die nicht nur dann angeben, wenn es wahr ist, und wenn es falsch ist: H a p p e n s (e , t ) ≡ (e = o p e n ≠ 0 ) ) \{displaystyle \{mathit {Happens}}(open,0) H a p e n s ( e x i t, 1 ) \{displaystyle \{mathit {Happens}(exit,1) Circumscribing the predicate Happens, dieses Prädikat wird an allen Punkten falsch sein, in denen es nicht explizit angegeben ist, wahr zu sein. Diese Umschreibung muss getrennt von der Umschreibung der anderen Formeln erfolgen. In anderen Worten, wenn F der Satz von Formeln der Art I n i t e s (e, f, t ) H Die Ereignisrechnung als Logikprogramm Die Veranstaltungsrechnung wurde ursprünglich als eine Reihe von Horn-Klausel formuliert, die mit Negation als Scheitern erweitert wurde und als Prolog-Programm ausgeführt werden konnte. In der Tat ist Umschreibung eine der mehreren Semantik, die der Negation als Versagen gegeben werden kann, und ist eng mit der Vervollständigung Semantik verbunden (in der, wenn als "wenn und nur, wenn" interpretiert wird - siehe Logik-Programmierung). Erweiterungen und Anwendungen Das originale Event-Calculus-Papier von Kowalski und Sergot konzentrierte sich auf Anwendungen zu Datenbank-Updates und Erzählungen. Erweiterungen der Veranstaltungsrechnung können auch nicht-deterministische Aktionen, gleichzeitige Aktionen, Aktionen mit verzögerten Auswirkungen, allmähliche Veränderungen, Aktionen mit Dauer, kontinuierliche Veränderung und nicht-inertiale Einflüsse formalisieren. Kave Eshghi zeigte, wie das Ereigniskalkulus für die Planung verwendet werden kann, mit Abduktion, um hypothetische Ereignisse in der ableitenden Logik-Programmierung zu erzeugen. Van Lambalgen und Hamm zeigten, wie die Ereignisrechnung auch verwendet werden kann, um eine algorithmische Semantik zu spannen und Aspekt in der natürlichen Sprache mit konstraint Logik-Programmierung. Weitere bemerkenswerte Erweiterungen des Event Calculus umfassen Markov Logic Networks-basierte, probabilistische, epistemische Varianten und deren Kombinationen. Begründung von Werkzeugen Neben Prolog und seinen Varianten stehen auch mehrere andere Werkzeuge zur Vernunft mit der Eventrechnung zur Verfügung: Abduktive Event Calculus Planners Diskrete Event Calculus Reasoner Event Calculus Antwort Set Programming Reactive Event Calculus Siehe auch First-Ordner Logik Frame Problem Situation Calculus Referenzen Weiteres Lesen Brandano, S. (2001) "The Event Calculus Assessed", IEEE TIME Symposium: 7-12.R Kowalski und F. Sadri (1995) "Variants of the EventLP. Unsinn Begründung: Ein Event Calculus Based Approach (2. Ed.). Waltham, MA: Morgan Kaufmann/Elsevier.ISBN 978-0128014165.(Leitfaden für die Nutzung der Veranstaltungsrechnung) Shanahan, M. (1997)Solving the frame problem: Eine mathematische Untersuchung des gängigen Trägheitsgesetzes. MIT Press. Shanahan, M. (1999) "The Event Calculus Explained" Springer Verlag, LNAI (1600:) 409-30.