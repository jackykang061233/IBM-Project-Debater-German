Komputability ist die Fähigkeit, ein Problem wirksam zu lösen. Es ist ein Schlüsselthema des Bereichs der Komputbarkeitstheorie innerhalb mathematischer Logik und der Rechentheorie in der Computerwissenschaft. Die Komputierbarkeit eines Problems ist eng mit dem Bestehen eines Algorithmus zur Lösung des Problems verbunden. Die am häufigsten untersuchten Modelle der Komputierbarkeit sind das Turing-komputierbare und μ-recursive Funktionen und das Lambda-Risiko, von denen alle rechnerisch gleichwertig sind. Andere Formen der Komputierbarkeit werden ebenfalls untersucht: Komputability notions schwächer als Turing-Maschinen werden in der Automatisierungstheorie untersucht, während die Komputability-Zulassungen stärker als Turing-Maschinen im Bereich der Hyperkomputation untersucht werden. Probleme Eine zentrale Idee der Komputierbarkeit ist das eines (ktom) Problems, das eine Aufgabe ist, deren Komputbarkeit erkundet werden kann. Es gibt zwei zentrale Probleme: Ein Entscheidungsproblem legt ein Set S fest, das eine Reihe von Punkten, natürlichen Nummern oder anderen Gegenständen sein kann, die aus einem größeren Satz von U stammen. Ein besonderes Problem ist die Entscheidung, ob u in S. z.B. die Anzahl der natürlichen Nummern und S die Reihe der Hauptnummern ist. Das entsprechende Entscheidungsproblem entspricht Primartests. Ein Funktionsproblem besteht aus einer Funktion, die von einem Set U bis einem Set V.An Fall des Problems ausgeht, um aufgrund eines Elements u in U das entsprechende Element f(u) in V zu berechnen. U und V können z.B. das Set aller finite binären Gegenstände sein, und f kann die durch die Umkehr der Ziffern des Inputs (so f(0101)=1010 gewonnene Spanne übernehmen. Andere Probleme umfassen Suchprobleme und Optimierungsprobleme. Ein Ziel der Komputbarkeitstheorie ist es, festzustellen, welche Probleme oder Arten von Problemen in jedem Modell der Berechnung gelöst werden können. Formal Modelle der Berechnung eines Berechnungsmodells sind eine formale Beschreibung einer bestimmten Art von Berechnungsverfahren. Die Beschreibung wird oft in Form einer abstrakten Maschine durchgeführt, die zur Erfüllung der Aufgabe bestimmt ist. Allgemeine Berechnungsmodelle, die einer Turing-Maschine gleichwertig sind (siehe Kirche – Gewahrsam) umfassen: Lambda kalkuliert Eine Berechnung besteht aus einer ersten Lämmerung (oder zwei, wenn Sie die Funktion und ihren Input trennen möchten) sowie einer finite Sequenz von Lambda-Bedingungen, die jeder von der vorherigen Bezeichnung durch eine Anwendung der Beta-Reduktion abgezogen hat. Kombinationslogik Ein Konzept, das viele Ähnlichkeiten wie   Memedisplaystyle \lambda } aufweist, aber auch große Unterschiede bestehen (z.B. Fixpunkt-Kombinationator Y hat normale Form in Kombinationslogik, aber nicht in   WELLdisplaystyle \lambda } -calité). Kombinationslogik wurde mit großen Ambitionen entwickelt: Verständnis der Natur von Paradoxen, Schaffung von Grundlagen für Mathematik mehr Wirtschaft (konzeptual), Beseitigung des Begriffs der Variablen (z.B. Klärung ihrer Rolle in Mathematik). Eine Berechnung besteht aus einer μ-recursive Funktion, d.h. ihrer Definitionssequenz, einem Input-Wert (s) und einer Sequenz von recuriven Funktionen, die in der Definitionssequenz mit Inputs und Outputs enthalten sind. Wenn die Funktionen g(x) und h(x,y) in der Definition einer recuriven Funktion f(x) erscheinen, dann erscheinen die Bedingungen der Form g(5)= 7 oder h(3,2)= 10. Jeder Eintrag in dieser Reihenfolge muss eine Grundfunktion oder eine Folge der oben genannten Einträge sein, indem er Zusammensetzung, eine erhebliche Wiedereingliederung oder μ-Rücknahme nutzt. z.B. wenn f(x) =h(x,g(x) dann für f(5)= 3 zu erscheinen, Bedingungen wie g(5) = 6 und h(5,6)= 3 muss vor allem auftreten. Die Berechnung endet nur, wenn der endgültige Begriff den Wert der auf die Inputs angewandten recuriven Funktion verleiht. Strenge Umrechnungssysteme umfassen Markov-Algorithmen, die charakteristische Regeln verwenden, um auf Symbole zu operieren; auch Post canonisches System. Register theoretische Idealisierung eines Computers. Es gibt mehrere Varianten. In den meisten von ihnen kann jedes Register eine natürliche Nummer (mit unbegrenzter Größe) halten, und die Anweisungen sind einfach (und nur wenige Nummern), z.B. nur Abschwächung (kombiniert mit einem bedingten Sprung) und Herabsetzung (und Einhalt). Mangel des unbegrenzten (oder dynamisch wachsenden) externen Speichers (im Turing-Maschinen) kann verstanden werden, indem es seine Rolle durch Gödel-Nummern ersetzt: Die Tatsache, dass jedes Register eine natürliche Nummer besitzt, erlaubt die Möglichkeit, eine komplizierte Sache (z.B. eine Sequenz oder eine Matrix usw.) durch eine angemessene natürliche Nummer – Unklarheit der Darstellung und Auslegung durch theoretische Grundlagen dieser Techniken zu vertreten. Druckmaschinen ähnlich wie die Finite State Maschine, es sei denn, dass der Input auf einem Ausführungsband bereitgestellt wird, der die Turing-Maschine lesen kann, schreiben oder zurück und zurückziehen kann. Es ist erlaubt, sich auf willkürliche Größe zu erhöhen. Die Turing-Maschine ist in der Lage, komplexe Berechnungen durchzuführen, die willkürlich sein können. Dieses Modell ist vielleicht das wichtigste Modell der Berechnung in der Computerwissenschaft, da es die Berechnung in Ermangelung von vorher festgelegten Ressourcengrenzwerten simuliert. Mehr büro Turing Hier kann es mehr als einen bürokratischen Aufwand geben; darüber hinaus gibt es mehrere Köpfe pro Büro. Jegliche Berechnung, die von dieser Art von Maschinen durchgeführt werden kann, kann auch von einer normalen Turing-Maschine durchgeführt werden, obwohl die letztere langsamer sein können oder eine größere Gesamtregion ihres bürokratischen Aufwands erfordern. P′′ wie Turing-Maschinen, P′′ verwendet einen unbegrenzten Aufwand an Symbolen (ohne Zufallszugang) und ein eher minimaler Satz von Anweisungen. Jedoch sind diese Anweisungen sehr unterschiedlich, was im Gegensatz zu Turing-Maschinen nicht erforderlich ist, um einen gesonderten Staat beizubehalten, da alle „memory-like“-Funktionen nur durch den Aufwand bereitgestellt werden können. statt das aktuelle Symbol neu zu vervollständigen, kann es eine modulare Arithmetic-Insensierung auf diese Weise durchführen. P′′ hat auch eine Reihe von Anweisungen für einen Zyklus, die das leere Symbol überprüfen. Trotz seiner minimalen Natur ist es die parental formale Sprache einer umgesetzten und (für Unterhaltung) verwendete Programmierungssprache „ Brainfuck“. Neben den allgemeinen Berechnungsmodellen sind einige einfachere Rechenmodelle für spezielle, eingeschränkte Anwendungen sinnvoll. Konkrete Ausdrucksformen, beispielsweise in vielen Kontexten, von Büroproduktivitätssoftware bis hin zu Programmiersprachen. Ein weiterer formalismus, der den regelmäßigen Ausdrucken entspricht, wird Finite automata im Kreisdesign und in einigen Arten von Problemlösung verwendet. Kontextfreie Mathematiken geben die Programmiersprache-Sprach-Diagnose an. Non-deterministic Pushdown automata ist ein weiterer formalismus, der den Kontext-free-Philosophien entspricht. unterschiedliche Berechnungsmodelle haben die Fähigkeit, verschiedene Aufgaben zu übernehmen. Ein Weg, um die Leistung eines Rechenmodells zu messen, besteht darin, die Klasse der formalen Sprachen zu studieren, die das Modell erzeugen kann; so ist die Chomsky Hierarchie der Sprachen zu erhalten. Andere eingeschränkte Berechnungsmodelle umfassen: Deterministic finite automaton (DFA), auch als finite-state-Maschine. All reale Rechengeräte, die heute vorhanden sind, können als finite-staatliche Maschine konzipiert werden, da alle echten Computer auf finitetischen Ressourcen arbeiten. Eine solche Maschine hat eine Reihe von Staaten und eine Reihe von staatlichen Übergängen, die vom Inputstrom betroffen sind. Manche Staaten sind definiert, um Staaten zu akzeptieren. Ein Inputstrom wird zu einer Zeit in die Maschine eingespeist, und die staatlichen Übergänge für den gegenwärtigen Staat werden mit dem Inputstrom verglichen, und wenn ein entsprechender Übergang der Maschine in einen neuen Staat eintritt. Wenn am Ende des Eingangsstroms die Maschine in einem annehmbaren Zustand ist, wird der gesamte Inputstrom akzeptiert. Nichtdeterministic finite automaton (NFA)Ein anderes einfaches Berechnungsmodell, obwohl seine Verarbeitungssequenz nicht eindeutig bestimmt ist. Es kann so ausgelegt werden, dass mehrere Rechenwege gleichzeitig durch eine finite Zahl von Staaten genutzt werden. Man kann jedoch nachweisen, dass jede NFA mit einem gleichwertigen DFA wieder rentabel ist. Impulsgeber automaton ähnlich wie die finite staatliche Maschine, es sei denn, sie hat einen Ausführungsstapel zur Verfügung, der zu willkürlicher Größe wachsen darf. Die staatlichen Übergänge legen außerdem fest, ob ein Symbol auf den Knopf gelegt oder ein Symbol aus dem Knopf entfernt werden soll. Mehr als ein DFA aufgrund seines unendlichen Flachs, obwohl nur das Top-Element des Knopfs jederzeit zugänglich ist. Leistung von automata Mit diesen Berechnungsmodellen können wir bestimmen, was ihre Grenzen sind. Dies ist, was Sprachenklassen akzeptieren können? Computerwissenschaftler fordern jede Sprache an, die von einer finnischen Maschine akzeptiert werden kann. Aufgrund der Beschränkung, die die Zahl möglicher Staaten in einer finnischen staatlichen Maschine ist, können wir sehen, dass wir eine Sprache finden, die nicht regelmäßig ist, müssen wir eine Sprache erstellen, die eine unendliche Zahl von Staaten erfordert. Ein Beispiel einer solchen Sprache ist das Set aller Punkte, die aus den Buchstaben a und b bestehen, die eine gleiche Anzahl des Buchstabens a und b enthalten. Um zu sehen, warum diese Sprache nicht von einer Finite State-Maschine richtig anerkannt werden kann, nehmen Sie zunächst an, dass eine solche Maschine M existiert. M muss eine Reihe von Staaten haben. Überlegungen jetzt an, welche Spanne bestehen (n + 1 ) Memestyle (n+1)} gefolgt von (n + 1 ) Memestyle (n+1)} b's.A M liest in x, es muss ein gewisser Zustand in der Maschine sein, der wiederholt wird, da es in der ersten Serie eines ist, denn es gibt (n + 1 ) Memestyle (n+1) und nur n Staaten nach dem Prinzip der Enttauung. Anrufen Sie diesen Staat S und lassen Sie sich die Zahl einer lesen, die unsere Maschine gelesen hat, um aus dem ersten Auftreten von S bis einigen späteren Ereignissen während der Sequenz zu kommen. Wir wissen dann, dass wir bei diesem zweiten Auftreten von S in einem zusätzlichen D hinzufügen können (wo d. h.: 0 JPYstyle d>0} a'sand wir werden wieder an State S. Dies bedeutet, dass wir wissen, dass eine Reihe von (n + d + 1 ) KINGstyle (n+d+1)} a's muss im gleichen Zustand wie die Spanne (n + 1 ) Memedisplaystyle (n+1)} a's enden. Wenn unsere Maschine x akzeptiert, muss sie auch die Spanne (n + 1 ) Memestyle (n+d+1)} akzeptieren, gefolgt von (n + 1 ) Memestyle (n+1)} b's, die nicht in der Sprache von Punkten, die eine gleiche Anzahl von Buchstaben und B enthalten. In anderen Worten kann M nicht richtig zwischen einer Reihe von gleichen Nummern und b's und einer Spanne mit (n + d + 1 ) Memedisplaystyle (n+d+1)} einem' und n + 1 {\displaystyle n+1} b's. Wir wissen daher, dass diese Sprache nicht korrekt von einer beliebigen Finite-state-Maschine akzeptiert werden kann und daher keine reguläre Sprache ist. Eine allgemeinere Form dieses Ergebnisses ist die Pumping lemma für reguläre Sprachen, die verwendet werden können, um zu zeigen, dass breite Sprachenklassen nicht von einer finnischen staatlichen Maschine anerkannt werden können. Macht von Pushdown automata Computerwissenschaftlern definiert eine Sprache, die von einem Impulsdown automaton als eine umgebungsfreie Sprache akzeptiert werden kann, die als Kontext-free-Rhin bezeichnet werden kann. Die Sprache, die mit gleichen Nummern der und b's besteht, die wir nicht als reguläre Sprache zeigten, kann von einem beschleunigten Automaton entschieden werden. Im Allgemeinen kann sich ein beschleunigtes automaton genauso verhalten wie eine finite-staatliche Maschine, so dass es jede Sprache bestimmen kann, die regelmäßig ist. Dieses Modell der Berechnung ist somit strenger als die finnischen staatlichen Maschinen. Jedoch gibt es Sprachen, die nicht durch das beschleunigte automaton entschieden werden können. Das Ergebnis ist ähnlich wie für regelmäßige Ausdrucke und wird hier nicht detailliert beschrieben. Es gibt eine Pumpe für kontextfreie Sprachen. Ein Beispiel für eine solche Sprache ist die Zahl der Hauptnummern. Macht der Turing-Maschinen kann über keine kontextfreie Sprache entscheiden, zusätzlich zu den Sprachen, die nicht durch einen beschleunigten Automaton entscheiden können, wie die Sprache, die aus den Hauptnummern besteht. Es ist daher ein sehr leistungsfähigeres Rechenmodell. Da Turing-Maschinen die Möglichkeit haben, in ihrem Vorbeitrittsband "back up" zu starten, ist es möglich, dass eine Turing-Maschine lange Zeit in einer Weise läuft, die mit den anderen zuvor beschriebenen Berechnungsmodellen nicht möglich ist. Es ist möglich, eine Turing-Maschine zu bauen, die auf einigen Inputs nie enden wird. Wir sagen, dass eine Turing-Maschine eine Sprache entscheiden kann, wenn sie schließlich auf alle Inputs stoppen und eine Antwort geben wird. Eine so entschiedene Sprache wird als neue Sprache bezeichnet. Wir können auch Turing-Maschinen beschreiben, die schließlich aufhören und eine Antwort für alle Beiträge in einer Sprache geben werden, die jedoch für die Input-Behinderungen, die nicht in der Sprache sind, immer laufen können. Solche Turing-Maschinen könnten uns sagen, dass eine bestimmte Strenge in der Sprache ist, aber wir können niemals sicher sein, dass eine bestimmte Schale nicht in einer Sprache ist, da sie in einem solchen Fall für immer läuft. Eine Sprache, die von einer solchen Turing-Maschine akzeptiert wird, wird als eine rekonkrutierbare Sprache bezeichnet. Die Turing-Maschine ist ein überhöhtes Modell von automata. Versuche, die Definition einer Turing-Maschine zu ändern, um eine leistungsfähigere Maschine zu produzieren, haben sich überraschend mit einem Ausfall getroffen. Um beispielsweise einen zusätzlichen bürokratischen Aufwand für die Turing-Maschine hinzuzufügen, so dass sie eine zweidimensionale (oder drei- oder jedesdimensionale) unendliche Oberfläche zur Arbeit mit kann alle durch eine Turing-Maschine mit einem einzigendimensionalen Aufwand simuliert werden. Diese Modelle sind somit nicht leistungsfähiger. Konkret bedeutet dies, dass es kein vernünftiges Berechnungsmodell gibt, das Sprachen bestimmen kann, die nicht von einer Turing-Maschine entschieden werden können. Frage nach diesem Zeitpunkt: gibt es Sprachen, die recuriv enumerierbar sind, aber nicht recuriv sind? Darüber hinaus gibt es Sprachen, die nicht einmal recuriv sind? Problem Das Problem ist eines der bekanntesten Probleme in der Computerwissenschaft, denn es hat tiefgreifende Auswirkungen auf die Komputbarkeitstheorie und auf die Nutzung von Computern in der Alltagspraxis. Das Problem ist: Angesichts einer Beschreibung eines Turing-Maschines und seines ersten Inputs ist festzustellen, ob das Programm, wenn es auf diesem Input ausgeführt wird, immer gestoppt (vollständig). Die Alternative ist, dass sie immer ohne Einhalt läuft. Hier fragen wir nicht eine einfache Frage über eine Hauptnummer oder einen palindrome, sondern wir setzen stattdessen die Tabellen ein und fordern eine Turing-Maschine auf, um eine Frage über eine andere Turing-Maschine zu beantworten. Es kann gezeigt werden (siehe Hauptartikel: Das Problem) dass es nicht möglich ist, eine Turingmaschine zu bauen, die diese Frage in allen Fällen beantworten kann. Das ist der einzige allgemeine Weg, um sicher zu wissen, ob ein bestimmtes Programm auf einen bestimmten Input in allen Fällen nur läuft, es durchzuführen und zu sehen, wenn es gestoppt. Wenn es aufhören wird, wissen Sie, dass es aufhören wird. Wenn sie nicht aufhören, können Sie jedoch niemals wissen, ob es letztendlich aufhören wird. Die Sprache, die aus allen Turing-Maschinenbeschreibungen besteht, die mit allen möglichen Inputströmen, auf denen die Turing-Maschinen schließlich aufhören, beeinträchtigt werden, ist nicht recuriv. Das Problem ist daher nicht stichhaltig oder unerheblich. Eine Erweiterung des Stillstandproblems ist der Reisanleger genannt, der erklärt, dass es unbestreitbar ist (im Allgemeinen), ob eine bestimmte Sprache über ein bestimmtes nicht tödliches Eigentum verfügt. Mehrsprachige Sprachen Das Problem ist leicht zu lösen, wenn wir zulassen, dass die Turing-Maschine, die sie beschließt, für immer laufen kann, wenn die Eingabe, die eine Darstellung einer Turing-Maschine ist, die sich nicht aufhalten lässt. Die Einstellung der Sprache ist daher rekonkrutierbar. Es ist möglich, Sprachen zu erstellen, die nicht einmal recuriv enumerierbar sind. Ein einfaches Beispiel einer solchen Sprache ist die Ergänzung der Einstellungssprache; die Sprache, die aus allen Turing-Maschinen besteht, die mit den Inputs behindert werden, wenn die Turing-Maschinen ihren Input nicht stoppen. Um zu sehen, dass diese Sprache nicht recuriv enumerierbar ist, sind wir der Ansicht, dass wir einen Turing-Maschine M aufbauen, der eine eindeutige Antwort für alle diese Turing-Maschinen geben kann, aber dass sie auf jeder Turing-Maschine, die schließlich zum Stillstand kommt. Wir können dann eine weitere Turing-Maschine M ́ Memestyle M'} bauen, die den Betrieb dieser Maschine simuliert und die Ausführung der im Input angegebenen Maschine direkt simuliert, indem wir die Ausführung der beiden Programme miteinander verknüpfen. Da die direkte Simulation schließlich aufhören wird, wenn das Programm simuliert wird, und da die Simulation von M letztendlich gestoppt wird, wenn das Input-Programm nie stoppen würde, wissen wir, dass M ́ ́ Memestyle M} schließlich eine seiner Parallelversionen aufweisen wird. M ́ Memedisplaystyle M'} ist somit ein Entscheidungsträger für das Problem. Wir haben bisher jedoch gezeigt, dass das Einfrieren von Problemen unbedenklich ist. Wir haben einen Widerspruch, und wir haben daher gezeigt, dass unsere Annahme, dass M existiert, falsch ist. Die Komplementierung der Sprache ist daher nicht reaksierbar. Konwährungsbasierte Modelle Eine Reihe von Berechnungsmodellen auf der Grundlage von Konwährung wurden entwickelt, darunter die parallele Random-Zugangsmaschine und das Petri-Netz. Diese Modelle der gleichzeitigen Berechnung führen immer noch nicht zu mathematischen Funktionen, die nicht von Turing-Maschinen implementiert werden können. Stärkere Modelle der Berechnung Die Kirche – Gewährleistung der Injektionen, dass es kein wirksames Rechenmodell gibt, das mehr mathematische Funktionen als eine Turing-Maschine berechnen kann. Computerwissenschaftler haben viele Arten von Hypercomputern, Modellen von Berechnungen vorgestellt, die über die Turing-Belastbarkeit hinausgehen. Hinrichtung einer Anzeigemaschine, in der jeder Schritt der Berechnung die Hälfte des vorherigen Schritts (und hoffentlich die Hälfte der Energie des vorherigen Schritts...) erfordert. Wenn wir den Betrag der für den ersten Schritt erforderlichen Zeit (und die für den ersten Schritt erforderliche Energieeinheit der für den ersten Schritt erforderlichen Energiemenge) auf 1/2 Stunden normalisieren. die Ausführung würde 1 = 1   n = 1  2 1 2 n = 1 2 + 1 4 + 1 8 + 1 16 + ⋯ HANAstyle 1=\sum _n=1}^{\infty {\}frac 1}{2}}}n==9.5frac 1}{2}}+ 1}{4++ 1168++ cufrac 11616++\cdots } Zeiteinheit (und 1 Energieeinheit). zu laufen. Diese unendliche Serie wechselt sich auf 1, was bedeutet, dass diese Zeno-Maschine eine höchst unendliche Anzahl von Schritten in 1 Zeiteinheit (mit 1 Energieeinheit...) ausführen kann. Diese Maschine ist in der Lage, das Problem zu lösen, indem sie die Ausführung der betreffenden Maschine direkt simuliert.Durch Erweiterung würden alle konvergenten unendlichen [must provibel unendlich]-Reihen funktionieren. Annahme, dass die unendliche Serie einem Wert entspricht, würde die Zeno-Maschine eine bezahlbare unendliche Ausführung in n-Zeiteinheiten abschließen. Oracle Maschinen So- sogenannte Oracle-Maschinen haben Zugang zu verschiedenen Oracles, die die Lösung für bestimmte unbewegliche Probleme bieten. Zum Beispiel kann die Turing-Maschine einen "Haling oracle" haben, der sofort antwortet, ob eine bestimmte Turing-Maschine immer auf einem bestimmten Input aufhalten wird. Diese Maschinen sind ein zentrales Thema der Studie in der Recursionstheorie. Grenzen der Hyper-Komputation Selbst diese Maschinen, die offenbar die Grenze von automata darstellen, die wir vorstellen könnten, laufen in ihre eigenen Grenzen. Jede von ihnen kann das Problem für eine Turing-Maschine lösen, sie können ihre eigene Version des Problems nicht lösen. Zum Beispiel kann ein Oracle-Gerät die Frage nicht beantworten, ob eine bestimmte Oracle-Maschine jemals stoppen wird. Siehe auch Automata Theorie Abstract maschinelle Liste der unlösbaren Probleme Computational Theorie Computability Logik Wichtige Veröffentlichungen in Bezug auf die Komputierbarkeit von Michael Sipser (1997). Einführung in die Komputation. PWS Publishing. ISBN 0-534-94728-X. Teil 2: Komputabilitymatic, Kapitel 3–6, pp.123-222.Christos Papadimitriou (1993).Computational Complexity (1. ed). McBN 0-201-53082-1.Chapter 3: Komputability, pp. 57-70.S Barry Cooper (2004). Komplementarität Theorie (1. Chapman & Hall/KRK.ISBN UV1-58488-237-4. Ein politischer Mythos ist ein ideologisches Konzept, das von sozialen Gruppen angenommen wird. Henry Tudor hat es 1975 im Buch Politische Mythen definiert. Er sagte, dass Mythen auch dann wahr sein werden, wenn sie falsch sein könnten, und sie sind Geräte mit dramatischen Bauen, die "für die Realität werden". Politische Mythen befassen sich einfach mit politischen Themen und verwenden immer eine Gruppe von Menschen als Hero oder Schauspieler. Christopher G. Hoch hat im Jahr 2001 eine Arbeitsdefinition eines politischen Mythoss als "eine ideologische Ausdruckssprache bezeichnet, die ein echtes Konto einer Reihe von früheren, aktuellen oder vorhergesagten politischen Ereignissen enthält und die in ihren wesentlichen Bestandteilen einer sozialen Gruppe als gültig anerkannt wird". Beispiele, die als politische Mythen genannt werden, sind das Manifest, die Clash von Zivilisationen und nationale Mythen. Ernst Cassirer hat 1946 seine politische Theorie in seinen Mythen des Staates wieder aufgenommen. Im Jahr 1973 schrieb T. L. Thorson in der vierten Ausgabe der Politischen Theorie: "Es ist die Marke eines modernen Geistes, um einen Mythos ausdrücklich als eine Art von Einfluss auf andere zu schaffen (wie z.B. in der Republik. In seinem ursprünglichen Sinne ist Mythos eine wissenschaftliche Beschreibung. Funktionsfähigkeit Laut Tudor ist die Neufassung des Mythen als politischer Natur ein Thema, der Politik. Um als Mythos neu zu definieren, muss die Darstellung der Ereignisse in dramatischer Form erfolgen und es muss ein praktisches Argument sein. Tudor definiert dramatische Form und stellt fest, dass es tatsächlich ein kritisches Ereignis ist, auf das sich die Männer auf ihre gegenwärtige Erfahrung berufen können, aber die in der Vergangenheit getroffenen Ereignisse werden. " Die Funktion des politischen Mythen kann besser verstanden werden, wenn es in folgende Komponenten unterteilt ist: (1) Myth bietet das theoretische Argument, das in eine (2) Ideologie aufgenommen wird, die den Mythos durch ein praktisches Argument unterstützt. Jeder Mythos hat seinen Protagonisten/Eigentum, der eine besondere Gemeinschaft darstellt, die darauf abzielt, eine moralische kohärente Welt zu schaffen, die die Aktivitäten der Gemeinschaft auf dieses Ziel setzt. Mythopoeische Ausdrucke im politischen Diskurs können sich von Herkunftsgeschichten (foundation Mythen) unterscheiden, die die Gründung einer Gemeinschaft in Betracht ziehen, um ein politisches Vorkommen auf eine in der Zukunft gegründete Gemeinschaft (häufig eine utopinische Vision) zu verlagern, um eine politische Gemeinschaft zu sanieren, die nicht mehr existiert. Obwohl sowohl der Mythos als auch die Ideologie bestimmte Werte und Überzeugungen tragen, ist die Ideologie ein praktisches Argument, das darauf beruht, die bisherigen Erfahrungen der Gemeinschaft als kohärenter zu gestalten und ihnen zu ermöglichen, ihre gegenwärtigen Umstände zu verstehen und häufig, damit Gemeinschaften Ziele für künftige Aktivitäten bieten. Ein Mythos wird als politischer Mythos angesehen, wenn das Konzept ein ideologisch gekennzeichnetes Konto der Vergangenheit, Gegenwart und Zukunft der politischen Gemeinschaft darstellt. Durch ideologisch gekennzeichnet ist das Konzept „Einnahmen, Werte und Ziele, die mit einer bestimmten Ideologie verbunden sind... die eine implizite Aufforderung zur Zustimmung zu einem bestimmten ideologischen Standpunkt darlegt. " Kurz gesagt, die politischen Mythen bieten "ein Konto der Vergangenheit und der Zukunft im Lichte dessen, was die Gegenwart verstehen kann". Der Erfolg politischer Mythen hängt von dem praktischen Argument ab, das als wahr anerkannt wird. Georges Sorel kommunistisches Symbolismus der bürgerlichen Religionsgründe des Mythos National Symbol Noble liegt politisches Symbolismus der Sozialistischen Literatur Arvidsson, Stefan (2017). Kultur und Mythologie des Sozialismus: Sozialer Idealismus, den 18.-1914. Routledge Bottici, Chiara (2007). Philosophie des politischen Mythos. Cambridge: Cambridge University Press Cassirer, Ernst (1946). Mythos des Staates. London: Oxford U.P Flut, Christopher (2002). Politischer Mythos: eine theoretische Einführung. [New ed.]New York: Routledge Tudor, Henry Miller. Politischer Mythos.London: Macmillan