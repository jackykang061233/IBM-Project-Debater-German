Die Programmiersprachetheorie (PLT) ist ein Zweig der Informatik, der sich mit dem Design, der Implementierung, der Analyse, der Charakterisierung und der Klassifikation formaler Sprachen befasst, die als Programmiersprachen und deren individuellen Merkmale bekannt sind. Es fällt in die Disziplin der Informatik, sowohl abhängig von und beeinflussen Mathematik, Software Engineering, Linguistik und sogar kognitive Wissenschaft. Es ist zu einem anerkannten Zweig der Informatik geworden, und ein aktives Forschungsgebiet, mit Ergebnissen veröffentlicht in zahlreichen Zeitschriften für PLT, sowie in allgemeinen Informatik und Ingenieur Publikationen. Geschichte In gewisser Weise prädiziert die Geschichte der Programmiersprachetheorie sogar die Entwicklung von Programmiersprachen selbst. Der von der Alonzo-Kirche und Stephen Cole Kleene in den 1930er Jahren entwickelte Lambda-Calculus wird von einigen als die weltweit erste Programmiersprache betrachtet, obwohl es dazu gedacht war, die Berechnung zu modellieren, anstatt als Mittel für Programmierer, Algorithmen auf ein Computersystem zu beschreiben. Viele moderne funktionelle Programmiersprachen sind als die Bereitstellung eines "dünnen Furniers" über den Lambda-Kalkus beschrieben worden, und viele sind leicht in Bezug auf ihn beschrieben. Die erste zu erfindende Programmiersprache war Plankalkül, der in den 1940er Jahren von Konrad Zuse entworfen wurde, aber erst 1972 öffentlich bekannt war (und erst 1998 umgesetzt wurde). Die erste bekannte und erfolgreiche Programmiersprache auf hoher Ebene wurde von 1954 bis 1957 von einem Team von IBM-Forschern unter der Leitung von John Backus entwickelt. Der Erfolg von FORTRAN führte zur Bildung eines Wissenschaftlerkomitees, um eine universelle Computersprache zu entwickeln; das Ergebnis ihrer Bemühungen war ALGOL 58. Getrennt entwickelte John McCarthy von MIT Lisp, die erste Sprache mit Ursprung in Wissenschaft, um erfolgreich zu sein. Mit dem Erfolg dieser ersten Bemühungen wurde Programmiersprachen in den 1960er und darüber hinaus ein aktives Forschungsthema. Einige andere wichtige Ereignisse in der Geschichte der Programmiersprache Theorie seit damals: 1950er Jahre Noam Chomsky entwickelte die Chomsky Hierarchie auf dem Gebiet der Linguistik, eine Entdeckung, die direkt die Programmiersprache Theorie und andere Zweige der Informatik beeinflusst hat. 1960sDie Simula-Sprache wurde von Ole-Johan Dahl und Kristen Nygaard entwickelt; sie gilt als das erste Beispiel einer objektorientierten Programmiersprache; Simula stellte auch das Konzept der Koroutinen vor. Im Jahr 1964 ist Peter Landin der erste, der die Lambda-Kalkulation der Kirche erkennt, kann verwendet werden, um Programmiersprachen zu modellieren. Er führt die SECD-Maschine ein, die Lambda-Ausdrücke interpretiert. Im Jahr 1965 führt Landin den J-Operator ein, im Wesentlichen eine Fortsetzung. 1966 stellt Landin ISWIM, eine abstrakte Programmiersprache in seinem Artikel The Next 700 Programmier Languages vor. Es ist einflussreich in die Gestaltung von Sprachen, die zur Haskell Programmiersprache führen. 1966 stellte Corrado Böhm die Programmiersprache CUCH (Curry-Church) vor. Im Jahr 1967 veröffentlicht Christopher Strachey seinen einflussreichen Vortragssatz zu Grundlagenkonzepten in Programmiersprachen, die Einführung der Terminologie R-Werte, L-Werte, parametrischer Polymorphismus und Ad-hoc-Polymorphismus. 1969 veröffentlicht J. Roger Hindley Der Haupttyp-Scheme eines Objekts in Kombinationslogik, später in den Inferenzalgorithmus Hindley–Milner Typ verallgemeinert. Im Jahr 1969 stellt Tony Hoare die Hoare-Logik vor, eine Form der axiomatischen Semantik. In 1969, William Alvin Howard beobachtet, dass ein hochrangiges Beweissystem, genannt natürliche Ableitung, kann direkt in seiner intuitionistischen Version als eine Typ-Variante des Modells der Berechnung als Lambda Calculus interpretiert werden. Dies wurde als Curry-Howard Korrespondenz bekannt. 1970sIn 1970 veröffentlicht Dana Scott zunächst seine Arbeit an der demotationalen Semantik. 1972 wurden logische Programmierung und Prolog entwickelt, so dass Computerprogramme als mathematische Logik ausgedrückt werden können. Ein Forscherteam von Xerox PARC unter der Leitung von Alan Kay entwickelt Smalltalk, eine objektorientierte Sprache, die für sein innovatives Entwicklungsumfeld bekannt ist. 1974 entdeckt John C. Reynolds System F.It wurde bereits 1971 vom mathematischen Logiker Jean-Yves Girard entdeckt. Ab 1975 entwickeln Gerald Jay Sussman und Guy Steele die Programmiersprache Scheme, einen Lisp-Dialekt mit lexical scoping, einen einheitlichen Namensraum und Elemente aus dem Schauspielermodell einschließlich erstklassiger Fortführungen. Backus, bei der Vorlesung des Turing Award 1977, beschrieb den aktuellen Stand der Industriesprachen und schlug eine neue Klasse von Programmiersprachen vor, die jetzt als Funktion-Level Programmiersprachen bekannt sind.1977 führt Gordon Plotkin Programming Computable Functions ein, eine abstrakt eingegebene Funktionssprache. 1978 stellt Robin Milner den Inferenzalgorithmus Hindley–Milner für ML vor. Typ-Theorie wurde als Disziplin auf Programmiersprachen angewendet, diese Anwendung hat zu enormen Fortschritten in der Typ-Theorie über die Jahre geführt. 1980sIn 1981 veröffentlicht Gordon Plotkin sein Papier über strukturierte operative Semantik. 1988 veröffentlichte Gilles Kahn sein Papier über natürliche Semantik. Es entstand Prozesskalkulation, wie der Calculus of Communicating Systems von Robin Milner, und das Communicating sequential process Modell von C. A. R. Hoare, sowie ähnliche Modelle der Konkurrenz wie das Schauspielermodell von Carl Hewitt. Im Jahr 1985 entzündet Miranda ein akademisches Interesse an faul bewerteten reinen funktionellen Programmiersprachen. Ein Ausschuss wurde gebildet, um einen offenen Standard zu definieren, der die Freilassung des Standards Haskell 1.0 im Jahre 1990 zur Folge hat. Bertrand Meyer erstellte die Methodik Design durch Vertrag und integriert es in die Eiffel Programmiersprache. 1990er Jahre Gregor Kiczales, Jim Des Rivieres und Daniel G. Bobrow veröffentlichten das Buch The Art of the Metaobject Protocol. Eugenio Moggi und Philip Wadler führten die Verwendung von Monaden für Strukturierungsprogramme ein, die in funktionalen Programmiersprachen geschrieben wurden. Subdisziplinen und verwandten Bereichen Es gibt mehrere Studienfelder, die entweder innerhalb der Programmiersprachetheorie liegen oder einen tiefen Einfluss darauf haben; viele von ihnen haben erhebliche Überschneidungen. Darüber hinaus nutzt PLT viele andere Zweige der Mathematik, einschließlich Rechenschaftstheorie, Kategorie Theorie und Satz Theorie. Formale Semantik Formale Semantik ist die formale Spezifikation des Verhaltens von Computerprogrammen und Programmiersprachen. Drei gemeinsame Ansätze zur Beschreibung der Semantik oder Bedeutung eines Computerprogramms sind demotationale Semantik, operative Semantik und axiomatische Semantik. Typ Theorie Typ-Theorie ist die Studie von Typ-Systemen; die sind "eine traktable syntaktische Methode zum Nachweis des Fehlens bestimmter Programm-Verhalten durch Klassifizierung von Phrasen nach den Arten von Werten, die sie berechnen". Viele Programmiersprachen zeichnen sich durch die Merkmale ihrer Typensysteme aus. Programmanalyse und Transformation Programmanalyse ist das allgemeine Problem, ein Programm zu untersuchen und Schlüsselmerkmale zu bestimmen (z.B. das Fehlen von Programmfehlerklassen). Programmtransformation ist der Prozess, ein Programm in einer Form (Sprache) in eine andere Form zu verwandeln. Vergleichende Programmiersprache-Analyse Die vergleichende Programmiersprache-Analyse zielt darauf ab, Programmiersprachen in verschiedene Typen zu klassifizieren, die auf ihren Eigenschaften basieren; breite Kategorien von Programmiersprachen werden oft als Programmierparadigmen bezeichnet. Die generische und metaprogrammierende Metaprogrammierung ist die Erzeugung von Programmen höherer Ordnung, die bei der Ausführung Programme (möglicherweise in einer anderen Sprache oder in einer Untermenge der Originalsprache) erzeugen. Domänenspezifische Sprachen sind Sprachen, die zur effizienten Lösung von Problemen eines bestimmten Teils der Domäne ausgebildet sind. Compiler-Konstruktion Compiler-Theorie ist die Theorie des Schreibens Compilers (oder allgemeiner Übersetzer;) Programme, die ein in einer Sprache geschriebenes Programm in eine andere Form übersetzen. Die Aktionen eines Compilers werden traditionell in die Syntax-Analyse (Scanning und Parsing) semantische Analyse (Bestimmen, was ein Programm tun sollte,) Optimierung (Verbessern der Leistung eines Programms, wie durch einige Metrik angedeutet; typischerweise Ausführungsgeschwindigkeit) und Code-Generierung (Erzeugung und Ausgabe eines gleichwertigen Programms in einer Zielsprache; oft der Befehlssatz einer CPU). Laufzeitsysteme Laufzeitsysteme beziehen sich auf die Entwicklung von Programmiersprachen-Laufzeitumgebungen und deren Komponenten, einschließlich virtueller Maschinen, Müllsammlung und fremden Funktionsschnittstellen. Zeitschriften, Veröffentlichungen und Konferenzen Konferenzen sind der wichtigste Ort für die Präsentation der Forschung in Programmiersprachen. Zu den bekanntesten Konferenzen gehören das Symposium über Prinzipien der Programmiersprachen (POPL,) Programmierungssprache Design und Implementierung (PLDI), die Internationale Konferenz zur Funktionsprogrammierung (ICFP), die Internationale Konferenz zur objektorientierten Programmierung, Systeme, Sprachen und Anwendungen (OOPSLA) und die Internationale Konferenz zur architektonischen Unterstützung von Programmiersprachen und Betriebssystemen (ASPLOS).Bemerkenswerte Zeitschriften, die PLT-Forschung veröffentlichen, sind die ACM-Transaktionen zu Programmiersprachen und -systemen (TOPLAS,) Journal of Functional Programming (JFP,) Journal of Functional and Logic Programming und Higher-Order und Symbolic Computation. Siehe auch SIGPLAN Zeitleiste der Programmiersprachen Sehr hochrangige Programmiersprache ReferenzenWeiter lesen Abadi, Martín und Cardelli, Luca.A Theorie der Objekte. Springer-Verlag. Michael J. C. Gordon. Programmierung Sprachtheorie und seine Umsetzung. Prentice Hall. Gunter, Carl und Mitchell, John C. (Hrsg.). Theoretische Aspekte der objektorientierten Programmiersprachen: Typen, Semantik und Sprachdesign.MIT Drücken. Harper, Robert. Praktische Grundlagen für Programmiersprachen. Entwurf. Knuth, Donald E. (2003). Ausgewählte Papiere auf Computersprachen. Stanford, Kalifornien: Zentrum für Sprache und Information. Mitchell, John C. Stiftungen für Programmiersprachen. Mitchell, John C. Einführung in die Programming Language Theory. O'Hearn, Peter.W und Tennent, Robert. D. (1997). Algol-ähnliche Sprachen. Fortschritt in der theoretischen Informatik. Birkhauser, Boston. Pierce, Benjamin C. (2002). Typen und Programmiersprachen.MIT Drücken. Pierce, Benjamin C. Erweiterte Themen in Typen und Programmiersprachen. Pierce, Benjamin C. et al.(2010). Software Foundations. Externe Links Lambda the Ultimate, ein Community-Weblog für professionelle Diskussion und Repository von Dokumenten zur Programmiersprache Theorie. Große Werke in Programmiersprachen. Gesammelt von Benjamin C. Pierce (University of Pennsylvania). Klassische Papiere in Programmiersprachen und Logik. Gesammelt von Karl Crary (Carnegie Mellon University). Programming Language Research. Verzeichnis von Mark Leone. Programmieren Sprachtheorie Texte Online. An der Universität Utrecht.λ-Calculus: Dann & Jetzt von Dana S. Scott für die ACM Turing Centenary Celebration Grand Challenges in Programmiersprachen. Podiumsdiskussion auf der POPL 2009.