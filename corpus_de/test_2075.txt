Anwendungssicherheit (kurze AppSec) umfasst alle Aufgaben, die einen sicheren Software-Entwicklungs-Lebenszyklus für Entwicklungsteams einführen. Sein Ziel ist es, die Sicherheitspraktiken zu verbessern und dadurch Sicherheitsprobleme innerhalb von Anwendungen zu finden, zu beheben und bevorzugt zu verhindern. Es umfasst den gesamten Anwendungslebenszyklus von Anforderungen Analyse, Design, Implementierung, Überprüfung sowie Wartung. Verschiedene Ansätze finden unterschiedliche Teilmengen der Sicherheitslücken, die in einer Anwendung verlocken und zu unterschiedlichen Zeiten im Softwarelebenszyklus am effektivsten sind. Sie stellen jeweils verschiedene Tradeoffs von Zeit, Aufwand, Kosten und Schwachstellen fest. Design-Review. Bevor der Code geschrieben wird, kann die Architektur und das Design der Anwendung für Sicherheitsprobleme überprüft werden. Eine gemeinsame Technik in dieser Phase ist die Schaffung eines Bedrohungsmodells. Whitebox Sicherheitsüberprüfung oder Codeüberprüfung. Dies ist ein Sicherheitsingenieur zutiefst Verständnis der Anwendung durch manuelle Überprüfung der Quellcode und noticing Sicherheitsfehler. Durch das Verständnis der für die Anwendung einzigartigen Schwachstellen können gefunden werden. Blackbox Sicherheitsaudit. Dies ist nur durch die Verwendung einer Anwendung, die es auf Sicherheitslücken testet, kein Quellcode erforderlich. Automated Tooling. Viele Sicherheitstools können durch Einbindung in die Entwicklungs- oder Testumgebung automatisiert werden. Beispiele hierfür sind automatisierte DAST/SAST-Tools, die in Code-Editor oder CI/CD-Plattformen integriert sind. Koordinierte Sicherheitsplattformen. Dies sind Hacker-powered Application Security-Lösungen, die von vielen Websites und Software-Entwicklern angeboten werden, durch die Einzelpersonen Erkennung und Entschädigung für Berichterstattung Fehler erhalten können. Web-Anwendungssicherheit Web-Anwendungssicherheit ist ein Zweig der Informationssicherheit, die sich speziell mit der Sicherheit von Websites, Web-Anwendungen und Web-Services befasst. Auf hohem Niveau, Web-Anwendungssicherheit zieht auf die Prinzipien der Anwendungssicherheit, sondern wendet sie speziell auf Internet-und Web-Systeme. Web Application Security Tools sind spezialisierte Tools für die Arbeit mit HTTP-Verkehr, z.B. Web Application Firewalls. Sicherheitsbedrohungen Das Open Web Application Security Project (OWASP) bietet kostenlose und offene Ressourcen. Es wird von einer gemeinnützigen "The OWASP Foundation" geführt. Die OWASP Top 10 - 2017 ist das veröffentlichte Ergebnis der jüngsten Forschung auf Basis umfassender Daten aus über 40 Partnerorganisationen erstellt. Aus diesen Daten wurden über 50.000 Anwendungen rund 2,3 Millionen Schwachstellen entdeckt. Gemäß der OWASP Top 10 - 2017 umfassen die zehn kritischsten Sicherheitsrisiken der Web-Anwendung: Injection Broken Authentifizierung Sensitive Datenexposition XML externe Einheiten (XXE) Gebrochene ZugriffskontrolleSecurity misconfiguration Cross-Site-Skripting (XSS) Unsichere Deserialisierung Verwendung von Komponenten mit bekannten Sicherheitslücken Insufficient Logging and Monitoring Tooling for Security Testing Sicherheitstesting Techniken für Sicherheitslücken für Sicherheitslücken. Diese Schwachstellen lassen Anwendungen offen für die Ausbeutung. Idealerweise wird die Sicherheitsprüfung über den gesamten Software Development Life Cycle (SDLC) durchgeführt, so dass Schwachstellen rechtzeitig und gründlich adressiert werden können. Es gibt viele Arten von automatisierten Werkzeugen, um Schwachstellen in Anwendungen zu identifizieren. Zu den allgemeinen Werkzeugkategorien, die zur Identifizierung von Anwendungsunfähigkeiten verwendet werden, gehören: Static Application Security Testing (SAST) analysiert Quellcode für Sicherheitslücken während der Entwicklung einer Anwendung. Im Vergleich zu DAST kann SAST auch vor der Anwendung in einem ausführbaren Zustand genutzt werden. Da SAST Zugriff auf den gesamten Quellcode hat, ist es ein White-Box-Ansatz. Dies kann detailliertere Ergebnisse liefern, kann aber zu vielen Falsch-Positive führen, die manuell überprüft werden müssen. Dynamische Anwendung Security Testing (DAST, oft Vulnerability-Scanner genannt) erkennt automatisch Schwachstellen durch Crawling und Analyse von Websites. Diese Methode ist sehr skalierbar, einfach integriert und schnell. DAST-Werkzeuge eignen sich gut für den Umgang mit Low-Level-Angriffen wie Injektionsfehlern, sind aber nicht gut geeignet, hochrangige Fehler, z.B. Logik- oder Business-Logikfehler zu erkennen. Fuzzing, Werkzeuge werden häufig für Eingabetests verwendet. Interaktive Anwendung Security Testing (IAST) bewertet Anwendungen von innerhalb der Software-Instrumentierung. Dies kombiniert die Stärken der SAST- und DAST-Methoden sowie den Zugriff auf Code, HTTP-Verkehr, Bibliotheksinformationen, Backend-Verbindungen und Konfigurationsinformationen.Einige IAST-Produkte erfordern die Anwendung angegriffen werden, während andere während der normalen Qualitätssicherungsprüfung verwendet werden können. Runtime-Anwendung Selbstschutz bestehende Anwendungen, um Intrusionserkennung und Prävention von innerhalb einer Anwendungslaufzeit zu bieten. Abhängigkeitsscanner (auch Software Composition Analysis genannt) versuchen, die Nutzung von Softwarekomponenten mit bekannten Schwachstellen zu erkennen. Diese Werkzeuge können entweder auf Abruf arbeiten, z.B. während des Quellcode-Bauprozesses oder periodisch. Sicherheitsstandards und -vorschriften CERTSecureCoding ISO/IEC 27034-1:2011 Informationstechnologie — Sicherheitstechniken — Anwendungssicherheit - Teil 1: Überblick und Konzepte ISO/IEC TR 24772:2013 Informationstechnologie — Programmiersprachen — Anleitung zur Vermeidung von Schwachstellen in Programmiersprachen durch Sprachauswahl und NIST Sonderveröffentlichung 800-53 OWASP ASVS: Web Application Security Verification Standard Siehe auch Application Service Architecture (ASA) CWE Datensicherheit Mobile Sicherheit OWASP Security Development Lifecycle Trustworthy Computing Security Development Lifecycle == Referenzen ==