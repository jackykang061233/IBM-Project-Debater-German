Roboter-Software ist das Set von codierten Befehlen oder Anweisungen, die ein mechanisches Gerät und elektronisches System, gemeinsam als Roboter bekannt, welche Aufgaben zu erfüllen. Roboter-Software wird verwendet, um autonome Aufgaben auszuführen. Viele Softwaresysteme und Frameworks wurden vorgeschlagen, um Programmierroboter einfacher zu machen. Einige Robotersoftware zielt darauf ab, intelligente mechanische Geräte zu entwickeln. Zu den gemeinsamen Aufgaben gehören Rückkopplungsschleifen, Steuerung, Wegfindung, Datenfilterung, Ortung und Weitergabe von Daten. Einführung Während es eine bestimmte Art von Software ist, ist es immer noch sehr vielfältig. Jeder Hersteller verfügt über eine eigene Robotersoftware. Während die überwiegende Mehrheit der Software die Manipulation von Daten und das Ergebnis auf dem Bildschirm zu sehen, Roboter-Software ist für die Manipulation von Objekten oder Werkzeugen in der realen Welt. Industrieroboter Software für Industrieroboter besteht aus Datenobjekten und Befehlslisten, bekannt als Programmfluss (Anweisungsliste). Zum Beispiel, Go to Jig1 Es ist eine Anweisung an den Roboter zu Positionsdaten namens Jig1 zu gehen. Selbstverständlich können Programme auch implizite Daten enthalten, beispielsweise Sagen Sie Achse1 bewegen 30 Grad. Daten und Programm liegen üblicherweise in separaten Abschnitten des Robotersteuerungsspeichers. Man kann die Daten ändern, ohne das Programm zu ändern und umgekehrt. Beispielsweise kann man ein anderes Programm mit demselben Jig1 schreiben oder die Position von Jig1 anpassen, ohne die Programme zu ändern, die es verwenden. Beispiele für Programmiersprachen für Industrieroboter Aufgrund der hohen Eigenart der Robotersoftware bieten die meisten Hersteller von Roboterhardware auch eine eigene Software. Während dies bei anderen automatisierten Steuerungssystemen nicht ungewöhnlich ist, stellt der Mangel an Standardisierung von Programmiermethoden für Roboter gewisse Herausforderungen. So gibt es beispielsweise über 30 verschiedene Hersteller von Industrierobotern, so dass auch 30 verschiedene Roboterprogrammierungssprachen erforderlich sind. Es gibt genügend Ähnlichkeiten zwischen den verschiedenen Robotern, dass es möglich ist, ein umfassendes Verständnis der Roboterprogrammierung zu gewinnen, ohne die eigene Sprache jedes Herstellers lernen zu müssen. Eine Methode zur Steuerung von Robotern mehrerer Hersteller ist die Verwendung einer Postprozessor- und Offline-Programmiersoftware (robotics). Mit dieser Methode ist es möglich, markenspezifische Roboter-Programmiersprache aus einer universellen Programmiersprache, wie Python (Programmiersprache) zu handhaben. Dennoch erlaubt das Kompilieren und Hochladen von festem Off-Line-Code an einen Roboter-Controller nicht, dass das Robotersystem bewusst ist, so dass es seine Bewegung nicht anpassen und sich bei Änderungen der Umgebung erholen kann. Eine einheitliche Echtzeit-Adaptionssteuerung für jeden Roboter ist derzeit mit einigen verschiedenen Drittanbieter-Tools möglich. Einige Beispiele für publizierte Roboter-Programmiersprachen sind unten aufgeführt. Aufgabe in klarem Englisch: Gehen Sie zu P1 (eine allgemeine sichere Position) Bewegen Sie sich zu P2 (ein Ansatz zu P3) Bewegen Sie sich zu P3 (eine Position, um das Objekt auszuwählen) Schließen Sie den Greifer nach P4 (eine Annäherung an P5) Bewegen Sie sich nach P5 (eine Position, um das Objekt zu platzieren) Offener Greifer Move zu P1 und Finish VAL war einer der ersten Roboter “Sprachen” und wurde in Unimate Robotern verwendet. Varianten von VAL wurden von anderen Herstellern einschließlich Adept Technology verwendet. Stäubli verwendet derzeit VAL3. Beispielprogramm: PROGRAMM KICKPLACE 1.MOVE P1 2.MOVE P2 3.MOVE P3 4.CLOSEI 0.00 5.MOVE P4 6.MOVE P5 7. OPENI 0.00 8.MOVE P1 .END Beispiel von Stäubli VAL3 Programm: start movej(p1,tGripper,mNomSpeed) movej(appro(p3,trAppro),tGripper,mNomSpeed movel(p3,tGripper,mNomSpeed) close(tGripper) movej(appro(p5,trAppro), tGripper) Wenn wir mit Appro-Befehl verwenden, müssen wir P2 Land P4 Punkt nicht lehren, aber wir transformieren dynamisch einen Ansatz zur Position von Pick und Platz für Trajektorien-Generation. Epson RC+ (Beispiel für eine Vakuumaufnahme) Funktion PickPlace Jump P1 Jump P2 Jump P3 Auf Vakuum warten .1 Jump P4 Jump P5 Off Vakuum warten.1 Jump P1 Fend ROBOFORTH (eine Sprache basierend auf FORTH.) (Mit Roboforth können Sie Ansatzpositionen für Orte festlegen, so dass Sie keine P2 und P4 benötigen.) Der Roboter sollte den nächsten Schritt nicht fortsetzen, bis der Greifer vollständig geschlossen ist. Die Bestätigung oder erlaubte Zeit ist in den obigen Beispielen von CLOSEI und GRIP impliziert, während der On-Vakuum-Befehl eine Zeitverzögerung erfordert, um eine zufriedenstellende Absaugung zu gewährleisten. Andere Roboter Programmiersprachen Visual Programmiersprache Die Programmiersprache LEGO Mindstorms EV3 ist eine einfache Sprache, mit der die Nutzer interagieren können.Es ist eine grafische Benutzeroberfläche (GUI) mit LabVIEW geschrieben. Der Ansatz ist, mit dem Programm statt mit den Daten zu beginnen. Das Programm wird durch Ziehen von Icons in den Programmbereich und Hinzufügen oder Einfügen in die Sequenz erstellt. Für jedes Icon geben Sie dann die Parameter (Daten) an. Zum Beispiel geben Sie für das Motorantriebssymbol an, welche Motoren und wie viel sie sich bewegen. Wenn das Programm geschrieben wird, wird es zum Test in den Lego NXT Ziegel (Mikrocontroller) heruntergeladen. Schriftsprachen Eine Skriptsprache ist eine hochrangige Programmiersprache, die verwendet wird, um die Software-Anwendung zu steuern, und wird in Echtzeit interpretiert, oder "übersetzt auf der Fliege", anstatt im Voraus zusammengestellt. Eine Skriptsprache kann eine allgemeine Programmiersprache sein oder sie kann auf bestimmte Funktionen beschränkt sein, die zur Verstärkung des Ablaufs eines Anwendungs- oder Systemprogramms verwendet werden. Einige Skriptsprachen, wie RoboLogix, haben Datenobjekte, die in Registern liegen, und der Programmablauf stellt die Liste der Anweisungen oder Anweisungen, die zum Programm des Roboters verwendet wird. Programmiersprachen sind in der Regel für den Aufbau von Datenstrukturen und Algorithmen von Grund auf konzipiert, während Skriptsprachen mehr für die Verbindung, oder "Verleimung", Komponenten und Anweisungen zusammen bestimmt sind. Folglich ist der Scripting-Sprachanweisungssatz in der Regel eine Streamline-Liste von Programmbefehlen, die verwendet werden, um den Programmierprozess zu vereinfachen und eine schnelle Anwendungsentwicklung bereitzustellen. Parallele Sprachen Ein weiterer interessanter Ansatz ist erwähnenswert. Alle Roboteranwendungen benötigen Parallelität und ereignisbasierte Programmierung. Parallelismus ist, wo der Roboter zwei oder mehr Dinge gleichzeitig macht. Dies erfordert entsprechende Hardware und Software. Die meisten Programmiersprachen verlassen sich auf Threads oder komplexe Abstraktionsklassen, um den Parallelismus und die damit verbundene Komplexität zu bewältigen, wie der gleichzeitige Zugang zu gemeinsamen Ressourcen. URBI bietet eine höhere Abstraktion durch die Integration von Parallelismus und Ereignissen im Kern der Sprachsemantik. Der obige Code bewegt die Kopf-Pan- und Kopf-Tilt-Motoren parallel, um den Roboterkopf auf dem von seiner Kamera aufgenommenen Video sichtbar zu machen, wenn ein Gesicht vom Roboter gesehen wird. Roboter-Anwendungssoftware Unabhängig davon, welche Sprache verwendet wird, ist das Endergebnis der Robotersoftware, robotische Anwendungen zu erstellen, die Menschen helfen oder unterhalten. Anwendungen umfassen Befehls- und Steuerungssoftware. Befehls- und Steuerungssoftware umfasst Robotersteuerung GUIs für telebetriebene Roboter, Punkt-n-Click-Befehlssoftware für autonome Roboter und Schieduling-Software für mobile Roboter in Fabriken. Die Tasking-Software umfasst einfache Drag-n-Drop-Schnittstellen zur Einrichtung von Lieferrouten, Sicherheitspatrouillen und Besuchertouren; es umfasst auch benutzerdefinierte Programme geschrieben, um bestimmte Anwendungen zu implementieren. Allgemeine Anwendungssoftware für Roboter wird auf weit verbreiteten Roboterplattformen eingesetzt. Sicherheitsüberprüfungen Programmierfehler stellen insbesondere bei großen Industrierobotern eine ernsthafte Sicherheitsüberlegung dar. Die Leistung und Größe von Industrierobotern bedeutet, dass sie schwere Verletzungen verursachen können, wenn sie falsch programmiert oder unsicher verwendet werden. Aufgrund der Masse und der hohen Geschwindigkeiten von Industrierobotern ist es immer unsicher, dass ein Mensch während des automatischen Betriebes im Arbeitsbereich des Roboters bleibt. Das System kann zu unerwarteten Zeiten Bewegung beginnen und ein Mensch wird in vielen Situationen nicht schnell genug reagieren können, auch wenn es darauf vorbereitet ist. So muss auch wenn die Software frei von Programmierfehlern ist, eine große Sorgfalt genommen werden, um einen Industrieroboter für menschliche Arbeiter oder menschliche Interaktionen, wie das Beladen oder Entladen von Teilen, das Löschen eines Teilstaus oder die Durchführung von Wartung sicher zu machen. ANSI/RIA R15.06-1999 American National Standard for Industrial Robots and Robot Systems - Sicherheitsanforderungen (Revision von ANSI/ R15.06-1992) Buch der Robotic Industries Association ist der anerkannte Standard für die Robotersicherheit. Dazu gehören Richtlinien für die Konstruktion von Industrierobotern sowie die Implementierung oder Integration und Verwendung von Industrierobotern auf dem Werksboden. Zahlreiche Sicherheitskonzepte wie Sicherheitssteuerungen, maximale Geschwindigkeit während eines Teach-Modus und Einsatz von physikalischen Barrieren sind abgedeckt. Siehe auch Behavior-basierte Robotik und Subsumption-Architektur Entwicklungsrobotik Epigenetische Robotik Evolutionäre Robotik Industrieroboter Kognitive Robotik Robotersteuerung RoboLogix Automatisierte Planung und Planung Cybernetics Künstliche Intelligenz Robotik-Suite Telerobotik / Telepräsence Robotic Automation Software Swarm Robotics Plattformen Referenzen Externe Links Eine Übersicht über Robotik-Software-Plattformen im Archiv. heute (archiviert 2013-01-27) Linux Geräte.ANSI/RIA R15.06-1999 American National Standard for Industrial Robots and Robot Systems - Sicherheitsanforderungen (Revision von ANSI/RIA R15.06-1992)