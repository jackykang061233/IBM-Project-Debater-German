Bei der Berechnung, dem Dateisystem oder dem Dateisystem (oft auf fs abgekürzt) handelt es sich um eine Methode und Datenstruktur, die das Betriebssystem steuert, wie Daten gespeichert und abgerufen werden. Ohne ein Dateisystem wären Daten, die in einem Speichermedium platziert werden, ein großer Datenkörper ohne Möglichkeit, zu sagen, wo ein Stück Daten stoppt und der nächste beginnt. Durch Trennung der Daten in Stücke und Angabe eines Namens werden die Daten leicht isoliert und identifiziert. Unter dem Namen des papierbasierten Datenmanagementsystems wird jede Gruppe von Daten als Datei bezeichnet. " Die Struktur- und Logikregeln zur Verwaltung der Datengruppen und deren Namen werden als "Dateisystem" bezeichnet. Es gibt viele verschiedene Arten von Dateisystemen. Jeder hat verschiedene Struktur und Logik, Eigenschaften von Geschwindigkeit, Flexibilität, Sicherheit, Größe und mehr. Einige Dateisysteme wurden für spezifische Anwendungen entwickelt. Beispielsweise ist das ISO 9660-Dateisystem speziell für optische Scheiben ausgelegt. Dateisysteme können auf zahlreichen verschiedenen Arten von Speichergeräten verwendet werden, die verschiedene Arten von Medien verwenden. Ab 2019 sind Festplattenlaufwerke Schlüsselspeicher und werden so für die absehbare Zukunft projiziert. Andere Medien, die verwendet werden, sind SSDs, Magnetbänder und optische Scheiben. In einigen Fällen, wie bei tmpfs, wird der Hauptspeicher des Computers (random-access-Speicher, RAM) verwendet, um ein temporäres Dateisystem für den kurzfristigen Gebrauch zu erstellen. Einige Dateisysteme werden auf lokalen Datenspeichergeräten verwendet; andere bieten einen Dateizugriff über ein Netzwerkprotokoll (z.B. NFS, SMB oder 9P-Clients). Einige Dateisysteme sind virtuell, d.h. die gelieferten Dateien (genannte virtuelle Dateien) werden auf Anfrage (wie z.B. procfs und sysfs) berechnet oder sind lediglich ein Mapping in ein anderes Dateisystem, das als Backing Store verwendet wird. Das Dateisystem verwaltet Zugriff auf den Inhalt von Dateien und die Metadaten über diese Dateien. Es ist verantwortlich für die Anordnung von Speicherplatz; Zuverlässigkeit, Effizienz und Abstimmung in Bezug auf das physikalische Speichermedium sind wichtige Design-Betrachtungen. Ursprung des Begriffs Vor dem Erscheinen von Computern wurde der Begriff Dateisystem verwendet, um eine Methode zum Speichern und Abrufen von Papierdokumenten zu beschreiben. Bis 1961 wurde der Begriff auf die computergestützte Einreichung neben der ursprünglichen Bedeutung angewendet. Bis 1964 war es im allgemeinen verwendet. Architektur Ein Dateisystem besteht aus zwei oder drei Schichten. Manchmal werden die Schichten explizit getrennt und manchmal werden die Funktionen kombiniert. Das logische Dateisystem ist für die Interaktion mit der Benutzeranwendung verantwortlich. Es bietet die Anwendungsprogramm-Schnittstelle (API) für Dateioperationen — OPEN, CLOSE, READ, etc., und übergibt die angeforderte Operation an die darunterliegende Schicht für die Verarbeitung. Das logische Dateisystem "manage[s] öffnet Dateitabelleneinträge und per-Prozess-Dateideskriptoren". Diese Schicht bietet "Dateizugriff, Verzeichnisoperationen, [und] Sicherheit und Schutz". Die zweite optionale Schicht ist das virtuelle Dateisystem. " Diese Schnittstelle ermöglicht die Unterstützung mehrerer gleichzeitiger Instanzen von physikalischen Dateisystemen, von denen jeder als Dateisystem-Implementierung bezeichnet wird". Die dritte Schicht ist das physikalische Dateisystem. Diese Schicht betrifft den physikalischen Betrieb der Speichereinrichtung (z.B. Scheibe). Es verarbeitet physische Blöcke gelesen oder geschrieben. Es behandelt Puffer- und Speichermanagement und ist für die physische Platzierung von Blöcken an bestimmten Stellen auf dem Speichermedium verantwortlich. Das physikalische Dateisystem wirkt mit den Gerätetreibern oder mit dem Kanal zusammen, um das Speichergerät anzutreiben. Aspekte der Dateisysteme Raummanagement Hinweis: Dies gilt nur für Dateisysteme, die in Speichergeräten verwendet werden. Dateisysteme ordnen Platz körnig an, meist mehrere physikalische Einheiten auf dem Gerät. Das Dateisystem ist verantwortlich für die Organisation von Dateien und Verzeichnissen, und die Verfolgung der Bereiche der Medien gehören zu welcher Datei und die nicht verwendet werden. Zum Beispiel, in Apple DOS der frühen 1980er Jahre, 256-byte Sektoren auf 140 Kilobyte Diskette verwendet eine Spur / Sektorkarte. Dies führt zu einem ungenutzten Raum, wenn eine Datei kein exaktes Vielfaches der Zuordnungseinheit ist, manchmal als slack space bezeichnet. Für eine 512-byte-Zuweisung beträgt der durchschnittliche ungenutzte Raum 256 Bytes. Für 64 KB-Cluster beträgt der durchschnittliche ungenutzte Platz 32 KB. Die Größe der Zuordnungseinheit wird beim Erstellen des Dateisystems gewählt. Die Auswahl der Zuordnungsgröße basierend auf der durchschnittlichen Größe der erwarteten Dateien im Dateisystem kann die Menge des unbrauchbaren Raums minimieren. Häufig kann die Standardzuweisung eine angemessene Nutzung bieten. Die Wahl einer Zuordnungsgröße, die zu klein ist, führt zu übermäßigem Overhead, wenn das Dateisystem meist sehr große Dateien enthalten wird. Dateisystem Fragmentierung tritt auf, wenn ungenutzter Raum oder einzelne Dateien nicht zusammenhängend sind. Da ein Dateisystem verwendet wird, werden Dateien erstellt, geändert und gelöscht. Wenn eine Datei erstellt wird, zugewiesen das Dateisystem Platz für die Daten. Einige Dateisysteme erlauben oder erfordern die Angabe einer anfänglichen Raumzuordnung und anschließenden Inkrementalzuweisungen, wenn die Datei wächst. Da Dateien gelöscht werden, wird der Raum, den sie zugewiesen wurden, schließlich als verfügbar für die Verwendung durch andere Dateien betrachtet. Dadurch entstehen abwechselnd gebrauchte und ungenutzte Bereiche verschiedener Größen. Das ist freie Raumfragmentierung. Wenn eine Datei erstellt wird und für ihre anfängliche Zuordnung kein Bereich zusammenhängender Raum zur Verfügung steht, muss der Raum in Fragmenten zugewiesen werden. Wenn eine Datei so geändert wird, dass sie größer wird, kann sie den ihm zunächst zugewiesenen Raum überschreiten, eine andere Zuordnung muss andernorts zugewiesen werden und die Datei wird fragmentiert. In einigen Betriebssystemen kann ein Systemadministrator Festplattenquoten verwenden, um die Zuordnung von Festplattenplatz zu begrenzen. Dateinamen Ein Dateiname (oder Dateiname) wird verwendet, um einen Speicherort im Dateisystem zu identifizieren. Die meisten Dateisysteme haben Einschränkungen auf der Länge der Dateinamen. In einigen Dateisystemen sind Dateinamen nicht Case sensitive (d.h. die Namen MYFILE und myfile beziehen sich auf die gleiche Datei in einem Verzeichnis); in anderen Dateinamen sind Case sensitive (d.h. die Namen MYFILE, MyFile und myfile beziehen sich auf drei separate Dateien, die im selben Verzeichnis sind). Die meisten modernen Dateisysteme erlauben Dateinamen, eine breite Palette von Zeichen aus dem Unicode-Zeichen-Set enthalten. Sie können jedoch Einschränkungen für die Verwendung bestimmter Sonderzeichen haben, sie innerhalb von Dateinamen deaktivieren; diese Zeichen könnten verwendet werden, um ein Gerät, Gerätetyp, Verzeichnis-Präfix, Dateipfad-Separator oder Dateityp anzuzeigen. Verzeichnisse Dateisysteme haben typischerweise Verzeichnisse (auch Ordner genannt), die dem Benutzer erlauben, Dateien in separate Sammlungen zu gruppieren. Dies kann durch Zuordnung des Dateinamens mit einem Index in einer Inhaltstabelle oder einer Inode in einem Unix-ähnlichen Dateisystem realisiert werden. Verzeichnisstrukturen können flach (d.h. linear) sein oder Hierarchien zulassen, in denen Verzeichnisse Unterverzeichnisse enthalten können. Das erste Dateisystem zur Unterstützung willkürlicher Hierarchien von Verzeichnissen wurde im Multics Betriebssystem verwendet. Die nativen Dateisysteme von Unix-ähnlichen Systemen unterstützen auch willkürliche Verzeichnishierarchien, wie z.B. Apples Hierarchical File System und dessen Nachfolger HFS+ im klassischen Mac OS, das FAT-Dateisystem in MS-DOS 2.0 und späteren Versionen von MS-DOS und in Microsoft Windows, das NTFS-Dateisystem in der Windows NT-Familie von Betriebssystemen und das ODS-2 (On-Disk Structure Files-2) und höhere Levels im Betriebssystem). Metadaten Andere Buchführungsinformationen sind in der Regel mit jeder Datei innerhalb eines Dateisystems verbunden. Die Länge der in einer Datei enthaltenen Daten kann als Anzahl der für die Datei zugewiesenen Blöcke oder als Bytezählung gespeichert werden. Die Zeit, die die Datei zuletzt geändert wurde, kann als Zeitstempel der Datei gespeichert werden. Dateisysteme können die Datei-Erstellungszeit speichern, die Zeit, zu der sie zuletzt aufgerufen wurde, die Metadaten der Datei geändert wurden, oder die Zeit, in der die Datei zuletzt gesichert wurde. Andere Informationen können den Gerätetyp der Datei (z.B. Block, Zeichen, Steckdose, Unterverzeichnis, etc.) seine Besitzer-Benutzer-ID und Gruppen-ID, seine Zugriffsberechtigungen und andere Datei-Attribute (z.B. ob die Datei nur gelesen, ausführbar, etc.) umfassen. Ein Dateisystem speichert alle mit der Datei verbundenen Metadaten – einschließlich des Dateinamens, der Länge des Inhalts einer Datei und des Standorts der Datei in der Ordnerhierarchie – vom Inhalt der Datei. Die meisten Dateisysteme speichern die Namen aller Dateien in einem Verzeichnis an einer Stelle – die Verzeichnistabelle für dieses Verzeichnis –, die oft wie jede andere Datei gespeichert wird. Viele Dateisysteme setzen nur einige der Metadaten für eine Datei in der Verzeichnistabelle, und der Rest der Metadaten für diese Datei in einer völlig separaten Struktur, wie die Inode. Die meisten Dateisysteme speichern auch Metadaten, die keiner bestimmten Datei zugeordnet sind. Solche Metadaten umfassen Informationen über ungenutzte Regionen – freie Raumbitmap, Blockverfügbarkeitskarte – und Informationen über schlechte Sektoren. Oft werden solche Informationen über eine Zuordnungsgruppe innerhalb der Zuordnungsgruppe selbst gespeichert. Weitere Attribute können auf Dateisystemen wie NTFS, XFS, ext2, ext3, einigen Versionen von UFS und HFS+ mit erweiterten Dateiattributen zugeordnet werden. Einige Dateisysteme bieten für benutzerdefinierte Attribute wie den Autor des Dokuments, die Zeichencodierung eines Dokuments oder die Größe eines Bildes. Einige Dateisysteme ermöglichen es, dass verschiedene Datensammlungen mit einem Dateinamen verknüpft werden. Diese separaten Sammlungen können als Ströme oder Gabeln bezeichnet werden. Apple hat seit langem ein forked Dateisystem auf dem Macintosh verwendet, und Microsoft unterstützt Streams in NTFS. Einige Dateisysteme halten mehrere frühere Revisionen einer Datei unter einem einzigen Dateinamen aufrecht; der Dateiname von selbst holt die jüngste Version ab, während zuvor gespeicherte Version mit einer speziellen Namenskonvention wie Dateiname;4 oder Dateiname(-4) aufgerufen werden kann, um auf die Version zuzugreifen. Siehe Vergleich von Dateisystemen#Metadata für Details, auf denen Dateisysteme welche Arten von Metadaten unterstützen. Dateisystem als abstrakte Benutzeroberfläche In einigen Fällen kann ein Dateisystem nicht von einem Speichergerät Gebrauch machen, sondern verwendet werden, um den Zugriff auf beliebige Daten zu organisieren und darzustellen, ob es gespeichert oder dynamisch generiert wird (z.B. procfs.) Utilities File Systeme umfassen Dienstprogramme, um Parameter zu initialisieren, zu ändern und eine Instanz des Dateisystems zu entfernen. Einige umfassen die Fähigkeit, den dem Dateisystem zugewiesenen Raum zu erweitern oder zu klopfen. Verzeichnisprogramme können verwendet werden, um Verzeichniseinträge zu erstellen, umzubenennen und zu löschen, die auch als Dentries (singular: dentry) bekannt sind und Metadaten, die mit einem Verzeichnis verknüpft sind, zu ändern. Verzeichnisprogramme können auch Funktionen umfassen, um zusätzliche Links zu einem Verzeichnis (hard links in Unix) zu erstellen, um Eltern-Links (".." in Unix-ähnlichen Betriebssystemen) umzubenennen und bidirektionale Links zu Dateien zu erstellen. Dateiprogramme erstellen, Liste, kopieren, verschieben und löschen von Dateien und ändern Metadaten. Sie können in der Lage sein, Daten zu klopfen, zu klopfen oder die Raumzuordnung zu erweitern, Dateien anhängen, verschieben und ändern. Abhängig von der zugrunde liegenden Struktur des Dateisystems können sie einen Mechanismus zur Vor- oder Abkürzung von Beginn einer Datei bereitstellen, Einträge in die Mitte einer Datei einfügen oder Einträge aus einer Datei löschen. Nutzungen zum freien Speicherplatz für gelöschte Dateien, wenn das Dateisystem eine uneigente Funktion bietet, gehören auch zu dieser Kategorie. Einige Dateisysteme deferieren Operationen wie Reorganisation von Freiraum, sicheres Löschen von Freiraum und Wiederaufbau von hierarchischen Strukturen durch Bereitstellung von Diensten, um diese Funktionen zu Zeiten von minimaler Aktivität auszuführen. Ein Beispiel ist das Dateisystem defragmentation utilities. Einige der wichtigsten Merkmale von Dateisystem-Diensten sind Aufsichtstätigkeiten, die Eigentumsübergänge oder direkten Zugriff auf das zugrunde liegende Gerät beinhalten können. Dazu gehören leistungsstarke Backup und Recovery, Datenreplikation und Reorganisation verschiedener Datenstrukturen und Zuordnungstabellen im Dateisystem. Einschränkung und Zugang Es gibt mehrere Mechanismen, die von Dateisystemen verwendet werden, um den Zugriff auf Daten zu kontrollieren. In der Regel soll das Lesen oder Ändern von Dateien durch einen Benutzer oder eine Gruppe von Benutzern verhindert werden. Ein weiterer Grund ist, sicherzustellen, dass Daten kontrolliert verändert werden, so dass der Zugriff auf ein bestimmtes Programm beschränkt werden kann. Beispiele sind Passwörter, die in den Metadaten der Datei oder anderswo gespeichert sind und Dateiberechtigungen in Form von Berechtigungsbits, Zugriffskontrolllisten oder Fähigkeiten. Die Notwendigkeit, dass Dateisystem-Dienstprogramme auf die Daten auf der Medienebene zugreifen können, um die Strukturen neu zu organisieren und bieten effiziente Sicherung in der Regel bedeutet, dass diese nur für höfliche Benutzer wirksam sind, aber nicht gegen Eindringlinge wirksam sind. Methoden zur Verschlüsselung von Dateidaten werden manchmal im Dateisystem enthalten. Dies ist sehr effektiv, da es keine Notwendigkeit für Dateisystem-Dienstprogramme, um die Verschlüsselung Samen zu kennen, um effektiv die Daten zu verwalten. Die Risiken, die auf Verschlüsselung angewiesen sind, umfassen die Tatsache, dass ein Angreifer die Daten kopieren und brutale Kraft verwenden kann, um die Daten zu entschlüsseln. Darüber hinaus bedeutet der Verlust des Saatguts, die Daten zu verlieren. Aufrechterhaltung der Integrität Eine wesentliche Verantwortung eines Dateisystems besteht darin, sicherzustellen, dass die Dateisystemstrukturen im sekundären Speicher einheitlich bleiben, unabhängig von den Aktionen durch Programme, die auf das Dateisystem zugreifen. Dies beinhaltet Aktionen, die ergriffen werden, wenn ein Programm, das das Dateisystem modifiziert, abnormal endet oder vernachlässigt, um das Dateisystem zu informieren, dass es seine Aktivitäten abgeschlossen hat. Dies kann die Aktualisierung der Metadaten, die Verzeichniseingabe und die Bearbeitung von Daten beinhalten, die auf den physischen Speichermedien gepuffert, aber noch nicht aktualisiert wurden. Andere Fehler, mit denen das Dateisystem zu tun hat, sind Medienausfälle oder Verlust der Verbindung mit Remote-Systemen. Bei Ausfall eines Betriebssystems oder einem Soft-Power-Versagen müssen spezielle Routinen im Dateisystem ähnlich aufgerufen werden, wenn ein einzelnes Programm ausfällt. Das Dateisystem muss auch beschädigte Strukturen korrigieren können. Diese können durch einen Betriebssystemausfall auftreten, für den das Betriebssystem nicht in der Lage war, das Dateisystem, einen Stromausfall oder einen Reset zu benachrichtigen. Das Dateisystem muss auch Ereignisse aufnehmen, um die Analyse systemischer Probleme sowie Probleme mit bestimmten Dateien oder Verzeichnissen zu ermöglichen. Benutzerdaten Der wichtigste Zweck eines Dateisystems ist die Verwaltung von Benutzerdaten. Dazu gehören die Speicherung, das Abrufen und die Aktualisierung von Daten. Einige Dateisysteme akzeptieren Daten zur Speicherung als Bytes-Stream, die auf eine für die Medien effiziente Weise gesammelt und gespeichert werden. Wenn ein Programm die Daten abruft, gibt es die Größe eines Speicherpuffers an und das Dateisystem überträgt Daten von den Medien auf den Puffer. Eine Laufzeitbibliotheksroutine kann es dem Benutzerprogramm manchmal erlauben, einen Datensatz basierend auf einem Bibliotheksaufruf zu definieren, der eine Länge angibt. Wenn das Benutzerprogramm die Daten liest, ruft die Bibliothek Daten über das Dateisystem ab und gibt einen Datensatz zurück. Einige Dateisysteme ermöglichen die Spezifikation einer festen Datensatzlänge, die für alle Texte und Lesungen verwendet wird. Dies erleichtert die Ortung des neunten Datensatzes sowie die Aktualisierung von Datensätzen. Eine Identifikation für jeden Datensatz, auch als Schlüssel bekannt, macht ein anspruchsvolleres Dateisystem. Das Benutzerprogramm kann Aufzeichnungen ohne Bezug auf ihren Standort lesen, schreiben und aktualisieren. Dies erfordert eine aufwendige Verwaltung von Blöcken von Medien, die in der Regel Schlüsselblöcke und Datenblöcke trennen. Sehr effiziente Algorithmen können mit Pyramidenstrukturen für die Ortung von Datensätzen entwickelt werden. Verwendung eines Dateisystems Nutzungen, sprachspezifische Laufzeitbibliotheken und Benutzerprogramme verwenden Dateisystem-APIs, um Anfragen des Dateisystems zu stellen. Dazu gehören Datenübermittlung, Positionierung, Aktualisierung von Metadaten, Geschäftsführer, Verwaltung von Zugriffsspezifikationen und Entfernung. Mehrere Dateisysteme innerhalb eines einzigen Systems Häufig sind Retail-Systeme mit einem einzigen Dateisystem konfiguriert, das das gesamte Speichergerät einnimmt. Ein weiterer Ansatz ist die Partition der Festplatte, so dass mehrere Dateisysteme mit verschiedenen Attributen verwendet werden können. Ein Dateisystem zur Verwendung als Browser-Cache oder E-Mail-Speicher kann mit einer kleinen Zuordnungsgröße konfiguriert werden. Dies hält die Aktivität des Erstellens und Löschens von für die Browser-Aktivität typischen Dateien in einem engen Bereich der Festplatte, wo es nicht stören andere Dateizuordnungen. Eine andere Partition kann für die Speicherung von Audio- oder Videodateien mit einer relativ großen Blockgröße erstellt werden. Ein anderer kann jedoch normalerweise nur schreibgeschützt eingestellt und nur periodisch schreibbar eingestellt werden. Ein dritter Ansatz, der meist in Cloud-Systemen verwendet wird, ist, "disk images" zu verwenden, um zusätzliche Dateisysteme, mit den gleichen Attributen oder nicht, innerhalb eines anderen (Host-)Dateisystems als Datei. Ein gemeinsames Beispiel ist die Virtualisierung: Ein Benutzer kann eine experimentelle Linux-Distribution (unter Verwendung des ext4-Dateisystems) in einer virtuellen Maschine unter seiner Windows-Umgebung (unter Verwendung von NTFS) ausführen. Das ext4-Dateisystem befindet sich in einem Festplattenbild, das als Datei (oder mehrere Dateien, je nach Hypervisor und Einstellungen) im NTFS-Host-Dateisystem behandelt wird. Mehrere Dateisysteme auf einem einzigen System haben den zusätzlichen Vorteil, dass im Falle einer Korruption einer einzelnen Partition die restlichen Dateisysteme häufig noch intakt sein werden. Dies beinhaltet die Viruszerstörung der Systempartition oder sogar ein System, das nicht bootet. Dateisystem-Dienstprogramme, die einen dedizierten Zugriff benötigen, können effektiv fertiggestellt werden. Darüber hinaus kann die Defragmentierung wirksamer sein. Mehrere System-Wartungsprogramme, wie Virenscans und Backups, können auch in Segmenten verarbeitet werden. Zum Beispiel ist es nicht notwendig, das Dateisystem mit Videos zusammen mit allen anderen Dateien zu sichern, wenn seit dem letzten Backup keine hinzugefügt wurden. Was die Bilddateien betrifft, so kann man leicht "abhängen" Differenzbilder, die nur neue Daten enthalten, die in das Master (Original)-Bild geschrieben wurden. Unterschiedliche Bilder können für beide Sicherheitsbedenken verwendet werden (als Einwegsystem - kann schnell wiederhergestellt werden, wenn durch ein Virus zerstört oder verunreinigt werden, da das alte Bild entfernt werden kann und ein neues Bild in Sekundenschnelle erstellt werden kann, auch ohne automatisierte Verfahren) und schnelle virtuelle maschinelle Bereitstellung (da die differentiellen Bilder mit einem Skript in Chargen schnell ausgestrahlt werden können). Gestaltungsbeschränkungen Alle Dateisysteme haben eine gewisse Funktionsgrenze, die die maximale speicherbare Datenkapazität innerhalb dieses Systems definiert. Diese funktionellen Grenzen sind ein best-guess-Anstrengung des Designers auf der Basis, wie groß die Speichersysteme jetzt sind und wie große Speichersysteme in Zukunft werden können. Die Festplattenspeicherung hat sich bei nahen exponentiellen Raten weiter erhöht (siehe Moore's Gesetz), so dass die Dateisysteme nach einigen Jahren immer mehr Design-Beschränkungen erreicht haben, die Computer-Nutzer benötigen, um immer wieder zu einem neueren System mit immer größerer Kapazität zu bewegen. Die Komplexität des Dateisystems variiert typischerweise proportional zur verfügbaren Speicherkapazität. Die Dateisysteme der frühen 1980er Jahre Heimcomputer mit 50 KB bis 512 KB Speicher wäre keine vernünftige Wahl für moderne Speichersysteme mit Hunderten von Gigabyten Kapazität. Ebenso würden moderne Dateisysteme für diese frühen Systeme keine vernünftige Wahl sein, da die Komplexität moderner Dateisystemstrukturen die sehr begrenzte Kapazität der frühen Speichersysteme schnell verbrauchen oder sogar übersteigen würde. Arten von Dateisystemen Dateisystemtypen können in Disk/Tape-Dateisysteme, Netzwerkdateisysteme und Sonderdateisysteme klassifiziert werden. Disk-Dateisysteme Ein Disk-Dateisystem nutzt die Vorteile der Fähigkeit von Disk-Speichermedien, Daten in kurzer Zeit zufällig zu adressieren. Zu den weiteren Überlegungen gehören die Geschwindigkeit des Zugriffs auf die Daten, die auf die ursprünglich angeforderten Daten folgen, und die Voraussicht, dass auch die folgenden Daten angefordert werden können. Dies ermöglicht den Zugriff mehrerer Benutzer (oder Prozesse) auf verschiedene Daten auf der Festplatte ohne Berücksichtigung des sequentiellen Standorts der Daten. Beispiele sind FAT (FAT12, FAT16, FAT32,) exFAT, NTFS, HFS und HFS+, HPFS, APFS, UFS, ext2, ext3, ext4, XFS, btrfs, Files-11, Veritas File System, VMFS, ZFS, ReiserFS und ScoutFS. Einige Dateisysteme sind Journaling-Dateisysteme oder Versioning-Dateisysteme. Optische Scheiben ISO 9660 und Universal Disk Format (UDF) sind zwei gemeinsame Formate, die Compact Discs, DVDs und Blu-ray Discs ansprechen.Mount Rainier ist eine Erweiterung auf UDF unterstützt seit 2.6 Serie des Linux-Kernels und seit Windows Vista, die das Umschreiben auf DVDs erleichtert. Flash-Dateisysteme Ein Flash-Dateisystem betrachtet die besonderen Fähigkeiten, Leistung und Einschränkungen von Flash-Speichergeräten. Häufig kann ein Festplatten-Dateisystem ein Flash-Speichergerät als die zugrunde liegenden Speichermedien verwenden, aber es ist viel besser, ein speziell für ein Flash-Gerät konzipiertes Dateisystem zu verwenden. Tape Dateisysteme Ein Tape-Dateisystem ist ein Dateisystem und Tape-Format, um Dateien auf Band zu speichern. Magnetbänder sind sequentielle Speichermedien mit deutlich längeren zufälligen Datenzugriffszeiten als Festplatten, die Herausforderungen für die Erstellung und effiziente Verwaltung eines universellen Dateisystems stellen. In einem Disk-Dateisystem gibt es typischerweise ein Master-Datei-Verzeichnis, und eine Karte der verwendeten und freien Datenregionen. Jegliche Dateierweiterungen, Änderungen oder Entfernungen erfordern eine Aktualisierung des Verzeichnisses und der verwendeten/freien Karten. Der Zugriff auf Datenbereiche wird in Millisekunden gemessen, so dass dieses System gut für Festplatten funktioniert. Tape erfordert lineare Bewegung zu winden und abzuwickeln potenziell sehr lange Rollen der Medien. Diese Bandbewegung kann mehrere Sekunden bis einige Minuten dauern, um den Schreib-/Lesekopf von einem Ende des Bandes zum anderen zu bewegen. Folglich kann ein Master-Datei-Verzeichnis und eine Nutzungskarte extrem langsam und ineffizient mit Band sein. Das Schreiben beinhaltet typischerweise das Lesen der Block-Nutzungskarte, um freie Blöcke zum Schreiben zu finden, die Nutzungskarte und das Verzeichnis zu aktualisieren, um die Daten hinzuzufügen, und dann das Band zu fördern, um die Daten in der richtigen Stelle zu schreiben. Jeder zusätzliche Dateischreiber erfordert die Aktualisierung der Karte und des Verzeichnisses und das Schreiben der Daten, die für jede Datei mehrere Sekunden dauern kann. Tape-Dateisysteme erlauben stattdessen typischerweise, dass das Dateiverzeichnis über das mit den Daten vermischte Band verbreitet wird, das als Streaming bezeichnet wird, so dass zeitraubende und wiederholte Bandbewegungen nicht erforderlich sind, um neue Daten zu schreiben. Ein Nebeneffekt dieses Designs ist jedoch, dass das Lesen des Dateiverzeichnisses eines Bandes in der Regel das Scannen des gesamten Bandes erfordert, um alle gestreuten Verzeichniseinträge zu lesen. Die meisten Datenarchivierungssoftware, die mit Bandspeicher arbeitet, speichert eine lokale Kopie des Bandkatalogs auf einem Festplatten-Dateisystem, so dass das Hinzufügen von Dateien zu einem Band schnell erfolgen kann, ohne die Bandmedien neu zu scannen. Die lokale Bandkatalogkopie wird in der Regel verworfen, wenn sie nicht für eine bestimmte Zeit verwendet wird, an welcher Stelle das Band wieder aufgenommen werden muss, wenn es in der Zukunft verwendet werden soll. IBM hat ein Dateisystem für Band namens Linear Tape File System entwickelt. Die IBM-Implementierung dieses Dateisystems wurde als Open-Source IBM Linear Tape File System – Single Drive Edition (LTFS-SDE) Produkt veröffentlicht. Das Linear Tape File System verwendet eine separate Partition auf dem Band, um die Index-Metadaten aufzuzeichnen, wodurch die Probleme, die mit der Streuung von Verzeichniseinträgen über das gesamte Band verbunden sind, vermieden werden. Tape Formatierung Schreibdaten zu einem Band, Löschen oder Formatieren eines Bandes ist oft ein deutlich zeitraubender Prozess und kann mehrere Stunden auf großen Bändern nehmen. Mit vielen Datenbandtechnologien ist es nicht notwendig, das Band zu formatieren, bevor es neue Daten auf das Band überschreibt. Dies ist auf die inhärent destruktive Art der Überschrift von Daten über sequentielle Medien zurückzuführen. Wegen der Zeit, die es nehmen kann, um ein Band zu formatieren, werden typischerweise Bänder vorformatiert, so dass der Bandbenutzer nicht Zeit für die Vorbereitung jedes neuen Bands für die Verwendung verbringen muss. Alles, was in der Regel erforderlich ist, ist, vor dem Gebrauch ein identifizierendes Medienlabel auf das Band zu schreiben, und selbst dies kann automatisch durch Software geschrieben werden, wenn zum ersten Mal ein neues Band verwendet wird. Datenbank-Dateisysteme Ein weiteres Konzept für das Dateimanagement ist die Idee eines datenbankbasierten Dateisystems. Anstelle oder zusätzlich zu hierarchischen strukturierten Managements werden Dateien durch ihre Eigenschaften wie Dateityp, Thema, Autor oder ähnliche reiche Metadaten identifiziert. IBM DB2 für i (früher bekannt als DB2/400 und DB2 für i5/OS) ist ein Datenbank-Dateisystem im Rahmen des objektbasierten IBM i Betriebssystems (früher als OS/400 und i5/OS bekannt), das einen einzigen Level-Store beinhaltet und auf IBM Power Systems (früher als AS/400 und iSeries bekannt) läuft, das von Frank G. Soltis IBM entwickelt wurde. Diese Technologien sind informell als "Fortress Rochester" bekannt und wurden in wenigen grundlegenden Aspekten aus frühen Mainframe-Technologien erweitert, aber in vielerlei Hinsicht aus technologischer Sicht weiter fortgeschritten. Einige andere Projekte, die nicht reine Datenbank-Dateisysteme sind, aber die einige Aspekte eines Datenbank-Dateisystems verwenden: Viele Web-Content-Management-Systeme verwenden eine relationale DBMS zum Speichern und Abrufen von Dateien. Beispielsweise werden XHTML-Dateien als XML- oder Textfelder gespeichert, während Bilddateien als Blob-Felder gespeichert werden; SQL SELECT (mit optionalem XPath)-Anweisungen die Dateien abrufen und die Verwendung einer ausgeklügelten Logik und reicheren Informationsvereinigungen als "gewöhnliche Dateisysteme" erlauben. Viele CMSs haben auch die Möglichkeit, nur Metadaten innerhalb der Datenbank zu speichern, wobei das Standard-Dateisystem verwendet wird, um den Inhalt von Dateien zu speichern. Sehr große Dateisysteme, die von Anwendungen wie Apache Hadoop und Google File System verkörpert werden, verwenden einige Datenbank-Dateisystem-Konzepte. Transactional file systems Einige Programme müssen entweder mehrere Dateisystemänderungen vornehmen, oder, wenn eine oder mehrere der Änderungen aus irgendeinem Grund fehlschlagen, keine der Änderungen. Beispielsweise kann ein Programm, das Software installiert oder aktualisiert, Ausführungs-, Bibliotheks- und/oder Konfigurationsdateien schreiben. Wenn ein Teil des Schreibens ausfällt und die Software teilweise installiert oder aktualisiert bleibt, kann die Software gebrochen oder unbrauchbar sein. Eine unvollständige Aktualisierung eines Schlüsselsystem-Dienstprogramms, wie der Befehlsschale, kann das gesamte System in einem unbrauchbaren Zustand verlassen. Transaction Processing führt die Atomsicherheit ein, um sicherzustellen, dass Operationen innerhalb einer Transaktion entweder alle begangen werden oder die Transaktion abgebrochen werden kann und das System alle seine Teilergebnisse absetzt. Dies bedeutet, dass, wenn es einen Crash oder Stromausfall gibt, nach der Wiederherstellung, der gespeicherte Zustand konsistent sein wird. Entweder wird die Software vollständig installiert oder die ausgefallene Installation wird vollständig zurückgerollt, aber eine unbrauchbare Teilinstallation wird nicht auf dem System hinterlassen. Transaktionen stellen auch die Isolationsgarantie zur Verfügung, was bedeutet, dass Operationen innerhalb einer Transaktion bis zur Transaktion vor anderen Threads auf dem System versteckt werden und dass störende Operationen auf dem System mit der Transaktion ordnungsgemäß serialisiert werden. Windows, beginnend mit Vista, fügte Transaktionsunterstützung zu NTFS, in einer Funktion namens Transactional NTFS, aber seine Verwendung ist jetzt entmutigt. Es gibt eine Reihe von Forschungsprototypen von Transaktions-Dateisystemen für UNIX-Systeme, darunter das Valor-Dateisystem, Amino, LFS und ein Transaktions-ext3-Dateisystem auf dem TxOS-Kernel sowie Transaktionsdateisysteme, die eingebettete Systeme wie TFFS ansprechen. Die Sicherstellung der Konsistenz über mehrere Dateisystemoperationen ist schwierig, wenn nicht unmöglich, ohne Dateisystemtransaktionen. Die Dateiverriegelung kann als Koncurrency Control-Mechanismus für einzelne Dateien verwendet werden, sie schützt jedoch typischerweise die Verzeichnisstruktur oder Dateimetadaten nicht. Zum Beispiel kann die Dateiverriegelung die TOCTTOU-Rennenbedingungen auf symbolischen Links nicht verhindern. Dateiverriegelung kann auch nicht automatisch einen gescheiterten Betrieb, wie ein Software-Upgrade, zurückrollen; dies erfordert Atomität. Journaling-Dateisysteme ist eine Technik, die verwendet wird, um Transaktionsebene Konsistenz auf Dateisystemstrukturen einzuführen. Journal-Transaktionen sind nicht im Rahmen der OS-API Programmen ausgesetzt; sie werden nur intern verwendet, um Konsistenz bei der Granularität eines einzelnen Systemaufrufs zu gewährleisten. Datensicherungssysteme bieten in der Regel keine Unterstützung für eine direkte Sicherung von Daten, die auf Transaktionsart gespeichert sind, wodurch die Wiederherstellung zuverlässiger und konsistenter Datensätze erschwert wird. Die meisten Backup-Software stellt einfach fest, welche Dateien seit einer bestimmten Zeit geändert haben, unabhängig von dem Transaktionszustand, der über mehrere Dateien im gesamten Datensatz geteilt wird. Als Workaround produzieren einige Datenbanksysteme einfach eine archivierte Zustandsdatei, die alle Daten bis zu diesem Punkt enthält, und die Backup-Software unterstützt nur, dass up und nicht direkt mit den aktiven Transaktionsdatenbanken interagiert. Recovery erfordert eine separate Erholung der Datenbank aus der Zustandsdatei, nachdem die Datei durch die Backup-Software wiederhergestellt wurde. Netzwerkdateisysteme Ein Netzwerk-Dateisystem ist ein Dateisystem, das als Client für ein Remote-Dateizugriffsprotokoll fungiert und den Zugriff auf Dateien auf einem Server ermöglicht. Programme, die lokale Schnittstellen verwenden, können hierarchische Verzeichnisse und Dateien in Remote-Netzwerk angeschlossenen Computern transparent erstellen, verwalten und zugreifen. Beispiele für Netzwerkdateisysteme sind Clients für die NFS, AFS, SMB-Protokolle und datensystemähnliche Clients für FTP und WebDAV. Geteilte Dateisysteme Ein freigegebenes Dateisystem ist eins, in dem eine Anzahl von Maschinen (in der Regel Server) alle Zugriff auf das gleiche externe Festplattensubsystem (in der Regel ein SAN) haben. Das Dateisystem willigt den Zugriff auf dieses Subsystem und verhindert Schreibkollisionen. Beispiele sind GFS2 von Red Hat, GPFS, jetzt bekannt als Spectrum Scale, von IBM, SFS von DataPlow, CXFS von SGI, StorNext von Quantum Corporation und ScoutFS von Versity. Spezielle Dateisysteme Ein spezielles Dateisystem stellt nicht-file Elemente eines Betriebssystems als Dateien dar, so dass sie mit Dateisystem-APIs agiert werden können. Dies geschieht am häufigsten in Unix-ähnlichen Betriebssystemen, aber Geräte erhalten auch Dateinamen in einigen nicht-Unix-ähnlichen Betriebssystemen. Geräte-Dateisysteme Ein Gerätedateisystem stellt I/O-Geräte und Pseudo-Geräte als Dateien dar, genannt Gerätedateien. Beispiele in Unix-ähnlichen Systemen sind devfs und in Linux 2.6 Systemen udev. In nicht-Unix-ähnlichen Systemen, wie TOPS-10 und anderen von ihm beeinflussten Betriebssystemen, bei denen der vollständige Dateiname oder Pfadname einer Datei ein Geräte-Präfix umfassen kann, werden andere Geräte als solche mit Dateisystemen von einem Geräte-Präfix bezeichnet, das das Gerät angibt, ohne dass es darauf folgt. Andere spezielle Dateisysteme Im Linux-Kernel liefern configfs und sysfs Dateien, die verwendet werden können, um den Kernel für Informationen abzufragen und Entitäten im Kernel zu konfigurieren. procfs maps Prozesse und, auf Linux, andere Betriebssystemstrukturen in einen Dateiraum. Minimales Dateisystem / Audiokassettenspeicher In den 1970er Jahren waren Festplatten- und Digitalbandgeräte für einige frühe Mikrocomputer-Benutzer zu teuer. Es wurde ein kostengünstiges Basisdatenspeichersystem entwickelt, das ein gemeinsames Audiokassettenband verwendet. Wenn das System zum Schreiben von Daten benötigt wurde, wurde dem Benutzer mitgeteilt, RECORD auf dem Kassettenrecorder zu drücken, dann drücken Sie RETURN auf der Tastatur, um das System zu benachrichtigen, dass der Kassettenrecorder aufgenommen wurde. Das System schrieb einen Sound, um Zeitsynchronisation, dann modulierte Geräusche, die ein Präfix, die Daten, eine Prüfsumme und ein Suffix codierten. Als das System benötigt wurde, um Daten zu lesen, wurde der Benutzer aufgefordert, PLAY auf dem Kassettenrecorder zu drücken. Das System würde die Geräusche auf dem Band hören, die warten, bis ein Tonburst als Synchronisation erkannt werden konnte. Das System würde dann spätere Sounds als Daten interpretieren. Wenn die gelesenen Daten vollständig waren, würde das System dem Benutzer melden, STOP auf dem Kassettenrecorder zu drücken. Es war primitiv, aber es (meist) arbeitete. Daten wurden sequentiell gespeichert, in der Regel in einem unnamenten Format, obwohl einige Systeme (wie die Commodore PET-Serie von Computern) erlaubten, die Dateien benannt werden. Mehrere Datensätze konnten geschrieben und lokalisiert werden, indem das Band schnell weitergeleitet und am Bandzähler beobachtet wird, um den ungefähren Beginn des nächsten Datenbereichs auf dem Band zu finden. Der Benutzer muss vielleicht die Geräusche hören, um den richtigen Ort zu finden, um die nächste Datenregion zu spielen. Einige Implementierungen enthielten sogar hörbare Sounds, die mit den Daten intersperiert wurden. Flache Dateisysteme In einem flachen Dateisystem gibt es keine Unterverzeichnisse; Verzeichniseinträge für alle Dateien werden in einem einzigen Verzeichnis gespeichert. Als zunächst Diskettenmedien zur Verfügung standen, war diese Art von Dateisystem aufgrund der relativ geringen Menge an verfügbaren Datenraum ausreichend. CP/M-Maschinen verfügten über ein flaches Dateisystem, wo Dateien einem von 16 Benutzerbereichen zugeordnet werden konnten und generische Dateioperationen verengt, um an einem zu arbeiten, anstatt zu standardisieren, um an allen zu arbeiten. Diese Benutzerbereiche waren nicht mehr als spezielle Attribute, die mit den Dateien verbunden waren; d.h. es war nicht notwendig, bestimmte Quote für jeden dieser Bereiche zu definieren und Dateien konnte zu Gruppen hinzugefügt werden, solange es noch freie Speicherplatz auf der Festplatte war. Der frühe Apple Macintosh verfügte auch über ein flaches Dateisystem, das Macintosh File System. Es war ungewöhnlich, dass das Dateimanagement-Programm (Macintosh Finder) die Illusion eines teilweise hierarchischen Anmeldesystems auf der Oberseite von EMFS erstellte. Diese Struktur erforderte jede Datei einen einzigartigen Namen, auch wenn es in einem separaten Ordner zu sein schien. IBM DOS/360 und OS/360 speichern Einträge für alle Dateien auf einem Laufwerk (Volume) in einem Verzeichnis auf dem Pack namens Volume Table of Content (VTOC). Während einfache, flache Dateisysteme unangenehm werden, wie die Anzahl der Dateien wächst und macht es schwierig, Daten in verwandten Gruppen von Dateien zu organisieren. Eine kürzliche Ergänzung zur Flat-Dateisystem-Familie ist Amazons S3, ein Remote-Speicherservice, der absichtlich vereinfacht ist, um Benutzern die Möglichkeit zu ermöglichen, wie ihre Daten gespeichert werden. Die einzigen Konstrukte sind Eimer (imagine ein Laufwerk mit unbegrenzter Größe) und Objekte (ähnlich, aber nicht identisch mit dem Standardkonzept einer Datei). Das erweiterte Dateimanagement ist erlaubt, indem man fast jedes Zeichen (einschließlich '/') im Namen des Objekts verwenden kann, und die Möglichkeit, Untergruppen des Inhalts des Eimers auf Basis identischer Präfixe auszuwählen. Dateisysteme und Betriebssysteme Viele Betriebssysteme umfassen Unterstützung für mehr als ein Dateisystem. Manchmal sind das Betriebssystem und das Dateisystem so eng miteinander verbunden, dass es schwierig ist, Dateisystemfunktionen zu trennen. Es muss eine Schnittstelle sein, die von der Betriebssystemsoftware zwischen dem Benutzer und dem Dateisystem bereitgestellt wird. Diese Schnittstelle kann textuell sein (z.B. durch eine Kommandozeilenschnittstelle, wie die Unix Shell, oder OpenVMS DCL) oder graphisch (z.B. durch eine grafische Benutzeroberfläche, wie Dateibrowser, bereitgestellt). Wenn graphisch, die Metapher des Ordners, der Dokumente, andere Dateien und geschachtelte Ordner enthält, häufig verwendet wird (siehe auch: Verzeichnis und Ordner). Unix- und Unix-ähnliche Betriebssysteme Unix-ähnliche Betriebssysteme erstellen ein virtuelles Dateisystem, das alle Dateien auf allen Geräten in einer einzigen Hierarchie erscheinen lässt. Dies bedeutet, in diesen Systemen gibt es ein Root-Verzeichnis, und jede Datei, die auf dem System vorhanden ist, befindet sich unter ihm irgendwo. Unix-ähnliche Systeme können als root-Verzeichnis eine RAM-Disk oder eine Netzwerk freigegebene Ressource verwenden. Unix-ähnliche Systeme geben jedem Gerät einen Gerätenamen zu, aber das ist nicht, wie die Dateien auf diesem Gerät aufgerufen werden. Um den Zugriff auf Dateien auf einem anderen Gerät zu erhalten, muss das Betriebssystem zunächst informiert werden, wo im Verzeichnisbaum diese Dateien erscheinen sollen. Dieser Vorgang wird als Aufbau eines Dateisystems bezeichnet. Zum Beispiel, um die Dateien auf einer CD-ROM zuzugreifen, muss man dem Betriebssystem "Take the file system from this CD-ROM and make it erscheinen unter einem solchen Verzeichnis. " Das dem Betriebssystem angegebene Verzeichnis wird als Mount Point bezeichnet – es kann beispielsweise /media sein. Das /media-Verzeichnis existiert auf vielen Unix-Systemen (wie im Dateisystem Hierarchy Standard angegeben) und ist speziell für den Einsatz als Befestigungspunkt für abnehmbare Medien wie CDs, DVDs, USB-Laufwerke oder Disketten gedacht. Es kann leer sein, oder es kann Unterverzeichnisse zur Montage einzelner Geräte enthalten. Generell kann nur der Administrator (d.h. Root-Benutzer) die Montage von Dateisystemen autorisieren. Unix-ähnliche Betriebssysteme umfassen oft Software und Werkzeuge, die bei der Montage helfen und ihm neue Funktionalität bieten. Einige dieser Strategien wurden als Spiegelung ihres Ziels automatisch eingeprägt. In vielen Situationen müssen andere Dateisysteme als die Wurzel verfügbar sein, sobald das Betriebssystem gestartet ist. Alle Unix-ähnlichen Systeme bieten daher eine Einrichtung zur Montage von Dateisystemen zum Boot-Zeit. Systemadministratoren definieren diese Dateisysteme in der Konfigurationsdatei fstab (vfstab in Solaris), die auch Optionen und Mount Points angibt. In einigen Situationen ist es nicht erforderlich, bestimmte Dateisysteme zum Boot-Zeitpunkt zu montieren, obwohl ihre Verwendung danach gewünscht werden kann. Es gibt einige Funktionen für Unix-ähnliche Systeme, die die Montage von vordefinierten Dateisystemen auf Anfrage ermöglichen. Mit abnehmbaren Medien können Programme und Daten ohne physische Verbindung zwischen Maschinen übertragen werden. Häufige Beispiele sind USB-Sticks, CD-ROMs und DVDs. Es wurden daher Utilities entwickelt, um das Vorhandensein und die Verfügbarkeit eines Mediums zu erkennen und dieses Medium ohne Benutzereingriff zu montieren. Progressive Unix-ähnliche Systeme haben auch ein Konzept namens Überlagerung eingeführt; siehe zum Beispiel das Linux-Supermount-ng-Projekt. Beispielsweise kann eine überlagerte Diskette physikalisch aus dem System entfernt werden. Unter normalen Umständen sollte die Scheibe synchronisiert und dann vor deren Entfernung unmontiert sein. Sofern eine Synchronisation stattgefunden hat, kann eine andere Scheibe in den Antrieb eingesetzt werden. Das System merkt automatisch, dass die Festplatte geändert hat und aktualisiert die Mount Point-Inhalte, um das neue Medium zu reflektieren. Ein Automounter wird automatisch ein Dateisystem montieren, wenn eine Referenz auf das Verzeichnis gemacht wird, auf dem es montiert werden soll. Dies wird in der Regel für Dateisysteme auf Netzwerkservern verwendet, anstatt sich auf Ereignisse wie das Einfügen von Medien zu verlassen, was für herausnehmbare Medien geeignet wäre. Linux Linux unterstützt zahlreiche Dateisysteme, aber häufige Optionen für die System-Disk auf einem Block-Gerät umfassen die ext* Familie (ext2, ext3 und ext4,) XFS, JFS und btrfs. Für Rohblitz ohne Flash-Übersetzungsschicht (FTL) oder Memory Technology Device (MTD) gibt es u.a. UBIFS, JFFS2 und YAFFS. SquashFS ist ein gemeinsames komprimiertes Read-Only-Dateisystem. Solaris Solaris in früheren Versionen standardmäßig UFS für bootfähige und ergänzende Dateisysteme (nicht-journaled oder nicht-logging). Solaris standardmäßig auf, unterstützt und erweiterte UFS. Unterstützung für andere Dateisysteme und signifikante Verbesserungen wurden im Laufe der Zeit hinzugefügt, darunter Veritas Software Corp. (journaling) VxFS, Sun Microsystems (clustering) QFS, Sun Microsystems (journaling) UFS und Sun Microsystems (open source, poolable, 128 bit komprimierbar und Error-correcting) ZFS. Kernel Erweiterungen wurden Solaris hinzugefügt, um eine bootfähige Veritas VxFS Operation zu ermöglichen. Logging oder Journaling wurde zu UFS in Sun's Solaris 7.Releases of Solaris 10, Solaris Express, OpenSolaris und andere Open Source-Varianten des Solaris Betriebssystems später unterstützt bootable ZFS. Logical Volume Management ermöglicht es, ein Dateisystem über mehrere Geräte zu übertragen, um Redundanz, Kapazität und/oder Durchsatz hinzuzufügen. Legacy-Umgebungen in Solaris können Solaris Volume Manager (früher Solstice DiskSuite) verwenden. Mehrere Betriebssysteme (einschließlich Solaris) können Veritas Volume Manager verwenden. Moderne Solaris basierte Betriebssysteme verkürzen die Notwendigkeit des Volumenmanagements durch die Nutzung virtueller Speicherpools in ZFS. macOS macOS (früher Mac OS X) verwendet das Apple File System (APFS), das im Jahr 2017 ein Dateisystem ersetzte, das von dem klassischen Mac OS HFS Plus (HFS+) geerbt wurde. Apple verwendet auch den Begriff "Mac OS Extended" für HFS+. HFS Plus ist ein metadata-reiches und case-servierendes, aber (meist) case-insensitives Dateisystem. Aufgrund der Unix Wurzeln von macOS wurden Unix-Berechtigungen zu HFS Plus hinzugefügt. Spätere Versionen von HFS Plus hinzugefügt Journaling, um Korruption der Dateisystemstruktur zu verhindern und eine Reihe von Optimierungen zu den Zuordnungsalgorithmen in einem Versuch, Dateien automatisch zu defragmentieren, ohne einen externen Defragmenter benötigen.Dateinamen können bis zu 255 Zeichen sein. HFS Plus verwendet Unicode, um Dateinamen zu speichern. Bei macOS kann der Dateityp aus dem Typcode, der in den Metadaten der Datei gespeichert ist, oder der Dateinamenserweiterung stammen. HFS Plus hat drei Arten von Links: Unix-Stil harte Links, Unix-Stil symbolische Links und Aliases. Aliases sind entworfen, um einen Link zu ihrer ursprünglichen Datei zu erhalten, auch wenn sie verschoben oder umbenannt werden; sie werden nicht vom Dateisystem selbst interpretiert, sondern durch den Dateimanager-Code in userland.macOS 10.13 High Sierra, der am 5. Juni 2017 bei Apples WWDC-Ereignis bekannt gegeben wurde, verwendet das Apple File System auf Solid-State-Laufwerken. macOS unterstützte auch das UFS-Dateisystem, das vom BSD Unix Fast File System über NeXTSTEP abgeleitet wurde. Ab Mac OS X Leopard konnte macOS jedoch nicht mehr auf einem UFS-Volume installiert werden, noch kann ein auf einem UFS-Volume installiertes Pre-Leopard-System auf Leopard aktualisiert werden. Ab Mac OS X Lion UFS-Unterstützung wurde komplett fallen gelassen. Neue Versionen von macOS sind in der Lage, zu den alten FAT-Dateisystemen (16 und 32) unter Windows zu lesen und zu schreiben. Sie sind auch in der Lage, die neueren NTFS-Dateisysteme für Windows zu lesen. Um NTFS-Dateisysteme auf macOS-Versionen vor Mac OS X Snow Leopard Drittanbieter-Software zu schreiben ist notwendig. Mac OS X 10.6 (Snow Leopard) und später erlauben, an NTFS-Dateisysteme zu schreiben, aber erst nach einer nicht-trivialen Systemeinstellung ändern (Drittanbieter-Software existiert, die dies automatisiert). Schließlich unterstützt macOS das Lesen und Schreiben des exFAT-Dateisystems seit Mac OS X Snow Leopard, ab Version 10.6.5 OS/2 OS/2 1.2 das High Performance File System (HPFS). HPFS unterstützt Mixed Case-Dateinamen in verschiedenen Code-Seiten, lange Dateinamen (255 Zeichen,) effizientere Nutzung des Festplattenraums, eine Architektur, die verwandte Elemente in der Nähe zueinander auf dem Festplattenvolumen hält, weniger Fragmentierung von Daten, flächenbasierte Raumzuordnung, eine B+ Baumstruktur für Verzeichnisse, und das Root-Verzeichnis am Mittelpunkt der Festplatte, für einen schnelleren mittleren Zugriff. 1999 wurde ein Journaled Filesystem (JFS) ausgeliefert. PC-BSD PC-BSD ist eine Desktop-Version von FreeBSD, die die ZFS-Unterstützung von FreeBSD vererbt, ähnlich wie FreeNAS. Der neue grafische Installer von PC-BSD kann auf ZFS und RAID-Z Pool installiert und Festplattenverschlüsselung mit Geli von Anfang an auf einfache Weise (GUI) verwalten. Die aktuelle PC-BSD 9.0+ 'Isotope Edition' hat die ZFS-Dateisystemversion 5 und die ZFS-Speicherpoolversion 28. Plan 9 von Bell Labs behandelt alles als Datei und Zugriffe auf alle Objekte, da eine Datei aufgerufen werden würde (d.h. es gibt keine ioctl oder mmap:) Networking, Grafiken, Debugging, Authentifizierung, Fähigkeiten, Verschlüsselung und andere Dienste werden über I/O-Betriebe auf Dateideskriptoren aufgerufen. Das 9P-Protokoll entfernt den Unterschied zwischen lokalen und Remote-Dateien. Dateisysteme in Plan 9 werden mit Hilfe von privaten, pro-Prozess Namensräumen organisiert, so dass jeder Prozess eine andere Ansicht der vielen Dateisysteme haben, die Ressourcen in einem verteilten System zur Verfügung stellen. Das Inferno-Betriebssystem teilt diese Konzepte mit Plan 9. Microsoft Windows Windows nutzt die FAT-, NTFS-, exFAT-, Live-Dateisystem- und ReFS-Dateisysteme (die letzte davon wird nur unterstützt und nutzbar in Windows Server 2012, Windows Server 2016, Windows 8, Windows 8.1 und Windows 10; Windows kann nicht von ihm booten). Windows verwendet eine Laufwerksbuchstabenabstraktion auf der Benutzerebene, um eine Festplatte oder Partition von einer anderen zu unterscheiden. Beispielsweise stellt der Pfad C:\WINDOWS ein Verzeichnis WINDOWS auf der Partition dar, die durch den Buchstaben C. Drive C dargestellt ist: wird am häufigsten für die primäre Festplatten-Partition verwendet, auf der Windows in der Regel installiert ist und von der es bootet. Diese Tradition ist so fest verankert, dass Fehler in vielen Anwendungen existieren, die Annahmen, dass das Laufwerk, auf dem das Betriebssystem installiert ist C.Die Verwendung von Laufwerksbuchstaben, und die Tradition der Verwendung C als Laufwerksbuchstabe für die primäre Festplatten-Partition, kann auf MS-DOS zurückverfolgt werden, wo die Buchstaben A und B für bis zu zwei Diskettenlaufwerken reserviert waren. Dies wiederum stammte von CP/M in den 1970er-Jahren und letztlich von IBMs CP/CMS von 1967. FAT Die Familie der FAT-Dateisysteme wird von fast allen Betriebssystemen für Personal Computer unterstützt, darunter alle Versionen von Windows und MS-DOS/PC DOS, OS/2 und DR-DOS.(PC DOS ist eine OEM-Version von MS-DOS, MS-DOS basiert ursprünglich auf SCP's 86-DOS. DR-DOS basierte auf Digital Research's Concurrent DOS, einem Nachfolger von CP/M-86.) Die FAT-Dateisysteme sind daher gut geeignet als universelles Austauschformat zwischen Computern und Geräten aller Art und Alter. Das FAT-Dateisystem verfolgt seine Wurzeln zurück zu einem (unkompatiblen) 8-Bit-FAT-Vorläufer im Standalone Disk BASIC und dem kurzlebigen MDOS/MIDAS-Projekt. Im Laufe der Jahre wurde das Dateisystem von FAT12 auf FAT16 und FAT32 erweitert. Dem Dateisystem wurden verschiedene Funktionen hinzugefügt, darunter Unterverzeichnisse, Codepage-Unterstützung, erweiterte Attribute und lange Dateinamen. Drittanbieter wie Digital Research haben optionale Unterstützung für das Löschen von Dateien und mehrbenutzerbasierten Sicherheitsprogrammen zur Unterstützung von Datei- und Verzeichniskennwörtern und Berechtigungen wie Lese-/Schreib-/Ausführung/löschen von Zugriffsrechten eingebunden. Die meisten dieser Erweiterungen werden nicht von Windows unterstützt. Die Dateisysteme FAT12 und FAT16 hatten ein Limit auf die Anzahl der Einträge im Rootverzeichnis des Dateisystems und hatten Einschränkungen auf die maximale Größe von FAT-formatierten Festplatten oder Partitionen. FAT32 adressiert die Einschränkungen in FAT12 und FAT16, mit Ausnahme der Dateigrößengrenze von knapp 4 GB, bleibt aber im Vergleich zu NTFS begrenzt. FAT12, FAT16 und FAT32 haben auch eine Grenze von acht Zeichen für den Dateinamen und drei Zeichen für die Erweiterung (wie exe). Dies wird häufig als die 8.3 Dateinamensgrenze bezeichnet. VFAT, eine optionale Erweiterung auf FAT12, FAT16 und FAT32, die in Windows 95 und Windows NT 3.5 eingeführt wurde, erlaubte es, lange Dateinamen (LFN) im FAT-Dateisystem rückwärtskompatibel zu speichern. NTFS NTFS, 1993 mit dem Windows NT Betriebssystem eingeführt, erlaubte ACL-basierte Berechtigungskontrolle. Andere Funktionen, die auch von NTFS unterstützt werden, umfassen harte Links, mehrere Datei-Streams, Attribut-Indexing, Quoten-Tracking, Sparse-Dateien, Verschlüsselung, Komprimierung und Reparse-Points (Direktoren, die als Mount-Points für andere Dateisysteme, Symlinks, Kreuzungen, Remote-Speicher-Links arbeiten.) exFAT exFAT hat gewisse Vorteile über NTFS in Bezug auf Dateisystem Overhead. exFAT ist nicht rückwärtskompatibel mit FAT-Dateisystemen wie FAT12, FAT16 oder FAT32. Das Dateisystem wird mit neueren Windows-Systemen wie Windows XP, Windows Server 2003, Windows Vista, Windows 2008, Windows 7, Windows 8 und Windows 10.exFAT unterstützt in macOS ab Version 10.6.5 (Snow Leopard.) Die Unterstützung in anderen Betriebssystemen ist sparsam, da die Implementierung der Unterstützung für exFAT eine Lizenz erfordert. exFAT ist das einzige Dateisystem, das auf macOS und Windows vollständig unterstützt wird, das Dateien größer als 4 GB halten kann. OpenVMS MVS Vor der Einführung von VSAM implementierten OS/360-Systeme ein Hybrid-Dateisystem. Das System wurde entwickelt, um leicht abnehmbare Festplattenpakete zu unterstützen, so dass die Informationen über alle Dateien auf einer Festplatte (Volume in IBM-Terminologie) auf dieser Festplatte in einer flachen Systemdatei namens Volume Table of Contents (VTOC) gespeichert werden. Der VTOC speichert alle Metadaten für die Datei. Später wurde mit der Einführung des Systemkatalogs eine hierarchische Verzeichnisstruktur eingeführt, die wahlweise Dateien (Datensätze) auf wohnhafte und abnehmbare Volumina katalogisieren kann. Der Katalog enthält nur Informationen, um einen Datensatz auf ein bestimmtes Volumen zu beziehen. Wenn der Benutzer Zugriff auf einen Datensatz auf ein Offline-Volume fordert und geeignete Privilegien hat, versucht das System, das benötigte Volumen zu montieren. Katalogisierte und nicht-katalogierte Datensätze können noch mit Informationen im VTOC aufgerufen werden, um den Katalog zu umgehen, wenn das benötigte Volume id auf die OPEN-Anfrage zur Verfügung gestellt wird. Noch später wurde der VTOC indiziert, um den Zugang zu beschleunigen. Conversal Monitor System Die IBM Conversational Monitor System (CMS) Komponente von VM/370 verwendet für jede virtuelle Festplatte (minidisk). Dateidaten und Kontrollinformationen werden gestreut und gemischt. Der Anker ist eine Platte namens Master File Directory (MFD), die sich immer im vierten Block auf der Festplatte befindet. Ursprünglich verwendet CMS feste Länge 800-Byte Blöcke, aber später Versionen verwendet größere Größenblöcke bis 4K. Der Zugriff auf einen Datensatz erfordert zwei Ebenen der Indirektion, wobei der Verzeichniseintrag der Datei (ein Dateistatus-Tabelle (FST) -Eintrag) auf Blöcke zeigt, die eine Liste von Adressen der einzelnen Datensätze enthalten. AS/400 Dateisystem Daten auf der AS/400 und ihre Nachfolger bestehen aus Systemobjekten, die in einem einstufigen Speicher in den virtuellen Adressraum des Systems abgebildet werden. Viele Arten von Objekten werden definiert, einschließlich der Verzeichnisse und Dateien in anderen Dateisystemen gefunden. Dateiobjekte bilden zusammen mit anderen Objekttypen die Grundlage für die Unterstützung der AS/400 für eine integrierte relationale Datenbank. Andere Dateisysteme Das Prospero File System ist ein Dateisystem basierend auf dem Virtual System Model. Das System wurde von Dr. B. Clifford Neuman vom Institut für Informationswissenschaften an der University of Southern California erstellt. RSRE FLEX-Dateisystem - geschrieben in ALGOL 68Das Dateisystem des Michigan Terminal Systems (MTS) ist interessant, weil: (i) es bietet "Zeilendateien", wo Rekordlängen und Zeilennummern als Metadaten mit jedem Datensatz in der Datei zugeordnet sind, Zeilen können hinzugefügt werden, ersetzt, aktualisiert mit den gleichen oder verschiedenen Längenaufzeichnungen, und gelöscht überall in der Datei, ohne dass die gesamte Datei gelesen und neu geschrieben werden muss; (ii) Einschränkungen Konvertieren der Art eines Dateisystems Es kann vorteilhaft oder notwendig sein, Dateien in einem anderen Dateisystem zu haben, als sie derzeit existieren. Gründe sind die Notwendigkeit einer Erhöhung der Raumanforderungen über die Grenzen des aktuellen Dateisystems hinaus. Die Pfadtiefe kann über die Einschränkungen des Dateisystems hinaus erhöht werden müssen. Es kann Leistung oder Zuverlässigkeit Erwägungen geben. Der Zugriff auf ein anderes Betriebssystem, das das bestehende Dateisystem nicht unterstützt, ist ein weiterer Grund. Umrechnung an Ort und Stelle In einigen Fällen kann die Konvertierung an Ort und Stelle erfolgen, obwohl die Migration des Dateisystems konservativer ist, da es eine Kopie der Daten erstellt und empfohlen wird. Unter Windows können FAT- und FAT32-Dateisysteme über den Konverter in NTFS umgewandelt werden. nicht umgekehrt. Auf Linux kann ext2 in ext3 (und zurück konvertiert) umgewandelt werden und ext3 kann in ext4 (aber nicht zurück) umgewandelt werden und sowohl ext3 als auch ext4 können in btrfs umgewandelt werden und bis die uno-Information gelöscht wird. Diese Konvertierungen sind durch die Verwendung des gleichen Formats für die Dateidaten selbst möglich und verlagern die Metadaten in leeren Raum, teilweise unter Verwendung von Sparse-Dateiunterstützung. Migration auf ein anderes Dateisystem Migration hat den Nachteil, dass zusätzliche Raum benötigt, obwohl es schneller sein kann. Der beste Fall ist, wenn es ungenutzten Speicherplatz auf Medien, die das endgültige Dateisystem enthalten wird. Zum Beispiel, um ein FAT32-Dateisystem zu einem ext2-Dateisystem zu migrieren. Zuerst ein neues ext2-Dateisystem erstellen, dann die Daten in das Dateisystem kopieren, dann das FAT32-Dateisystem löschen. Eine Alternative, wenn es nicht genügend Platz gibt, um das ursprüngliche Dateisystem zu behalten, bis das neue erstellt wird, ist es, einen Arbeitsbereich (z.B. ein abnehmbares Medium) zu verwenden. Dies dauert länger, aber ein Backup der Daten ist ein schöner Nebeneffekt. Lange Dateipfade und lange Dateinamen In hierarchischen Dateisystemen werden Dateien über einen Pfad aufgerufen, der eine Verzweigungsliste von Verzeichnissen mit der Datei ist. Verschiedene Dateisysteme haben unterschiedliche Grenzen in der Tiefe des Pfades. Dateisysteme haben auch ein Limit auf der Länge eines einzelnen Dateinamens. Das Kopieren von Dateien mit langen Namen oder in Pfaden von signifikanter Tiefe von einem Dateisystem zu einem anderen kann unerwünschte Ergebnisse verursachen. Dies hängt davon ab, wie das Dienstprogramm das Kopieren der Diskrepanz übernimmt. Siehe auch Hinweise Referenzen Quellen Weiter lesen Bücher Online Externe Links Dateisystem Spezifikationen - Links & Whitepapers Interessante Dateisystem-Projekte