In der Informatik ist Konkurrenz die Fähigkeit, verschiedene Teile oder Einheiten eines Programms, Algorithmus oder Problem aus der Bestellung oder gleichzeitig Teilauftrag ausgeführt werden, ohne das Endergebnis zu beeinflussen. Dies ermöglicht eine parallele Ausführung der Gleichstromeinheiten, die die Gesamtgeschwindigkeit der Ausführung in Mehrprozessor- und Mehrkernsystemen deutlich verbessern kann. Konkurrenz bezieht sich auf die Dekomposition eines Programms, Algorithmus oder Problems in geordnete oder teilgeordnete Komponenten oder Einheiten der Berechnung. Laut Rob Pike ist Konkurrenz die Zusammensetzung unabhängiger Berechnungen, und Konkurrenz ist nicht Parallelismus: Konkurrenz beschäftigt sich mit vielen Dingen auf einmal, aber Parallelismus dreht sich um viele Dinge auf einmal. Konkurrenz ist über Struktur, Parallelismus ist über Ausführung, Konkurrenz bietet eine Möglichkeit, eine Lösung zu strukturieren, um ein Problem zu lösen, das (aber nicht notwendig) parallelisierbar sein kann. Eine Reihe von mathematischen Modellen wurden für die allgemeine gleichzeitige Berechnung entwickelt, einschließlich Petri Netze, Prozess-Calculi, das parallele Zufalls-Access-Maschinenmodell, das Schauspieler-Modell und die Reo Coordination Language. Geschichte Wie Leslie Lamport (2015) bemerkt: "Während die gleichzeitige Programmausführung seit Jahren in Betracht gezogen wurde, begann die Informatik der Konkurrenz mit Edsger Dijkstras Halbnal 1965, das das gegenseitige Ausschlussproblem eingeführt hat....Die folgenden Jahrzehnte haben ein enormes Interesse an Konkurrenz gesehen – insbesondere an verteilten Systemen. Wenn man die Ursprünge des Feldes zurückblickt, stellt sich heraus, was die grundlegende Rolle von Edsger Dijkstra spielt." Probleme Da Berechnungen in einem gleichzeitigen System während der Ausführung miteinander interagieren können, kann die Anzahl der möglichen Ausführungswege im System extrem groß sein und das resultierende Ergebnis unbestimmt sein. Die gleichzeitige Nutzung gemeinsamer Ressourcen kann eine Quelle der Unbestimmtheit sein, die zu Problemen wie Totschlägen und Ressourcenhungern führt. Die Konstruktion von Gleichstromsystemen erfordert oft zuverlässige Techniken zur Koordination ihrer Ausführung, Datenaustausch, Speicherzuordnung und Ausführungsplanung, um die Reaktionszeit zu minimieren und den Durchsatz zu maximieren. Theorie Konkurstheorie war ein aktives Forschungsfeld in der theoretischen Informatik. Eines der ersten Vorschläge war Carl Adam Petris Halbnalarbeit an Petrinetzen Anfang der 1960er Jahre. In den Jahren seitdem wurde eine Vielzahl von Formalismen für die Modellierung und Argumentation über Konkurs entwickelt. Modelle Es wurden eine Reihe von Formalismen zur Modellierung und zum Verständnis gleichzeitiger Systeme entwickelt, darunter: Die parallele Zutrittsmaschine Das Schauspielermodell Computational Brückenmodelle wie das Bulk Synchron Parallel (BSP) Modell Petri nets Process calculi Berechnung der kommunikativen Systeme (CCS)Kommunikation sequentielle Prozesse (CSP) Modell π-calculus Tuple Leerzeichen, z. Linda Einfache gleichzeitige objektorientierte Programmierung (SCOOP)Reo Koordinationssprache Einige dieser Modelle der Konkurrenz sind in erster Linie dazu bestimmt, die Vernunft und Spezifikation zu unterstützen, während andere über den gesamten Entwicklungszyklus verwendet werden können, einschließlich Design, Implementierung, Beweis, Prüfung und Simulation von gleichzeitigen Systemen. Einige davon basieren auf Nachrichtenübermittlung, andere haben verschiedene Mechanismen für Konkurs. Die Verbreitung verschiedener Modelle der Konkurrenz hat einige Forscher dazu motiviert, Wege zu entwickeln, um diese unterschiedlichen theoretischen Modelle zu vereinen. Zum Beispiel haben Lee und Sangiovanni-Vincentelli gezeigt, dass ein sogenanntes getaggtes Signalmodell verwendet werden kann, um einen gemeinsamen Rahmen für die Definition der denotationalen Semantik einer Vielzahl von verschiedenen Modellen der Konkurrenz bereitzustellen, während Nielsen, Sassone und Winskel gezeigt haben, dass Kategorietheorie verwendet werden kann, um ein ähnliches einheitliches Verständnis verschiedener Modelle zu bieten. Die Konkurrenzrepräsentation Theorem im Schauspielermodell bietet eine ziemlich allgemeine Möglichkeit, gleichzeitige Systeme zu repräsentieren, die in dem Sinne geschlossen sind, dass sie keine Kommunikation von außen erhalten. ( Andere Konkurrenzsysteme, z.B. Prozess-Calculi, können im Aktormodell mit einem zweiphasigen Commit-Protokoll modelliert werden.) Die durch ein geschlossenes System S bezeichnete mathematische Nennung wird zunehmend besser aus einem Anfangsverhalten, das ΨS genannt wird, unter Verwendung eines Verhaltens, das die Funktionsfortschritte S annähert, um eine Nennung (Mittelung) für S wie folgt zu konstruieren:DenoteS ≡iεω progressionSi(2°S) Auf diese Weise kann S hinsichtlich aller möglichen Verhaltensweisen mathematisch charakterisiert werden. Logics Verschiedene Arten von zeitlicher Logik können verwendet werden, um die Ursache für gleichzeitige Systeme. Einige dieser Logiken, wie z.B. lineare zeitliche Logik und Berechnungsbaumlogik, erlauben Aussagen über die Sequenzen von Zuständen, die ein gleichzeitiges System durchlaufen kann. Andere, wie Action-Computational tree logic, Hennessy-Milner-Logik, und Lamports zeitliche Logik der Handlungen, bauen ihre Behauptungen aus Sequenzen von Handlungen (Änderungen im Zustand). Die Hauptanwendung dieser Logiken ist schriftliche Vorgaben für gleichzeitige Systeme. Praxis Die gleichzeitige Programmierung umfasst Programmiersprachen und Algorithmen, die zur Realisierung von gleichzeitigen Systemen verwendet werden. Die gleichzeitige Programmierung wird üblicherweise allgemeiner als die parallele Programmierung betrachtet, da sie willkürliche und dynamische Kommunikations- und Interaktionsmuster umfassen kann, während parallele Systeme im allgemeinen ein vorgegebenes und gut strukturiertes Kommunikationsmuster aufweisen. Die Basisziele der gleichzeitigen Programmierung umfassen Korrektheit, Leistung und Robustheit. Gleichzeitige Systeme wie Betriebssysteme und Datenbank-Management-Systeme sind in der Regel unbestimmt zu bedienen, einschließlich der automatischen Wiederherstellung von Ausfall, und nicht unerwartet (siehe Concurrency Control). Einige gleichzeitige Systeme implementieren eine Form transparenter Konkurrenz, in der gleichzeitige rechnerische Einheiten konkurrieren und eine einzige Ressource teilen können, aber die Komplexität dieses Wettbewerbs und des Teilens werden vom Programmierer abgeschirmt. Da sie gemeinsam genutzte Ressourcen nutzen, benötigen gleichzeitige Systeme im Allgemeinen die Aufnahme einer Art Arbiter irgendwo in ihre Implementierung (oft in der zugrunde liegenden Hardware), um den Zugang zu diesen Ressourcen zu kontrollieren. Die Verwendung von Arbitern führt die Möglichkeit der Unbestimmtheit bei gleichzeitiger Berechnung ein, die erhebliche Auswirkungen auf die Praxis hat, einschließlich der Richtigkeit und Leistung. Zum Beispiel führt Schlichtung ungebundenen Nichtdeterminismus ein, der Probleme mit Modellprüfung aufwirft, weil es Explosion im Staatsraum verursacht und sogar dazu führen kann, dass Modelle eine unendliche Anzahl von Staaten haben. Einige gleichzeitige Programmiermodelle umfassen Koprozesse und deterministische Konkurrenz. Bei diesen Modellen liefern Steuerungsfäden explizit ihre Taktiken, entweder an das System oder an einen anderen Prozess. Siehe auch Chu-Raum Client-Server-Netzwerk-Knoten Clojure Cluster-Knoten Concurrency control Concurrent Computing Concurrent object-orientierte Programmierung Concurrency Pattern Construction and Analysis of Distributed Processes (CADP) D (Programming Language)Distributed systemnodes Elixir (Programming Language)Erlang (Programming Language) Go (Programmierungssprache)Gordon Pask International Conference on Concurrency Theory (CONCUR)OpenMP Parallel Computing Partitioned global Address space Processes Ptolemy Project Rust (Programmierungssprache) Sheaf (Mathematik)Threads X10 (Programmierungssprache) Weitere Angaben Lynch, Nancy A. (1996). Verteilte Algorithmen. Morgan Kaufmann.ISBN 978-1-55860-348-6.Tanenbaum, Andrew S.; Van Steen, Maarten (2002). Verteilt Systeme: Prinzipien und Paradigmen. Prentice Hall.ISBN 978-0-13-088893-8.Kurki-Suonio, Reino (2005). Eine praktische Theorie von Reactive Systems.Springer.ISBN 978-3-540-23342-8.Garg, Vijay K. (2002). Elemente des verteilten Computing. Wiley-IEEE Press.ISBN 978-0-471-03600-5.Magee, Jeff; Kramer, Jeff (2006). Koncurrency: State Models and Java Programming.Wiley.ISBN 978-0-470-09355-9.Distefano, S,. & Bruneo, D. (2015). Quantitative Bewertungen verteilter Systeme: Methoden und Techniken (1. ed.). Somerset: John Wiley & Sons Inc.ISBN 9781119131144 Bhattacharyya, S. S. (2013;2014); Handbuch der Signalverarbeitungssysteme (Second;2;2. 2013; ed.). New York, NY: Springer.10.1007/978-1-4614-6859-2 ISBN 9781461468592 Wolter, K. (2012;2014). Bewertung der Widerstandsfähigkeit und Bewertung von Rechensystemen (1.Aufl.;1 ed.). London;Berlin: Springer.ISBN 9783642290329 Externe Links Concurrent Systems bei der WWW Virtual Library Concurrency Patterns Präsentation auf Scaleconf