Die Zufallszahlenerzeugung ist ein Prozess, der oft mittels eines Zufallszahlengenerators (RNG) eine Folge von Zahlen oder Symbolen erzeugt, die nicht vernünftigerweise besser vorhergesagt werden können als durch eine Zufallswahrscheinlichkeit. Dies bedeutet, dass die jeweilige Ergebnissequenz einige Muster enthalten wird, die in der Nachsicht nachweisbar sind, jedoch mit Voraussicht nicht vorhersehbar sind. Zufällige Zahlengeneratoren können wirklich zufällige Hardware-Zufallszahlen-Generatoren (HRNGS) sein, die in Abhängigkeit von dem aktuellen Wert einiger physikalischer Umgebungsattribute Zufallszahlen erzeugen, die sich ständig in einer Art und Weise verändern, die praktisch nicht modellierbar ist, oder Pseudo-Zufalls-Nummern-Generatoren (PRNGS), die zufällige Zahlen erzeugen, aber tatsächlich deterministisch sind, und nachgebildet werden können, wenn der Zustand der PRNG bekannt ist. Verschiedene Anwendungen der Zufallsbildung haben zur Entwicklung von mehreren verschiedenen Methoden zur Generierung von Zufallsdaten geführt, von denen einige seit der Antike existierten, unter denen Ränge bekannte klassische Beispiele sind, darunter das Walzen von Würfeln, Münzflipping, das Schuppeln von Spielkarten, die Verwendung von Yarrow Stielen (für die Divination) in der I Ching, sowie unzählige andere Techniken. Aufgrund der mechanischen Beschaffenheit dieser Techniken erforderte die Erzeugung großer Mengen ausreichender Zufallszahlen (wichtig in der Statistik) viel Arbeit und Zeit. So würden manchmal Ergebnisse gesammelt und als Zufallszahlentabellen verteilt. Es existieren mehrere rechnerische Methoden zur Pseudozufallszahlenerzeugung. Alle fallen unter das Ziel der wahren Zufälligkeit, obwohl sie mit unterschiedlichem Erfolg erfüllen können, einige der statistischen Tests für Zufälligkeit zu messen, wie unvorhersehbar ihre Ergebnisse sind (d.h. in welchem Maße ihre Muster erkennbar sind). Dies macht sie in der Regel für Anwendungen wie Kryptographie unbrauchbar. Es existieren aber auch sorgfältig gestaltete kryptographisch sichere Pseudorandom-Nummerngeneratoren (CSPRNGS), mit speziellen Features, die speziell für den Einsatz in der Kryptographie konzipiert sind. Praktische Anwendungen und Anwendungen Random-Nummer Generatoren haben Anwendungen in Glücksspiel, statistische Probenahme, Computersimulation, Kryptographie, völlig randomisierte Design, und andere Bereiche, wo ein unvorhersehbares Ergebnis ist wünschenswert. Im Allgemeinen sind bei Anwendungen mit Unvorhersehbarkeit als Paramount-Feature, wie in Sicherheitsanwendungen, Hardware-Generatoren gegenüber Pseudorandom Algorithmen, wo möglich, generell bevorzugt. Pseudorandom Zahlengeneratoren sind sehr nützlich bei der Entwicklung von Monte Carlo-Method-Simulationen, da das Debuggen durch die Möglichkeit erleichtert wird, dieselbe Folge von Zufallszahlen wieder zu laufen, indem es von demselben Zufallssamen ausgeht. Sie werden auch in der Kryptographie verwendet – solange der Samen geheim ist. Sender und Empfänger können den gleichen Satz von Zahlen automatisch erzeugen, um als Schlüssel zu verwenden. Die Erzeugung von Pseudozufallszahlen ist eine wichtige und gemeinsame Aufgabe bei der Computerprogrammierung. Während Kryptographie und bestimmte numerische Algorithmen einen sehr hohen Grad an scheinbarer Zufallskraft erfordern, brauchen viele andere Operationen nur eine bescheidene Menge an Unvorhersehbarkeit. Einige einfache Beispiele könnten einen Benutzer mit einem "random zit of the day" präsentieren oder bestimmen, wie sich ein computergesteuerter Gegner in einem Computerspiel bewegen könnte. Schwache Formen von Zufall werden in Hash-Algorithmen und bei der Erstellung von amortisierten Such- und Sortieralgorithmen verwendet. Einige Anwendungen, die auf den ersten Blick für die Zufallsbildung geeignet erscheinen, sind in der Tat nicht ganz so einfach. Zum Beispiel muss ein System, das zufällig Musiktitel für ein Hintergrundmusiksystem wählt, nur zufällig erscheinen und sogar Möglichkeiten haben, die Auswahl der Musik zu steuern: ein wahres zufälliges System hätte keine Beschränkung auf das gleiche Element, das zwei oder drei Mal hintereinander erscheint. True vs. pseudo-random numbers Es gibt zwei Hauptmethoden, die zur Erzeugung von Zufallszahlen verwendet werden. Das erste Verfahren misst einige physikalische Phänomene, die zu erwarten sind zufällig und kompensiert dann mögliche Bias im Messprozess. Beispielquellen sind die Messung von atmosphärischem Rauschen, thermischem Rauschen und anderen externen elektromagnetischen und Quantenerscheinungen. So stellen z.B. kosmische Hintergrundstrahlung oder radioaktiver Abfall, gemessen über kurze Zeiträume, natürliche Entropiequellen dar. Die Geschwindigkeit, mit der Entropie aus natürlichen Quellen geerntet werden kann, hängt von den zugrunde liegenden physikalischen Erscheinungen ab. So werden Quellen natürlich vorkommender wahrer Entropie als Blockierung bezeichnet – sie sind so lange geschwindigkeitsbegrenzt, bis genug Entropie geerntet wird, um die Nachfrage zu befriedigen.Auf einigen Unix-ähnlichen Systemen, einschließlich der meisten Linux-Distributionen, wird die Pseudo-Gerät-Datei dev/random blockieren, bis eine ausreichende Entropie aus der Umgebung geerntet wird. Aufgrund dieses Sperrverhaltens können bei Systemen, die diese Art von Entropiequelle verwenden, oft große Massenlesungen von dev/random, wie das Befüllen einer Festplatte mit zufälligen Bits, langsam sein. Das zweite Verfahren verwendet Rechenalgorithmen, die lange Sequenzen von scheinbar zufälligen Ergebnissen erzeugen können, die in der Tat vollständig durch einen kürzeren Anfangswert, bekannt als Saatwert oder Schlüssel, bestimmt werden. Dadurch kann die gesamte scheinbar zufällige Sequenz wiedergegeben werden, wenn der Saatgutwert bekannt ist. Diese Art von Zufallszahlengenerator wird oft als Pseudozufallszahlengenerator bezeichnet. Diese Art von Generator verlässt sich typischerweise nicht auf Quellen natürlich vorkommender Entropie, obwohl sie periodisch von natürlichen Quellen gesät werden kann. Dieser Generatortyp ist nicht blockierend, so dass sie nicht durch ein externes Ereignis, so dass große Masse liest eine Möglichkeit. Einige Systeme nehmen einen hybriden Ansatz, bieten zufällige, von natürlichen Quellen geerntet, wenn verfügbar, und fallen zurück zu periodisch wiederverwendeten softwarebasierten kryptographisch sicheren Pseudo-Zufallszahlen-Generatoren (CSPRNGs). Der Rückfall tritt auf, wenn die gewünschte Leserate von Zufall die Fähigkeit des natürlichen Ernteansatzes überschreitet, mit der Nachfrage aufrechtzuerhalten. Dieser Ansatz vermeidet das geschwindigkeitsbegrenzte Sperrverhalten von Zufallszahlengeneratoren basierend auf langsameren und reinen Umweltmethoden. Während ein ausschließlich auf deterministischer Logik basierender Pseudo-Zufallszahlengenerator im reinsten Sinne des Wortes niemals als wahre Zufallszahlquelle angesehen werden kann, sind sie in der Praxis auch für anspruchsvolle sicherheitskritische Anwendungen im allgemeinen ausreichend. In der Tat können sorgfältig gestaltete und implementierte Pseudorandom-Zahl-Generatoren für sicherheitskritische kryptografische Zwecke zertifiziert werden, wie dies bei dem Yarrow-Algorithmus und Fortuna der Fall ist. Erstere ist die Basis der dev/random entropy on FreeBSD, AIX, OS X, NetBSD und andere. OpenBSD verwendet einen Pseudorandom-Nummern-Algorithmus, der als arc4random bekannt ist. Physikalische Methoden Die frühesten Methoden zur Generierung von Zufallszahlen, wie Würfel, Münzen-Flipping und Roulette-Räder, werden heute noch verwendet, vor allem in Spielen und Glücksspielen, da sie für die meisten Anwendungen in der Statistik und Kryptographie zu langsam sind. Ein physikalischer Zufallszahlengenerator kann auf einem im Wesentlichen zufälligen atomaren oder subatomaren physikalischen Phänomen basieren, dessen Unvorhersehbarkeit auf die Gesetze der Quantenmechanik zurückzuführen ist. Zu den Entropiequellen gehören radioaktiver Zerfall, thermisches Rauschen, Schussgeräusche, Lawinengeräusche in Zener-Dioden, Taktdrift, das Timing der tatsächlichen Bewegungen eines Festplattenschreibkopfes und Radiogeräusche. Die physikalischen Phänomene und Werkzeuge, die sie in der Regel messen, weisen jedoch Asymmetrien und systematische Vorurteile auf, die ihre Ergebnisse nicht gleichmäßig zufällig machen. Ein Zufallsextraktor, wie eine kryptographische Hash-Funktion, kann verwendet werden, um eine gleichmäßige Verteilung von Bits aus einer uneinheitlich zufälligen Quelle, jedoch mit einer geringeren Bitrate, zu nähern. Das Auftreten von breitbandigen photonischen Entropiequellen, wie optisches Chaos und verstärktes spontanes Emissionsrauschen, unterstützt die Entwicklung des physikalischen Zufallszahlengenerators sehr. Unter ihnen verfügt das optische Chaos über ein hohes Potential, aufgrund seiner hohen Bandbreite und der großen Amplitude physikalisch schnell laufende Zufallszahlen zu erzeugen. Im Jahr 2013 wurde ein Prototyp eines schnellen, physikalischen Zufalls-Bit-Generators auf Basis eines chaotischen Lasers gebaut. Es wurden verschiedene imaginative Möglichkeiten zur Sammlung dieser entropen Informationen entwickelt. Eine Technik ist, eine Hash-Funktion gegen einen Rahmen eines Videostreams aus einer unvorhersehbaren Quelle auszuführen. Lavarand verwendet diese Technik mit Bildern von einer Reihe von Lavalampen. HotBits misst radioaktiven Zerfall mit Geiger-Muller-Röhren, während Random.org Variationen in der Amplitude des atmosphärischen Rauschens verwendet, die mit einem normalen Radio aufgezeichnet werden. Eine weitere gemeinsame Entropiequelle ist das Verhalten menschlicher Benutzer des Systems. Während Menschen nicht als gute Zufallsgeneratoren auf Anfrage betrachtet werden, erzeugen sie zufälliges Verhalten recht gut im Kontext des Spielens gemischter Strategiespiele. Einige sicherheitsrelevante Computer-Software erfordert, dass der Benutzer eine lange Reihe von Mausbewegungen oder Tastatur-Eingaben zu erstellen, um eine ausreichende Entropie, die benötigt wird, um zufällige Tasten zu erzeugen oder Pseudorandom-Nummerngeneratoren zu initialisieren. Rechenverfahren Die meisten Computer generierte Zufallszahlen verwenden PRNGs, die Algorithmen sind, die automatisch lange Nummern mit guten zufälligen Eigenschaften erstellen können, aber schließlich wiederholt sich die Sequenz (oder die Speichernutzung wächst ohne Grenzen).Diese Zufallszahlen sind in vielen Situationen fein, sind aber nicht so zufällig wie Zahlen aus elektromagnetischen atmosphärischen Geräuschen, die als Entropiequelle verwendet werden. Die von solchen Algorithmen erzeugten Wertereihen werden in der Regel durch eine feste Zahl, die als Saatgut bezeichnet wird, bestimmt. Eines der häufigsten PRNG ist der lineare kongruentielle Generator, der die Wiederholung X n + 1 = (a X n + b ) mod m {\displaystyle X_{n+1}=(aX_{n}+b)\,{\textrm {mod}\,m verwendet, um Zahlen zu erzeugen, wobei a, b und m große Zahlen sind, und X n + 1 {\display X_ Die maximale Anzahl von Zahlen, die die Formel erzeugen kann, ist eine weniger als der Modul, m-1. Die Wiederholungsbeziehung kann auf Matrizen ausgedehnt werden, um viel längere Zeiträume und bessere statistische Eigenschaften zu haben. Um bestimmte nicht-zufällige Eigenschaften eines einzigen linearen Kongruenzgenerators zu vermeiden, können parallel mehrere solcher Zufallszahlengeneratoren mit geringfügig unterschiedlichen Werten des Multiplizierkoeffizienten a mit einem Master-Zufallszahlengenerator verwendet werden, der aus den verschiedenen Generatoren auswählt. Ein einfaches Pen-and-Papier-Verfahren zur Generierung von Zufallszahlen ist das sogenannte Mittelquadrat-Verfahren, das von John von Neumann vorgeschlagen wird. Während einfach zu implementieren, ist seine Leistung von schlechter Qualität. Es hat eine sehr kurze Zeit und schwere Schwächen, wie die Ausgangssequenz fast immer auf Null konvergiert. Eine neue Innovation ist es, den mittleren Platz mit einer Weyl-Sequenz zu kombinieren. Dieses Verfahren erzeugt eine hohe Qualitätsleistung über einen langen Zeitraum. Siehe Papier auf arxiv.org. Die meisten Computerprogrammsprachen umfassen Funktionen oder Bibliotheksroutinen, die Zufallszahlengeneratoren liefern. Sie sind oft dazu ausgelegt, ein zufälliges Byte oder Wort oder eine gleichmäßig zwischen 0 und 1 verteilte Floating-Point-Zahl bereitzustellen. Die Qualität, d.h. die Zufälligkeit solcher Bibliotheksfunktionen, variiert weit von vollständig vorhersehbarer Ausgabe bis hin zur kryptographischen Sicherung. Der standardmäßige Zufallszahlengenerator in vielen Sprachen, darunter Python, Ruby, R, IDL und PHP, basiert auf dem Mersenne Twister-Algorithmus und ist für Kryptographiezwecke nicht ausreichend, wie es in der Sprachdokumentation ausdrücklich angegeben ist. Solche Bibliotheksfunktionen haben oft schlechte statistische Eigenschaften und einige werden nach nur zehntausenden Versuchen Muster wiederholen. Sie werden oft mit der Echtzeituhr eines Computers als Saatgut initialisiert, da eine solche Uhr im Allgemeinen in Millisekunden misst, weit über die Präzision der Person hinaus. Diese Funktionen können für bestimmte Aufgaben (z.B. Videospiele) ausreichend zufällig sein, sind aber nicht geeignet, wenn qualitativ hochwertige Zufälligkeiten erforderlich sind, wie z.B. in Kryptographieanwendungen, Statistiken oder numerischen Analysen. Viel höhere Qualität Zufallszahlenquellen sind auf den meisten Betriebssystemen verfügbar; zum Beispiel dev/random auf verschiedenen BSD Aromen, Linux, Mac OS X, IRIX und Solaris, oder CryptGenRandom für Microsoft Windows. Die meisten Programmiersprachen, einschließlich der oben genannten, bieten einen Zugang zu diesen hochwertigen Quellen. Erzeugung aus einer Wahrscheinlichkeitsverteilung Es gibt ein paar Methoden, um eine Zufallszahl basierend auf einer Wahrscheinlichkeitsdichtefunktion zu erzeugen. Bei diesen Verfahren handelt es sich um eine einheitliche Zufallszahl in gewisser Weise. Aus diesem Grund arbeiten diese Methoden gleichermaßen gut bei der Generierung von sowohl pseudo-zufälligen als auch wahren Zufallszahlen. Ein Verfahren, das als Inversionsverfahren bezeichnet wird, beinhaltet die Integration von bis zu einem Bereich größer oder gleich der Zufallszahl (die für richtige Verteilungen zwischen 0 und 1 erzeugt werden sollte). Ein zweites Verfahren, das als Akzeptanz-Rejection-Verfahren bezeichnet wird, besteht darin, einen x- und y-Wert auszuwählen und zu testen, ob die Funktion von x größer als der y-Wert ist. Ist es, wird der x-Wert akzeptiert. Andernfalls wird der x-Wert zurückgewiesen und der Algorithmus versucht wieder. Die Random-Nummern-Generation kann auch von Menschen durchgeführt werden, in Form von Sammeln verschiedener Eingaben von Endbenutzern und Verwendung als Zufallsquelle. Die meisten Studien finden jedoch, dass menschliche Subjekte einen gewissen Grad an Nichtzufälligkeit haben, wenn man versucht, eine zufällige Sequenz von z.B. Ziffern oder Buchstaben zu erzeugen.Sie können zu viel zwischen den Entscheidungen im Vergleich zu einem guten Zufallsgenerator wechseln; so ist dieser Ansatz nicht weit verbreitet. Nachbearbeitung und statistische Kontrollen Selbst bei einer Quelle von plausiblen Zufallszahlen (Perhaps aus einem quantenmechanischen Hardware-Generator) werden Zahlen erhalten, die völlig unvoreingenommen sind. Darüber hinaus ändert sich das Verhalten dieser Generatoren oft mit Temperatur, Netzspannung, dem Alter des Gerätes oder anderen äußeren Störungen. Und ein Software-Bug in einer pseudorandom Nummer Routine, oder ein Hardware-Bug in der Hardware, die es läuft, kann ähnlich schwer zu erkennen sein. Generierte Zufallszahlen werden manchmal vor der Verwendung statistischen Tests unterzogen, um sicherzustellen, dass die zugrunde liegende Quelle noch funktioniert und anschließend nachverarbeitet wird, um ihre statistischen Eigenschaften zu verbessern. Ein Beispiel wäre der TRNG9803 Hardware-Zufallszahlengenerator, der eine Entropie-Messung als Hardware-Test verwendet und dann die Zufallssequenz mit einem Schieberegister-Stream-Cipher nachverarbeitet. Es ist in der Regel schwer, statistische Tests zu verwenden, um die generierten Zufallszahlen zu validieren. Wang und Nicol schlugen eine fernbasierte statistische Testtechnik vor, mit der die Schwächen mehrerer Zufallsgeneratoren identifiziert werden. Li und Wang schlugen eine Methode zum Testen von Zufallszahlen basierend auf laserchaotischen Entropiequellen mit Brownian Bewegungseigenschaften vor. Mit Random-Zahlen, die zwischen 0 und 1 gleichmäßig verteilt sind, können Zufallszahlen beliebiger Verteilung erzeugt werden, indem sie durch die inverse kumulative Verteilungsfunktion (CDF) der gewünschten Verteilung (siehe Inverse-Transformationsprobenahme) geleitet werden. Inverse CDFs werden auch Quantilfunktionen genannt. Um ein Paar statistisch unabhängiger, normal verteilter Zufallszahlen (x, y,) zu erzeugen, kann man zunächst die Polarkoordinaten (r, θ,) erzeugen, wobei r2~χ22 und θ~UNIFORM(0,2π) (sieheMuller-Transformation) sind. Einige 0 bis 1 RNGs umfassen 0, schließen jedoch 1 aus, während andere beides enthalten oder ausschließen. Die Ausgänge mehrerer unabhängiger RNGs können kombiniert werden (z.B. mit einem bitweisen XOR-Betrieb), um einen kombinierten RNG zumindest so gut wie der beste verwendete RNG bereitzustellen. Dies wird als Software-Aufhellung bezeichnet. Computer- und Hardware-Zufallszahlengeneratoren werden manchmal kombiniert, um die Vorteile beider Arten zu reflektieren. Computational random numbers generators können in der Regel Pseudorandom-Nummern viel schneller erzeugen als physikalische Generatoren, während physikalische Generatoren "wahre Zufälligkeit" erzeugen können. Niedrigdiskrete Sequenzen als Alternative Einige Berechnungen, die einen Zufallszahlengenerator verwenden, können als Berechnung eines Gesamt- oder Durchschnittswertes, wie der Berechnung von Integralen nach der Monte Carlo-Methode, zusammengefasst werden. Für solche Probleme kann es möglich sein, eine genauere Lösung durch die Verwendung sogenannter niederdiskreter Sequenzen zu finden, die auch quasi zufällige Zahlen genannt werden. Solche Sequenzen haben ein bestimmtes Muster, das Lücken gleichmäßig, qualitativ ausfüllt; eine wahrhaft zufällige Sequenz kann und meist größere Lücken verlassen. Aktivitäten und Demonstrationen Die folgenden Seiten stellen zufällige Zahlenproben zur Verfügung: Die SOCR-Ressourcenseiten enthalten eine Reihe von interaktiven Aktivitäten und Demonstrationen der Zufallszahlenerzeugung mit Java-Applets. Die Quantum Optics Group an der ANU generiert Zufallszahlen, die aus dem Quantenvakuum stammen. Stichprobe von Zufallszahlen sind auf ihrer Quanten-Zufallszahlengenerator-Forschungsseite verfügbar. Random.org stellt zufällige Zahlen zur Verfügung, die aus der Zufallszahl des atmosphärischen Rauschens stammen. Der Quantum Random Bit Generator Service am Ruđer Bošković Institut erntet Zufall aus dem Quantenprozess der photonischen Emission in Halbleitern. Sie bieten eine Vielzahl von Möglichkeiten, die Daten zu holen, einschließlich Bibliotheken für mehrere Programmiersprachen. Die Gruppe an der TU Taiyuan generiert Zufallszahlen, die von einem chaotischen Laser stammen. Muster der Zufallszahl sind bei ihrem Physical Random Number Generator Service verfügbar. Backdoors Da viel Kryptographie von einem kryptographisch sicheren Zufallszahlengenerator für die Schlüssel- und kryptographische Nonce-Generierung abhängt, kann ein Zufallszahlengenerator als Backdoor von einem Angreifer verwendet werden, um die Verschlüsselung zu brechen. Die NSA wird berichtet, eine Hintertür in den NIST-zertifizierten kryptographisch sicheren Pseudozufallszahlengenerator Dual EC DRBG eingefügt haben. Wird beispielsweise eine SSL-Verbindung mit diesem Zufallszahlengenerator erzeugt, so würde es laut Matthew Green die NSA erlauben, den Zustand des Zufallszahlengenerators zu bestimmen und dadurch schließlich alle über die SSL-Verbindung gesendeten Daten lesen zu können.Obwohl sich herausstellte, dass Dual_EC_DRBG ein sehr schlechter und möglicherweise geschützter Pseudorandom-Nummerngenerator lange vor der Bestätigung der NSA-Hintertür im Jahr 2013 war, hatte er bis 2013 einen erheblichen Einsatz in der Praxis gesehen, zum Beispiel von der prominenten Sicherheitsfirma RSA Security. Anschließend gab es Anschuldigungen, dass RSA Security wissentlich eine NSA-Backdoor in seine Produkte einfügte, möglicherweise im Rahmen des Bullrun-Programms. RSA hat bekanntlich eine Hintertür in seine Produkte eingefügt. Es wurde auch theorisiert, dass Hardware RNGs geheim modifiziert werden könnten, um weniger Entropie als angegeben zu haben, was die Verschlüsselung mit der Hardware RNG anfällig machen würde. Ein solches Verfahren, das durch Modifizierung der Dotiermaske des Chips veröffentlicht worden ist, was für eine optische Reverse-Engineerung nicht erkennbar wäre. Zum Beispiel ist es für die Zufallszahlenerzeugung in Linux als unannehmbar anzusehen, Intels RDRAND-Hardware RNG zu verwenden, ohne in der RDRAND-Ausgang mit anderen Entropiequellen zu mischen, um irgendwelchen Hintertüren in der Hardware RNG entgegenzuwirken, vor allem nach der Offenbarung des NSA Bullrun-Programms. Im Jahr 2010 wurde eine US-Lotterie-Ziehung von der Informationssicherheit Direktor der Multi-State Lottery Association (MUSL), die übersehentlich installiert Backdoor Malware auf dem sicheren RNG-Computer von MUSL während der Routine Wartung. Während der Hacks gewann der Mann eine Gesamtsumme von $16,500,000, indem die Zahlen korrekt vorhersagen einige Male im Jahr. Adressraum-Layout-Zufälligkeit (ASLR,) eine Minderung gegen Zeilenhammer und damit verbundene Angriffe auf die physische Hardware von Speicherchips hat sich bereits Anfang 2017 von VUSec als unzureichend erwiesen. Der Zufallszahlenalgorithmus, wenn er auf einem in der Hardware implementierten Schieberegister basiert, ist bei ausreichend großen Werten von p vorhersehbar und kann mit ausreichender Verarbeitungsleistung (Brute Force Hack) umgeschaltet werden. Dies bedeutet auch indirekt, dass Malware mit dieser Methode sowohl auf GPUs als auch auf CPUs laufen kann, wenn dies codiert ist, auch mit GPU, um ASLR auf der CPU selbst zu brechen. Siehe auch Referenzen Weitere Lesung Donald Knuth (1997). "Kapitel 3 – Random Numbers". Die Kunst der Computer-Programmierung. Vol.2: Seminumerische Algorithmen (3 ed.) L'Ecuyer, Pierre (2017). "History of Uniform Random Number Generation" (PDF). Proceedings of the 2017 Winter Simulation Conference.IEEE Press.pp.202–230.L'Ecuyer, Pierre (2012). "Random Number Generation" (PDF.) In J. E. Gentle; W. Haerdle; Y. Mori (Hrsg.). Handbuch von Computational Statistik: Konzepte und Methoden. Handbuch der Computerstatistik (zweite ed.). Springer-Verlag.pp.35–71.doi:10.1007/978-3-642-21551-3_3.hdl:10419/22195.ISBN 978-3-642-21550-6.Kroese, D. P;. Taimre, T;. Botev, Z.I (2011)."Kapitel 1 – Uniform Random Number Generation". Handbuch der Monte Carlo Methoden. New York: John Wiley & Sons.p 772.ISBN 978-0-470-17793-8. Presse, WH; Teukolsky, SA; Vetterling, WT; Flannery, BP (2007). "Kapitel 7.Randomzahlen". Numerische Rezepte: Die Kunst des wissenschaftlichen Rechnens (3. ed.). New York: Cambridge University Press. ISBN 978-0-521-88068-8.NIST SP800-90A, B, C-Serie zur Zufallszahlenerzeugung M. Tomassini, M. Sipper und M. Perrenoud (Oktober 2000). " Bei der Erzeugung hochwertiger Zufallszahlen durch zweidimensionale zelluläre automata". IEEE Transactions on Computers.49 (10:) 1146–1151.doi:10.1109/12.888056.CS1 maint: verwendet Autorenparameter (link) Externe Links RANDOM. ORG True Random Number Service Quantum Zufallszahlengenerator bei ANU Random und Pseudorandom on In Our Time at the BBC jR and a Java-based Framework for the generation of simulation Sequenzs, einschließlich Pseudorandom Sequenzen von Zahlen Random Nummerngeneratoren in der NAG Fortran Library Randomness Beacon bei NIST, Broadcasting Full-Entropy Bit-Strings in Blöcken von 512 Bits alle 60 Sekunden. Entwickelt, um Unvorhersehbarkeit, Autonomie und Konsistenz zu bieten. Ein Systemaufruf für Zufallszahlen: getrandom,() ein LWN.net-Artikel, der einen dedizierten Linux-Systemaufruf Statistische Eigenschaften von Pseudo Random Sequences und Experimente mit PHP und Debian OpenSSL Cryptographic ISAAC pseudorandom lottery numbers generator Random Sequence Generator basierend auf Avalanche Noise beschreibt