Ein Kryptografisch gesicherter Pseudo-Quoter (CSPRNG) oder Kryptografischer Pseudo-Zusatzgenerator (CPRNG) ist ein Pseudo-Nummerngenerator (PRNG) mit Eigenschaften, die sie für die Verwendung in Kryptographie geeignet sind. Es ist auch lose bekannt als Kryptografische Zufallszahler (CRNG) (siehe zufällige Zahlergeneration § echte vs. pseudo- Random Numbers). Die meisten Kryptografischen Anwendungen erfordern beispielsweise zufällige Zahlen: Schlüssel-Generation Nonces Salze in bestimmten Signatursystemen, einschließlich ECDSA, RSASSA-PSSThe quality of the Randomness for this Applications. Beispielsweise braucht die Schaffung eines Nonce in einigen Protokollen nur einzigartig. Andererseits erfordert die Erstellung eines Master-Schlüssels eine höhere Qualität, wie etwa mehr Eutropy. Im Falle von Einmalpads ist die Informations-theoretic Garantie des perfekten Geheimhaltungsgeheimnisses nur dann gültig, wenn das Schlüsselmaterial aus einer echten zufälligen Quelle mit hoher Eutropie stammt und daher jede Art von Pseudo-Spermiengenerator unzureichend ist. Idealerweise nutzt die Erzeugung von Zufallsnummern in CSPRNGs die von einer hochwertigen Quelle gewonnene Eutropy, im Allgemeinen die Zufalls-Pylinse des Betriebssystems. Unvorhergesehene Korrelationen wurden jedoch in mehreren so unvorhergesehenen unabhängigen Prozessen gefunden. Aus informationstechnischer Sicht entspricht die Zahl der Zufallsfälle, der zu erzeugenden Eutropy, der durch das System verursachten Eutropy. manchmal sind in praktischen Situationen jedoch mehr zufällige Zahlen erforderlich als es gibt Eutropy. Auch die Verfahren zur Abscheidung von Zufall aus einem laufenden System sind in der Praxis langsam. In solchen Fällen kann eine CSPRNG manchmal verwendet werden. A CSPRNG kann die verfügbare Eutropie über mehr Bits ausdehnen. Anforderungen Die Anforderungen eines normalen PRNG sind auch durch einen Kryptografisch gesicherten PRNG erfüllt, aber die Umkehr ist nicht wahr. CSPRNG-Anforderungen fallen in zwei Gruppen: Erstens, dass sie statistische Zufallsprüfungen durchführen und zweitens, dass sie einen ernsthaften Angriff aufhalten, selbst wenn ein Teil ihres ursprünglichen oder laufenden Staates einem Angriff zur Verfügung steht. Jede CSPRNG sollte den nächsten Test erfüllen. In Anbetracht der ersten k Bits einer Zufallssequenz gibt es keinen Polynomial-time-Algorithmus, der den (k+1)th Bit mit der Wahrscheinlichkeit des Erfolgs nicht förderfähig besser als 50% vorhersagen kann. Andrew Yao hat im Jahr 1982 bewiesen, dass ein Generator, der den nächsten Test überführt, alle anderen polynomialen statistischen Prüfungen für die Randomität übertragen wird. Jede CSPRNG sollte "staatliche Kompromisse" widerstehen. Wenn ein Teil oder jeder Staat (oder korrekt) aufgedeckt wurde, sollte es unmöglich sein, die Zahl der Zufallsnummern vor der Enthüllung wiederzubeleben. Wenn es während des Betriebs eine Eutropie gibt, sollte es nicht möglich sein, Kenntnis des Zustands des Inputs zu nutzen, um die künftigen Bedingungen des CSPRNG-Staats vorherzusagen. Beispiel: Kommt die CSPRNG unter Berücksichtigung der Produktion von Rechenbits von . in der Sequenz, beginnend mit einigen unbekannten Punkten im binären Ausbau, kann sie den nächsten Test gut erfüllen und somit statistisch zufällig sein, da . eine zufällige Sequenz sein scheint. () Dies würde garantiert, wenn . beispielsweise eine normale Zahl ist.) Dieser Algorithmus ist jedoch nicht Kryptografisch sicher; ein Angriffsmann, der bestimmt, dass ein Teil der Piraterie (d. h. der Zustand des Algorithmus) derzeit in der Lage ist, alle vormaligen Bits zu berechnen. Die meisten PRNGs sind nicht für die Verwendung als CSPRNG geeignet und werden auf beiden Seiten scheitern. Erstens, während die meisten PRNGs Outputs zufällig als Konsortierte statistische Tests erscheinen, lehnen sie nicht entschlossenen Reverse Engineering ab. Spezialisierte statistische Tests können speziell auf eine solche PRNG abgestimmt werden, die die Zufallsnummern nicht wirklich zufällig zeigen. Zweitens, für die meisten PRNGs, wenn ihr Staat aufgedeckt wurde, können alle früheren Zufallsnummern rückverdacht werden, so dass ein Angriffer alle früheren Nachrichten sowie die künftigen lesen kann. CSPRNGs sollen dieser Art der Verschlüsselung ausdrücklich widerstehen. Definitionen In der asymptotischen Einrichtung, eine Familie deterministischer polynomialer Zeiten, die G k : { 0 , 1 } { 0 , 1 } p ( k ) {\displaystyle G_{k}\colon 0,1\}^{k 0,1to 0,1pp(k) für einige Polynomiale p, ist ein Pseudo-Qualifikationsgenerator (PRNG oder P-PC in einigen Bezugspunkten), wenn er die Länge seines Inputs ( p ( k )) > k {\displaystyle p(k)>k} für jeden k) und wenn seine Produktion kalkulierbar ist, d. h. für jeden probabilistischen Poly-Zeit-Algorithmus A, der 1 oder 0 als Unterscheidungskraft produziert, | Pr x · { 0 , 1 } k [ A ( x ) ) · 1 ] · Pr r · { 0 , 1 } p ( k ) [ A ( r ) = 1 ] * · · ) ( k ) displaystyle links\Pr {_x\gets 0,1\}^{k[[A(G(x)]=1]-\Pr {r\gets 0,1\}^{p(k)[[A\right\right\rightmumu}mu (k} für einige förderfähige Funktion style \style \display \style \display \style \display \display \ (.Die Notation x · X WELLdisplaystyle x\gets X} bedeutet, dass x einheitlich bei Zufall aus dem Set X gewählt wird) Es gibt eine gleichwertige Charakterisierung: Familie G k : { 0 , 1 } k → { 0 , 1 } p ( k ) Memestyle G_{k}\colon 0,1.k 0,1to 0,1\}^{p(k) , G ist ein PRNG, wenn und nur, wenn der nächste Output von G nicht durch einen Polynomialzeitgorithmus vorhergesagt werden kann. A Forward-safe PRNG mit Blocklänge t ( k ) {\displaystyle t(k)} ist ein PRNG G k : { 0 , 1 } k { 0 , 1 } k × { 0 , 1 } t ( k ) faserstilstyle G_{k}\colon 0,1 ik 0,1to 0,1 0,1k 0,1t(k) , wo die Inputs i {\displaystyle s_{i} mit Länge k der aktuelle Stand i und die Produktion ( s i + 1 Memestyle s_{i+1} , y i {\displaystyle y_{i} {i} {i} ) besteht aus dem nächsten Staat i + 1 {\displaystyle s_{i} und dem sektor i y s i y ́ s {i ], der im Anschluss an einen Kompromiss mit dem Titel i. Kommt der ursprüngliche Staat 1 s s_{1} einheitlich aus { 0 , 1 } k Memestyle 0,1\}^{k , dann für alle i, die Sequenz ( y 1 , y 2 , ... , y i , s i + 1 ) displaystyle (y_{1},y_{2},\dots y_{i},s_{i+1) muss kalkulierbar sein von ( r 1 , r 2 , ... , r i , s i + 1 ) Kaffeestyle (r_{1},r_{2},\dots r_{i},s_{i+1) , in der der r i {\displaystyle r_{i} einheitlich aus dem { 0 , 1 } t ( k ) {\displaystyle 0,1\}^{t(k) .AnyPRNG G : { 0 , 1 } { 0 , 1 } } p ( k } } } · G\colon 0,1\}^{k 0,1to 0,1\}^{p(k) kann mit Blocklänge p ( k ) − k {\displaystyle p(k)-k} in einen zukunftssicheren PRNG umgewandelt werden, indem er seine Produktion in den nächsten Staat und die tatsächliche Leistung aufgeteilt. G ( ) = G 0 ( )  G G 1 ( ) s ) {\displaystyle G(s)=G_{0}(s)\Vert G_{1}(s) , in der nach G 0 ( s ) [ s ) s ] s · s [ s ] s {0}(s)=0} und G 1 ( s) s s s) · p) · k) · k) · · . . . .  G  G  G  G  PR Entropy Extraktion Santha und Vazirani haben bewiesen, dass mehrere Bitströme mit schwacher Randomität kombiniert werden können, um einen qualitativ hochwertigen quasi-randomischen Bitstrom zu erzeugen. John von Neumann hat bereits bewiesen, dass ein einfacher Algorithmus einen erheblichen Teil der Unparteilichkeit in jedem Bitstrom entfernen kann, der auf jeden Bitstrom angewendet werden sollte, bevor jede Änderung des Santha-Vazirani-Designs verwendet wird. Muster In der nachstehenden Diskussion werden CSPRNG-Designer in drei Klassen unterteilt: diejenigen, die auf Kryptografen wie Zirpheren und Kryptografen basieren, die auf mathematischen Problemen basieren, die als schwer zu betrachten sind, und spezielle Muster. Letztere führt häufig zusätzliche Eutropy ein, wenn sie verfügbar sind und in strikter Weise nicht reine Pseudo-Stellenzahlgeneratoren sind, da ihre Produktion nicht vollständig von ihrem ursprünglichen Staat bestimmt ist. Eine solche Ergänzung kann sogar verhindern, wenn der ursprüngliche Staat beeinträchtigt wird. Muster auf Basis von Kryptografen Ein sicherer Block Zirpher kann durch den Einsatz in Gegenmodus in eine CSPRNG umgewandelt werden. Dies geschieht durch die Auswahl eines Zufallsschlüssels und die Verschlüsselung eines 0, dann verschlüsseln Sie ein 1, dann verschlüsseln Sie einen 2, usw. Man kann auch mit einer willkürlichen Zahl außer Null beginnen. Unter der Annahme eines n-bit-Blocks können die Ergebnisse nach rund 2n/2 Blöcken von Zufallsdaten unterschieden werden, da nach dem Geburtstagsproblem kollaborierte Blöcke wahrscheinlich zu diesem Zeitpunkt werden, während ein Block Zirpher im CTR-Modus nie identische Blöcke aufstellt. Für 64-bit Block Zirpheren beschränkt sich die sichere Produktionsgröße auf einige Gigabyte, mit 128-bit- Blöcken ist die Begrenzung groß genug, um typische Anwendungen zu beeinflussen. Wenn sie allein verwendet wird, erfüllt sie jedoch nicht alle Kriterien einer CSPRNG (wie oben erwähnt), da sie nicht stark gegen "staatliche Kompromisse:" mit Kenntnis des Staates (in diesem Fall ein Gegen- und Schlüssel) ist, können Sie alle bisherigen Ergebnisse vorhersagen. Ein kryptographischer Schutz kann in einigen Fällen auch als gute CSPRNG agieren. In diesem Fall ist auch notwendig, dass der ursprüngliche Wert dieser Gegenpartei zufällig und geheim ist. Jedoch gibt es wenig Untersuchungen dieser Algorithmen, um auf diese Weise zu verwenden, und mindestens einige Autoren warnten gegen diese Verwendung. In den meisten Flämchen wird ein Pseudo-Flächenstrom geschaffen, der mit dem einfachen Text kombiniert wird (fast immer XORed), wobei die Zirpher auf einem Gegenstück ein neues Pseudo-Stirme zurückführen wird, möglicherweise mit einem längeren Zeitraum. Die Zirpher kann nur sicher sein, wenn das ursprüngliche Kabel eine gute CSPRNG ist, obwohl dies nicht unbedingt der Fall ist (siehe die RC4 Cipher). Wieder einmal muss der ursprüngliche Staat geheim gehalten werden. Numertische Gestaltungen Der Blum Blum Shub-Algorithmus verfügt über einen Sicherheitsnachweis, der auf der Schwierigkeit des quadratischen Residuosity-Problems beruht. Da die einzige bekannte Lösung dieses Problems darin besteht, den Modululus zu bestimmen, wird allgemein davon ausgegangen, dass die Schwierigkeit der Numerierung einen bedingten Sicherheitsnachweis für den Blum Blum-Shub-Algorithmus bietet. Jedoch ist der Algorithmus sehr ineffizient und daher unpraktisch, es sei denn, extreme Sicherheit ist notwendig. Der Blum-Micali-Algorithmus verfügt über einen Sicherheitsnachweis, der auf der Schwierigkeit des diskreten Logarithm-Problems basiert, aber auch sehr ineffizient ist. Daniel Brown von Certicom hat 2006 einen Sicherheitsnachweis für Dual_EC_DRBG vorgelegt, der sich auf die angenommene Härte der Entscheidungs-Hellman-Annahme, das x-logarithm-Problem und das Problem der Trunted Point stützt. Der Nachweis aus dem Jahr 2006 geht ausdrücklich davon aus, dass die P und Q im Dual_EC_DRBG-Norm (die 2013 von NSA abgebaut wurden) durch nicht-türkliche Werte ersetzt werden. Besonderes Design Es gibt eine Reihe praktischer PRNGs, die auf Kryptografisch gesichert sind, einschließlich des Yarrow-Algorithmus, der versucht, die entrope Qualität ihrer Inputs zu bewerten. Yarrow wird in macOS und anderen Apple OS bis Ende 2019 verwendet. Apple hat sich seitdem auf Fortuna verlagert.(Siehe dev/random). der ChaCha20-Algorithmus ersetzt RC4 in OpenBSD (Version 5.4), NetBSD (Version 7.0), und VMware (Version 12.0). ChaCha20 ersetzte auch SHA-1 in der Version 4.8. dem Fortuna-Algorithmus, dem Nachfolger von Yarrow, die nicht versuchen, die entrope Qualität ihrer Beiträge zu.. Fortuna wird in VMware verwendet. Apple änderte sich für die meisten oder alle Apple OS-Anfang um Dec. 2019. die in Microsofts Kryptographie Anwendungsschnittstelle ISAAC auf der Grundlage einer Variante des vpheren Evolutionsgorithmus basierend auf dem NIST Statistischen Test Suite.arc4 random AES-CTR DRBG wird häufig als Zufallszahler in Systemen verwendet, die die Verschlüsselung von AES nutzen. ANSI X9.17 Standard (Financial Institution Key Management (wholesale), der ebenfalls als FIPS-Standard angenommen wurde. Er nimmt als Input für ein TDEA (Kernoption 2) Schlüsselpaket k und (der erste Wert) ein 64-bit-Absatz-Saatgut auf. Jedes Mal ist eine Zufallszahl erforderlich: Halten Sie den aktuellen Termin/Zeit D bis zur maximalen Auflösung fest. Komputet einen vorübergehenden Wert t = TDEAk(D)Computes den Zufallswert x = TDEAk(s  t t), wo . die Bitwise-Ausschließlichkeit oder. Aktualisierungen des Saatguts = TDEAk(x vious t) Obly, die Technik ist leicht allgemeinisiert für jeden Block Zirpher; AES wurde vorgeschlagen. Normen Mehrere CSPRNGs wurden standardisiert. FIPS 186-4 NIST SP 800-90A: Diese abgezogene Norm hat vier PRNGs. Zwei von ihnen sind unkonventioneller und bewährt: CSPRNGs namens Hash_DRBG und HMAC_DRBG. Der dritte PRNG in diesem Standard, CTR DRBG, basiert auf einem Block, der in Gegenmodus läuft. Es hat ein unkonventionelles Design, aber es hat sich als schwächer erwiesen, als das Sicherheitsniveau des zugrunde liegenden Blocks Zirpher, wenn die Anzahl der Bits aus dieser PRNG größer ist als zwei der Macht der zugrunde liegenden Blockgröße in Bits. Liegt die maximale Anzahl von Bits aus dieser PRNG der 2 Blockgröße an, ergibt die daraus resultierende Leistung den mathematisch erwarteten Sicherheitsstand, den die Schlüsselgröße voraussichtlich erzeugen würde, aber die Produktion wird gezeigt, dass sie nicht von einem echten Zufallszahler ausgeschlossen werden kann. Wenn die maximale Zahl der Bits aus diesem PRNG weniger ist als es, wird der erwartete Sicherheitsniveau geliefert, und die Produktion scheint unschädlich von einem echten Zufallszahlgenerator. In der nächsten Überarbeitung, die Sicherheitsstärke für CTR_DRBG verlangt, hängt von der Begrenzung der Gesamtzahl der Erlöser und der Bits ab, die pro Ersuchen bereitgestellt werden. Das vierte und letzte PRNG in diesem Standard ist Dual_EC_DRBG. Es wurde gezeigt, dass es nicht Kryptografisch gesichert ist und wird davon ausgegangen, dass sie eine kleptographische NSA-Backtür haben. NIST SP 800-90A Rev.1: NIST SP 800-90A mit Dual_EC_DRBG entfernt und ist der Ersatz des abgezogenen Standards. ANSI X9.17-1985 Anhang C ANSI X9.31-1998Appendix A.2.4 ANSI X9.62-1998Annex A.4, veraltet durch ANSI X9.62-2005, Anhang D(HMAC_DRBG) NIST wird einen guten Bezug erhalten. Normen für die statistische Prüfung neuer GSPRNG-Muster: Statistische Test-Appline für Zufalls- und Pseudo-Abfallgeneratoren, NIST Spezialveröffentlichung 800-22. NSA kleptographische Hintertür in der Dual_EC_DRBGPRNG The Guardian and The New York Times haben 2013 berichtet, dass die Nationale Sicherheitsbehörde (NSA) eine Hintertür in einen Pseudo-Stellgenerator (PRNG) von NIST SP 800-90A einführte. was es der NSA ermöglicht, leicht zu entschlüsseln, das mit der Hilfe von Dual_EC_DRBG verschlüsselt wurde. Beide Papiere berichten, dass die NSA als unabhängige Sicherheitsexperten seit langem Mängel in der GSPRNG-Norm 800-90 eingeführt hat; dies wird erstmals von einem der obersten geheimen Dokumente bestätigt, die dem Guardian von Edward Snowden entnommen wurden.Die NSA hat sich verpflichtet, ihre eigene Version des NIST-Sicherheitsstandards, der 2006 für den weltweiten Einsatz zugelassen wurde, zu erhalten. Laut dem gelöschten Dokument ist die NSA zum alleinigen Herausgeber geworden. " Trotz des bekannten Potentials für eine kleptographische Backtür und andere bekannte erhebliche Mängel mit Dual_EC_DRBG, haben mehrere Unternehmen wie RSA Security fortgesetzt, die Dual_EC_DRBG nutzen, bis die Hintertür 2013 bestätigt wurde. RSA Security erhielt eine Zahlung von 10 Millionen Euro von der NSA. Sicherheitsfehler DUHK-Angriffe am 23. Oktober 2017, Shaanan Cney, Matthew Green und Nadia Heninger, Kryptographers an der University of Pennsylvania und Johns Hopkins University veröffentlicht Informationen über den Angriff von DUHK (Don't Hard-coded Keys) auf WPA2, bei dem die Hardware-Hersteller für den ANSI X9.31 RNG-Algorithmus einen verschlüsselten Saatgutschlüsseln, in dem "ein Angriffsteilnehmer verschlüsselte Daten zur Entdeckung des Rests der Verschlüsselungsparameter und zur Deduktion des verwendeten Schlüsselnetzes für virtuelle Kontakte (). Japan nutzte während des Zweiten Weltkriegs eine Zirpher Maschine für diplomatische Kommunikation; die Vereinigten Staaten konnten ihre Nachrichten kümmen und lesen, vor allem weil die verwendeten "Schlüsselwerte" unzureichend zufällig waren. Verweise auf Außenverbindungen RFC 4086, Randomnessanforderungen für Sicherheits Java "entropy Pool" für kryptographische und unvorhersehbare zufällige zufällige Zufallsnummern. Java Standardklasse, die einen Kryptografisch starken Pseudo-Peer-Nummerngenerator (PRNG) bietet. Kryptografisch Sichere Random Number auf Windows ohne Nutzung von CryptoAPI Conjectured Security der ANSI-NIST Elliptic Kurve RNG, Daniel R. L. Brown, IACR ePrint 2006/117.A Sicherheitsanalyse der NIST SP 800-90 Elliptic Kurve Random Number Generator, Daniel R. L. Brown und Kristian Gjosteen, IACR ePrint 2007/048. In CRYPTO 2007 erscheint.Crypt Analyse der Dual-Elliptic-Kurve Pseudo Random Generator,uter Schoenmacher und Andrey Sidorenko, IACR ePrint 2006/190. Effiziente Pseudo Random Generatoren auf der Grundlage der DDH Assumration, Reza Rezaeian Farashahi unduter Schoeners und Andrey Sidorenko, IACR ePrint 2006/321. Analyse des Generators für die Random Number, Zvi Gutter und Benny Pinkas und Tzachy Reinman. NIST Statistische Test Suite Dokumentation und Software-Downloads.