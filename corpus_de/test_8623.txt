Lisp-Maschinen sind allgemein einsetzbare Computer, die Lisp als Hauptsoftware und Programmiersprache effizient betreiben, meist über Hardware-Unterstützung. Sie sind ein Beispiel für eine hochrangige Computerarchitektur, und in gewisser Weise waren sie die ersten kommerziellen Ein-User-Workstations. Trotz der bescheidenen Anzahl (insgesamt 7.000 Einheiten von 1988) Lisp-Maschinen haben im Handel viele jetzt-commonplace-Technologien, einschließlich effektiver Müllsammlung, Laserdruck, Fenstersysteme, Computermäuse, hochauflösende bit-mapped Rastergrafiken, Computergrafik Rendering und Networking-Innovationen wie Chaosnet. Mehrere Firmen bauten und verkauften Lisp Maschinen in den 1980er Jahren: Symbolik (3600, 3640, XL1200, MacIvory und andere Modelle,) Lisp Machines Incorporated (LMI Lambda,) Texas Instruments (Explorer und MicroExplorer), und Xerox (Interlisp-D-Workstations). Die Betriebssysteme wurden in Lisp Machine Lisp, Interlisp (Xerox) und später teilweise in Common Lisp geschrieben. Geschichte Historischer Kontext Künstliche Intelligenz (KI) Computerprogramme der 1960er und 1970er Jahre erforderten intrinsisch, was dann als eine riesige Menge an Computerleistung betrachtet wurde, gemessen in Prozessorzeit und Speicherraum. Die Leistungsanforderungen der KI-Forschung wurden durch die symbolische Programmiersprache Lisp verschärft, als kommerzielle Hardware für montage- und Fortran-ähnliche Programmiersprachen konzipiert und optimiert wurde. Zunächst bedeuteten die Kosten solcher Computer-Hardware, dass sie unter vielen Benutzern geteilt werden musste. Da die integrierte Schaltungstechnik die Größe und die Kosten von Computern in den 1960er und Anfang der 1970er Jahre schrumpfte, und die Speicherbedürfnisse von AI-Programmen begannen, den Adressraum des häufigsten Forschungscomputers, der DEC PDP-10, zu überschreiten, betrachteten die Forscher einen neuen Ansatz: ein Computer speziell entwickelt und ausgeführt große künstliche Intelligenz-Programme, und maßgeschneidert auf die Semantik der Lisp Sprache. Um das Betriebssystem (relativ) einfach zu halten, würden diese Maschinen nicht geteilt werden, sondern für einzelne Benutzer. Ursprüngliche Entwicklung Im Jahr 1973 begannen Richard Greenblatt und Thomas Knight, Programmierer am Massachusetts Institute of Technology (MIT)Künstlerisches Intelligenzlabor (AI Lab), was das MIT Lisp Machine Project werden würde, als sie zunächst begannen, einen Computer zu bauen, der hart verdrahtet wurde, um bestimmte grundlegende Lisp-Operationen zu betreiben, anstatt sie in Software zu führen, in einer 24-Bit verschlagworteten Architektur. Die Maschine auch inkrementale (oder Arena) Müllsammlung. Genauer gesagt, da Lisp-Variablen zu Laufzeit und nicht zu kompilieren Zeit eingegeben werden, könnte eine einfache Addition von zwei Variablen fünfmal so lange auf konventionelle Hardware, aufgrund von Test- und Zweiganweisungen. Lisp Machines führte die Tests parallel zu den konventionelleren Einzelanweisungen. Bei Ausfall der simultanen Tests wurde das Ergebnis verworfen und rekomputiert; dies bedeutete in vielen Fällen eine Geschwindigkeitserhöhung um mehrere Faktoren. Dieser simultane Prüfansatz wurde auch bei der Prüfung der Grenzen von Arrays verwendet, wenn sie referenziert wurden, und andere Anforderungen an das Speichermanagement (nicht nur Müllsammlung oder Arrays). Die Typprüfung wurde weiter verbessert und automatisiert, wenn das herkömmliche Byte-Wort von 32-Bit auf 36-Bit für Symbolics 3600-Modell Lisp-Maschinen verlängert wurde und schließlich auf 40-Bit oder mehr (in der Regel wurden die von folgenden nicht berücksichtigten überschüssigen Bits für Fehlerkorrekturcodes verwendet). Die erste Gruppe von Extra-Bits wurde verwendet, um Typ-Daten zu halten, wodurch die Maschine eine verschlagwortete Architektur, und die restlichen Bits wurden verwendet, um CDR-Codierung zu implementieren (wobei die üblichen verknüpften Listenelemente zu etwa der Hälfte des Raumes komprimiert werden), Unterstützung Müllsammlung durch berichtet eine Größenordnung. Eine weitere Verbesserung war zwei Mikrocode-Anweisungen, die speziell Lisp-Funktionen unterstützten, wodurch die Kosten für den Aufruf einer Funktion auf bis zu 20 Taktzyklen reduziert wurden, in einigen Symbolik-Implementierungen. Die erste Maschine wurde die CONS-Maschine genannt (nach der Liste Bauunternehmer cons in Lisp benannt). Oft wurde es liebevoll als Ritter-Maschine bezeichnet, vielleicht seit Ritter die These seines Meisters zum Thema schrieb; es war sehr gut empfangen. Anschließend wurde sie in eine Version mit dem Namen CADR (ein Pünktchen; in Lisp, die Cadr-Funktion, die den zweiten Teil einer Liste zurückgibt, wird ausgesprochen ˈkeć.də enthaltend/or ˈkassi.də, wie einige das Wort cadre ankündigen), das im Wesentlichen auf der gleichen Architektur basiert. Etwa 25 davon waren im Wesentlichen Prototypen CADRs wurden innerhalb und ohne MIT für $~50.000 verkauft; es wurde schnell die Lieblingsmaschine für Hacking- viele der beliebtesten Software-Tools wurden schnell darauf portiert (z.B. Emacs wurde von ITS 1975 portiert). Auf einer AI-Konferenz, die 1978 am MIT stattfand, wurde so gut aufgenommen, dass die Defense Advanced Research Projects Agency (DARPA) ihre Entwicklung finanzierte. Kommerziell MIT Lisp Maschinentechnologie Im Jahr 1979, Russell Noftsker, überzeugt, dass Lisp-Maschinen eine helle kommerzielle Zukunft aufgrund der Stärke der Lisp-Sprache und der ermöglichende Faktor der Hardwarebeschleunigung, vorgeschlagen Greenblatt, dass sie die Technologie zu kommerziellisieren. In einer kontra-intuitiven Bewegung für einen KI Lab Hacker, Greenblatt in der Hoffnung, vielleicht, dass er die informelle und produktive Atmosphäre des Labors in einem realen Geschäft wiedererlangen könnte. Diese Ideen und Ziele waren erheblich von denen von Noftsker verschieden. Die beiden verhandelten in der Länge, aber auch keine Kompromisse. Da die vorgeschlagene Firma nur mit der vollen und ungeteilten Hilfe der AI Lab Hacker als Gruppe erfolgreich sein konnte, entschieden Noftsker und Greenblatt, dass das Schicksal des Unternehmens ihnen überlassen war, und so sollte die Wahl den Hackern überlassen werden. Die anschließenden Diskussionen der Wahl teilten das Labor in zwei Fraktionen. Im Februar 1979 kam es zu einem Kopf. Die Hacker begleiteten Noftsker, glauben, dass ein kommerzielles Venture-Fonds-Backed-Firma eine bessere Chance hatte, Lisp-Maschinen zu überleben und zu vermarkten, als Greenblatts vorgeschlagene selbsterhaltende Inbetriebnahme. Greenblatt hat die Schlacht verloren. Es war an dieser Stelle, dass Symbolik, Noftskers Unternehmen, langsam zusammenkam. Während Noftsker seinen Mitarbeitern ein Gehalt zahlte, hatte er kein Gebäude oder keine Ausrüstung für die Hacker zu arbeiten. Er verhandelte mit Patrick Winston, dass im Austausch dafür, dass die Mitarbeiter von Symbolics weiterhin aus dem MIT arbeiten, Symbolics das MIT intern und frei alle Software-Symboliken verwenden lassen würde. Ein Berater von CDC, der versuchte, eine natürliche Sprach-Computeranwendung mit einer Gruppe von West-Koast-Programmierern zusammenzustellen, kam nach Greenblatt, um eine Lisp-Maschine für seine Gruppe zu arbeiten, etwa acht Monate nach der katastrophalen Konferenz mit Noftsker. Greenblatt hatte beschlossen, seine eigene Rivale Lisp Maschinenfirma zu starten, aber er hatte nichts getan. Der Berater, Alexander Jacobson, entschied, dass die einzige Weise, wie Greenblatt die Firma starten und bauen die Lisp-Maschinen, die Jacobson dringend benötigt war, wenn Jacobson geschoben und anders half Greenblatt starten die Firma. Jacobson zog Geschäftspläne zusammen, ein Board, ein Partner für Greenblatt (ein F. Stephen Wyle). Das neu gegründete Unternehmen wurde LISP Machine, Inc. (LMI) genannt und wurde über Jacobson von CDC-Bestellungen finanziert. Um diese Zeit begann Symbolik (Noftskers Firma) zu arbeiten. Es war durch Noftskers Versprechen, Greenblatt einen Jahresvorsprung zu geben, und durch schwere Verzögerungen bei der Beschaffung von Risikokapital behindert worden. Symbolik hatte noch den großen Vorteil, dass während 3 oder 4 der AI Lab Hacker für Greenblatt gearbeitet hatten, eine solide 14 andere Hacker auf Symbolics unterzeichnet hatten. Zwei AI Lab-Leute wurden weder von Richard Stallman und Marvin Minsky eingestellt. Stallman gab jedoch Symbolik für den Rückgang der Hacker-Gemeinschaft, die sich um das AI-Labor zentrierte. Zwei Jahre lang, von 1982 bis Ende 1983, arbeitete Stallman von sich selbst, um die Ausgabe der Symbolik Programmierer zu klonen, mit dem Ziel, sie daran zu hindern, ein Monopol auf den Computern des Labors zu gewinnen. Unabhängig davon, nach einer Reihe von internen Kämpfen, wurde Symbolics aus dem Boden in 1980/1981, verkaufte den CADR als LM-2, während Lisp Machines, Inc. verkaufte es als LMI-CADR. Symbolik beabsichtigte nicht, viele LM-2s zu produzieren, da die 3600 Familie von Lisp-Maschinen sollte schnell versenden, aber die 3600er wurden wiederholt verzögert, und Symbolics endete mit der Produktion von ~100 LM-2s, von denen jeder für $70.000 verkauft. Beide Unternehmen entwickelten Produkte der zweiten Generation auf Basis des CADR: die Symbolics 3600 und die LMI-LAMBDA (von denen LMI es geschafft hat, ~200 zu verkaufen). Die 3600, die ein Jahr versendet, erweiterte auf dem CADR durch Erweiterung des Maschinenworts auf 36-Bits, Erweiterung des Adressraums auf 28-Bits und Hinzufügen von Hardware, um bestimmte gemeinsame Funktionen, die im Mikrocode auf dem CADR implementiert wurden, zu beschleunigen. Die LMI-LAMBDA, die ein Jahr nach der 3600 im Jahre 1983 herauskam, war mit dem CADR kompatibel (es könnte CADR microcode ausführen), aber Hardware-Differenzen bestanden. Texas Instruments (TI) trat dem Fray bei, als es das LMI-LAMBDA Design lizenzierte und eine eigene Variante, den TI Explorer, produzierte. Einige der LMI-LAMBDAs und der TI Explorer waren duale Systeme mit einem Lisp und einem Unix-Prozessor. TI entwickelte auch eine 32-Bit-Mikroprozessorversion seiner Lisp CPU für den TI Explorer. Dieser Lisp-Chip wurde auch für den MicroExplorer verwendet – ein NuBus-Board für den Apple Macintosh II (NuBus wurde ursprünglich am MIT für den Einsatz in Lisp-Maschinen entwickelt). Symbolics entwickelte die 3600 Familie und ihr Betriebssystem Genera weiter und produzierte die Ivory, eine VLSI-Implementierung der Symbolik-Architektur. Ab 1987 wurden mehrere Maschinen auf Basis des Ivory-Prozessors entwickelt: Bretter für Sonnen und Macs, Stand-alone-Workstations und sogar Embedded-Systeme (I-Machine Custom LSI, 32-Bit-Adresse, Symbolics XL-400, UX-400, MacIvory II; 1989 verfügbare Plattformen waren Symbolics XL-1200, MacIvory III, UX-1200, Zora, NXP1000"). Texas Instruments schüttelte den Explorer als MicroExplorer in Silizium, der als Karte für den Apple Mac II angeboten wurde. LMI verließ die CADR-Architektur und entwickelte eigene K-Machine, aber LMI ging bankrott, bevor die Maschine auf den Markt gebracht werden konnte. Vor seinem Absturz arbeitete LMI an einem verteilten System für die LAMBDA mit Moby-Raum. Diese Maschinen hatten Hardware-Unterstützung für verschiedene primitive Lisp-Operationen (Datentyp-Tests, CDR-Codierung) und auch Hardware-Unterstützung für inkrementelle Müllsammlung. Sie liefen sehr effizient große Lisp-Programme. Die Symbolik-Maschine war gegen viele kommerzielle Super Minicomputer wettbewerbsfähig, wurde aber nie für konventionelle Zwecke angepasst. Die Symbolics Lisp Machines wurden auch an einige nicht-AI-Märkte wie Computergrafiken, Modellierung und Animation verkauft. Die MIT-derived Lisp-Maschinen liefen einen Lisp Dialekt namens Lisp Machine Lisp, abgeleitet von MIT Maclisp. Die Betriebssysteme wurden von Grund auf in Lisp geschrieben, oft mit objektorientierten Erweiterungen. Später unterstützten diese Lisp-Maschinen auch verschiedene Versionen von Common Lisp (mit Flavors, New Flavors und Common Lisp Object System (CLOS.) Interlisp, BBN und Xerox Bolt, Beranek und Newman (BBN) entwickelten eine eigene Lisp-Maschine namens Jericho, die eine Version von Interlisp lief. Es wurde nie vermarktet. Frustriert, die gesamte KI-Gruppe zurückgetreten und wurden meist von Xerox angeheuert. Das Xerox Palo Alto Research Center hatte also gleichzeitig mit der eigenen Entwicklung des Greenblatts am MIT eigene Lisp-Maschinen entwickelt, die InterLisp (und später Common Lisp) betreiben sollen. Die gleiche Hardware wurde mit unterschiedlicher Software auch als Smalltalk-Maschinen und wie das Xerox Star Bürosystem verwendet. Dazu gehören der Xerox 1100, Dolphin (1979); der Xerox 1132, Dorado; der Xerox 1108, Dandelion (1981); der Xerox 1109, Dandetiger; und der Xerox 1186/6085, Daybreak. Das Betriebssystem der Xerox Lisp-Maschinen wurde auch auf eine virtuelle Maschine portiert und steht für mehrere Plattformen als Produkt namens Medley zur Verfügung. Die Xerox-Maschine war bekannt für ihre fortschrittliche Entwicklungsumgebung (InterLisp-D), den ROOMS-Fenstermanager, seine frühe grafische Benutzeroberfläche und für neue Anwendungen wie NoteCards (eines der ersten Hypertext-Anwendungen). Xerox arbeitete auch an einer Lisp-Maschine auf Basis reduzierter Instruktionsset-Computing (RISC) mit dem "Xerox Common Lisp Processor" und plante, sie bis 1987 auf den Markt zu bringen, was nicht geschah. Integrierte Inferenzmaschinen Mitte der 1980er Jahre bauten Integrierte Inferenzmaschinen (IIM) Prototypen von Lisp-Maschinen namens Inferstar. Entwicklung von Lisp-Maschinen außerhalb der Vereinigten Staaten 1984-85 versuchte ein britisches Unternehmen, Racal-Norsk, eine gemeinsame Tochtergesellschaft von Racal und Norsk Data, Norsk Data ND-500 Supermini als mikrocodierte Lisp-Maschine, laufende CADR-Software: das Wissensverarbeitungssystem (KPS). Es gab mehrere Versuche japanischer Hersteller, in den Lisp-Maschinenmarkt einzusteigen: der Fujitsu Facom-alpha Mainframe Co-Prozessor, NTT's Elis, Toshiba's AI Prozessor (AIP) und NECs LIME. Mehrere Forschungsarbeiten der Universität produzierten Arbeitsprototypen, darunter die TAKITAC-7 der Kobe University, die FLATS der RIKEN und die EVLIS der Osaka University. In Frankreich entstanden zwei Lisp Machine-Projekte: M3L an der Toulouse Paul Sabatier Universität und später MAIA. In Deutschland konzipierte Siemens den RISC-basierten Lisp Co-Prozessor COLIBRI. Ende der Lisp-Maschinen Mit dem Beginn des KI-Winters und den frühen Anfängen der Mikrocomputer-Revolution, die den Minicomputer und Workstation-Hersteller wegfegen würde, könnten billigere Desktop-PCs bald Lisp-Programme noch schneller ausführen als Lisp-Maschinen, ohne Verwendung von speziellen Zweck-Hardware. Ihr High-profit-Marge-Hardware-Geschäft eliminiert, die meisten Lisp-Maschinenbauer waren in den frühen 90er Jahren aus dem Geschäft gegangen, so dass nur softwarebasierte Firmen wie Lucid Inc. oder Hardware-Hersteller, die auf Software und Dienstleistungen umgestellt hatten, um den Crash zu vermeiden. Ab Januar 2015, neben Xerox und TI, ist Symbolics die einzige Lisp Maschinenfirma, die noch arbeitet, den Verkauf der Open Genera Lisp Maschinensoftware Umgebung und das Macsyma Computer Algebra System. LegacySeveral versucht, Open-Source-Emulatoren für verschiedene Lisp-Maschinen wurden gemacht: CADR Emulation, Symbolics L Lisp Machine Emulation, das E3 Project (TI Explorer II Emulation,) Meroko (TI Explorer I,) und Nevermore (TI Explorer I). Am 3. Oktober 2005 veröffentlichte das MIT den CADR Lisp Machine Quellcode als Open Source. Im September 2014, Alexander Burger, Entwickler von PicoLisp, kündigte PilMCU, eine Implementierung von PicoLisp in Hardware. The Bitsavers' PDF Document Archive verfügt über PDF-Versionen der umfangreichen Dokumentation für die Symbolik Lisp-Maschinen, den TI Explorer und MicroExplorer Lisp-Maschinen und die Xerox Interlisp-D Lisp-Maschinen. Anwendungen Domains mit den Lisp-Maschinen waren vor allem im weiten Bereich der künstlichen Intelligenz Anwendungen, aber auch in Computergrafiken, medizinische Bildverarbeitung und viele andere. Die wichtigsten kommerziellen Expertensysteme der 80er Jahre waren verfügbar: Intellicorp's Knowledge Engineering Environment (KEE,) Knowledge Craft, von The Carnegie Group Inc. und ART (Automated Reasoning Tool) von Inference Corporation. Technische Übersicht Ursprünglich wurden die Lisp-Maschinen als persönliche Arbeitsplätze für Softwareentwicklung in Lisp konzipiert. Sie wurden von einer Person verwendet und bot keinen Multi-User-Modus. Die Maschinen lieferten ein großes, schwarzes und weißes Bitmap-Display, Tastatur und Maus, Netzwerkadapter, lokale Festplatten, mehr als 1 MB RAM, serielle Schnittstellen und einen lokalen Bus für Erweiterungskarten. Farbgrafikkarten, Bandlaufwerke und Laserdrucker waren optional. Der Prozessor lief nicht direkt Lisp, sondern war eine Stack-Maschine mit Anweisungen für kompilierte Lisp optimiert. Die frühen Lisp-Maschinen verwendet Mikrocode, um den Befehlssatz bereitzustellen. Für mehrere Operationen wurde die Typkontrolle und die Versendung in Hardware zur Laufzeit durchgeführt. Beispielsweise konnte nur eine Additionsoperation mit verschiedenen numerischen Typen (Integer, Float, rationale und komplexe Zahlen) eingesetzt werden. Das Ergebnis war eine sehr kompakte kompilierte Darstellung von Lisp-Code. Das folgende Beispiel verwendet eine Funktion, die die Anzahl der Elemente einer Liste zählt, für die ein Prädikat wahr wird. Der zerlegte Maschinencode für obige Funktion (für den Elfenbein-Mikroprozessor von Symbolik): Das Betriebssystem nutzte den virtuellen Speicher, um einen großen Adressraum bereitzustellen. Das Gedächtnismanagement wurde mit Müllsammlung durchgeführt. Alle Code teilten einen einzigen Adressraum. Alle Datenobjekte wurden mit einem Tag im Speicher gespeichert, so dass der Typ zu Laufzeit ermittelt werden konnte. Mehrere Ausführungsfäden wurden unterstützt und als Prozesse bezeichnet. Alle Prozesse liefen in einem Adressraum. Alle Betriebssystem-Software wurde in Lisp geschrieben. Xerox verwendet Interlisp. Symbolik, LMI und TI verwendet Lisp Machine Lisp (Descendant von MacLisp). Mit dem Auftreten von Common Lisp, Common Lisp wurde auf den Lisp-Maschinen unterstützt und einige Systemsoftware wurde zu Common Lisp portiert oder später in Common Lisp geschrieben. Einige spätere Lisp-Maschinen (wie der TI MicroExplorer, die Symbolik MacIvory oder die Symbolik UX400/1200) waren nicht mehr komplette Workstations, sondern Boards, die in Host-Computer eingebettet werden sollen: Apple Macintosh II und SUN 3 oder 4.Some Lisp Maschinen, wie die Symbolics XL1200, hatten umfangreiche Grafikfähigkeiten mit speziellen Grafikkarten. Diese Maschinen wurden in Bereichen wie medizinische Bildverarbeitung, 3D-Animation und CAD verwendet. Siehe auch ICAD – Beispiel für wissensbasierte Engineering-Software ursprünglich auf einer Lisp-Maschine entwickelt, die nützlich genug war, um dann über Common Lisp zu Unix Orphaned Technologie Referenzen Allgemeine externe Links Symbolik Website Medley Bitsavers, PDF-Dokumente LMI-Dokumentation MIT CONS-Dokumentation MIT CADR-Dokumentation Lisp Machine Manual, Chinual "The Lisp Machine Manual, 4th Edition, Juli 1981" Eine Reihe von Links und lokal gespeicherten Dokumenten über alle Arten von Lisp-Maschinen "A Few Things I Know About LISP Machines" – Eine Reihe von Links, meist Diskussion über den Kauf von Lisp-Maschinen Ralf Möllers Symbolik Lisp Machine Museum Vintage Computer Festival Bilder von einigen Lisp-Maschinen, eine laufende Genera LISPMACHINE.NET – Lisp Bücher und Informationen Lisp-Maschinen Timeline – eine Zeitleiste von Symbolics' und andere Lisp-Maschinen (auf Französisch) "Présentation Générale du projet M3L" – Ein Konto von französischen Bemühungen in der gleichen Vene Diskussion "Wenn es funktioniert, Es ist nicht KI: Ein kommerzieller Blick auf künstliche Intelligenz Startups" "Symbolics, Inc.:A fail of Heterogenous engineering" – (PDF) "My Lisp Experiences and the Development of GNU Emacs" – Transkript einer Rede von Richard Stallman über Emacs, Lisp und Lisp Maschinen