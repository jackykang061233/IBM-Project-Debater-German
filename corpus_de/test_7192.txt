In der Systemtechnik und Softwaretechnik konzentriert sich die Anforderungsanalyse auf die Aufgaben, die die Anforderungen oder Bedingungen für die Erfüllung des neuen oder geänderten Produkts oder Projekts bestimmen, unter Berücksichtigung der möglicherweise widersprüchlichen Anforderungen der verschiedenen Stakeholder, Analyse, Dokumentation, Validierung und Verwaltung von Software- oder Systemanforderungen. Anforderungen Analyse ist für den Erfolg oder den Ausfall eines Systems oder Software-Projekts kritisch. Die Anforderungen sollten dokumentiert, handlungsfähig, messbar, prüfbar, rückverfolgbar, bezogen auf identifizierte Geschäftsbedürfnisse oder -möglichkeiten, und auf ein für die Systemgestaltung ausreichendes Detail festgelegt werden. Die Anforderungsanalyse umfasst drei Arten von Aktivitäten: Ausweichende Anforderungen: (z.B. die Projektcharta oder Definition) Geschäftsprozessdokumentation und Stakeholder-Interviews. Dies nennt man manchmal auch Anforderungen sammeln oder Anforderungen Entdeckung. Aufzeichnungsanforderungen: Anforderungen können in verschiedenen Formen dokumentiert werden, in der Regel einschließlich einer Zusammenfassungsliste und können natürlichsprachige Dokumente, Anwendungsfälle, Benutzergeschichten, Prozessspezifikationen und eine Vielzahl von Modellen einschließlich Datenmodellen umfassen. Analyse von Anforderungen: Bestimmung, ob die genannten Anforderungen klar, vollständig, unaktuell, präzisiert, gültig, konsistent und eindeutig sind, und Lösung scheinbarer Konflikte. Die Analyse kann auch Größenanforderungen umfassen. Anforderungen Analyse kann ein langer und ermüdender Prozess sein, bei dem viele empfindliche psychologische Fähigkeiten beteiligt sind. Neue Systeme verändern die Umwelt und die Beziehungen zwischen Menschen, so ist es wichtig, alle Akteure zu identifizieren, alle ihre Bedürfnisse zu berücksichtigen und sicherzustellen, dass sie die Auswirkungen der neuen Systeme verstehen. Analysten können mehrere Techniken verwenden, um die Anforderungen des Kunden zu elicit. Dazu gehören die Entwicklung von Szenarien (als Nutzergeschichten in agilen Methoden dargestellt), die Identifizierung von Anwendungsfällen, die Verwendung von Arbeitsplatzbeobachtung oder Ethnographie, Interviews oder Fokusgruppen (in diesem Zusammenhang passender genannt als Anforderungs-Workshops oder Anforderungs-Review-Sitzungen) und die Erstellung von Anforderungslisten. Prototyping kann verwendet werden, um ein Beispielsystem zu entwickeln, das den Interessenvertretern demonstriert werden kann. Gegebenenfalls wird der Analytiker eine Kombination dieser Methoden einsetzen, um die genauen Anforderungen der Stakeholder zu ermitteln, so dass ein System entsteht, das den geschäftlichen Bedürfnissen entspricht. Anforderungen Qualität kann durch diese und andere Methoden Visualisierung verbessert werden. Mit Werkzeugen, die ein besseres Verständnis des gewünschten Endprodukts wie Visualisierung und Simulation fördern. Konsistente Verwendung von Vorlagen. Erstellen einer einheitlichen Reihe von Modellen und Vorlagen, um die Anforderungen zu dokumentieren. Dokumentation von Abhängigkeiten. Dokumentation von Abhängigkeiten und Zusammenhängen unter den Anforderungen sowie von Annahmen und Gemeinden. Anforderungen Analysethemen Stakeholder-Identifikation Siehe Stakeholder-Analyse für eine Diskussion von Personen oder Organisationen (legale Organisationen wie Unternehmen, Normungsgremien), die ein gültiges Interesse am System haben. Sie können direkt oder indirekt davon betroffen sein. Ein neuer Schwerpunkt in den 90er Jahren war die Identifizierung von Interessenvertretern. Es wird zunehmend anerkannt, dass Interessenvertreter nicht auf die Organisation beschränkt sind, die den Analytiker beschäftigt. Andere Akteure werden: jeder, der das System (Normal- und Wartungsbetreiber) betreibt, jeder, der von dem System (funktionale, politische, finanzielle und soziale Begünstigte) profitiert, jeder, der am Kauf oder Beschaffung des Systems beteiligt ist. In einer Massenmarkt-Produktorganisation fungieren Produktmanagement, Marketing und manchmal Vertrieb als surrogate Verbraucher (Massenmarktkunden) um die Entwicklung des Produkts zu leiten. Organisationen, die Aspekte des Systems (Finanz-, Sicherheits- und andere Regulierungsbehörden) Personen oder Organisationen, die gegen das System (negative Interessenvertreter; siehe auch Misuse Fall) Organisationen regeln, die für Systeme verantwortlich sind, die mit dem System unter Design verbinden. die Organisationen, die horizontal in die Organisation integrieren, für die der Analytiker das System entwickelt. Gemeinsame Anforderungen Entwicklung (JRD)Sessionsvoraussetzungen haben oft funktionsübergreifende Implikationen, die den einzelnen Stakeholdern unbekannt sind und bei Stakeholder-Interviews oft übersehen oder unvollständig definiert sind. Diese funktionsübergreifenden Implikationen lassen sich durch die Durchführung von JRD-Sitzungen in einer kontrollierten Umgebung auslösen, die von einem geschulten Moderator (Business Analyst) erleichtert wird, in dem die Interessenvertreter an Diskussionen teilnehmen, um Anforderungen zu lösen, ihre Details zu analysieren und funktionsübergreifende Implikationen aufzudecken.Ein engagierter Schreiber sollte anwesend sein, um die Diskussion zu dokumentieren und den Business Analyst zu befreien, um die Diskussion in eine Richtung zu führen, die entsprechende Anforderungen generiert, die das Sitzungsziel erfüllen. JRD Die Sitzungen sind analog zu den gemeinsamen Anwendungsdesign-Sessions. In der ersten, die Sitzungen elicit Anforderungen, die Design führen, während Letztere elicit die spezifischen Design-Features zu implementieren in der Zufriedenheit der elicited Anforderungen. Anforderungslisten im Vertragsstil Eine traditionelle Art der Dokumentation der Anforderungen war die Anforderungslisten im Vertragsstil. In einem komplexen System können solche Anforderungslisten auf Hunderte von Seiten lang laufen. Eine entsprechende Metapher wäre eine extrem lange Einkaufsliste. Solche Listen sind in der modernen Analyse sehr unzumutbar; sie haben sich als spektakulär erfolglos erwiesen, um ihre Ziele zu erreichen; aber sie sind bis heute noch zu sehen. Stärken Bietet eine Checkliste der Anforderungen. Geben Sie einen Vertrag zwischen dem Projektträger und Entwicklern. Für ein großes System kann eine hochgradige Beschreibung zur Verfügung gestellt werden, aus der die Anforderungen auf niedrigerem Niveau abgeleitet werden können. Schwachstellen Solche Listen können auf Hunderte von Seiten laufen. Sie sollen nicht als leserfreundliche Beschreibung der gewünschten Anwendung dienen. Solche Anforderungen listet alle Anforderungen ab und so gibt es wenig Kontext. Der Business Analyst kann Kontext für Anforderungen in der begleitenden Designdokumentation enthalten. Diese Abstraktion soll nicht beschreiben, wie die Anforderungen zusammenpassen oder zusammenarbeiten. Die Liste darf keine Beziehungen und Abhängigkeiten zwischen den Anforderungen widerspiegeln. Während eine Liste es einfach macht, jedes einzelne Element zu priorisieren, kann das Entfernen eines Gegenstands aus dem Kontext einen gesamten Anwendungsfall oder Geschäftsbedarf unbrauchbar machen. Die Liste supplant nicht die Notwendigkeit, die Anforderungen sorgfältig mit Stakeholdern zu überprüfen, um ein besseres gemeinsames Verständnis der Auswirkungen auf die Gestaltung des gewünschten Systems / Anwendung zu gewinnen. Die Erstellung einer Liste garantiert nicht ihre Vollständigkeit. Der Business Analyst muss einen guten Glauben an die Entdeckung und Sammlung einer im Wesentlichen umfassenden Liste machen und sich auf Stakeholder verlassen, um fehlende Anforderungen zu zeigen. Diese Listen können ein falsches Gefühl für gegenseitiges Verständnis zwischen den Akteuren und Entwicklern schaffen; Business Analysten sind für den Übersetzungsprozess kritisch. Es ist fast unmöglich, alle funktionellen Anforderungen aufzudecken, bevor der Prozess der Entwicklung und Prüfung beginnt. Werden diese Listen als unveränderlicher Vertrag behandelt, so können Anforderungen, die im Entwicklungsprozess entstehen, eine umstrittene Änderungsanforderung erzeugen. Alternative zu Anforderungslisten Als Alternative zu Anforderungslisten nutzt Agile Software Development User-Storys, um Anforderungen in der Alltagssprache vorzuschlagen. Messbare Ziele Best Practices nehmen die komponierte Liste der Anforderungen nur als Hinweise und fragen immer wieder, warum?"bis die eigentlichen Geschäftszwecke entdeckt werden. Stakeholder und Entwickler können dann Tests entwickeln, um zu messen, welche Höhe jedes Ziels bisher erreicht wurde. Solche Ziele ändern sich langsamer als die lange Liste spezifischer, aber ungemessener Anforderungen. Sobald eine kleine Reihe von kritischen, gemessenen Zielen festgelegt worden ist, können schnelle Prototyping- und kurze iterative Entwicklungsphasen den tatsächlichen Stakeholder-Wert lange vor dem Projekt halbieren. Prototypen Ein Prototyp ist ein Computerprogramm, das einen Teil der Eigenschaften eines anderen Computerprogramms aufweist, so dass Benutzer eine noch nicht aufgebaute Anwendung visualisieren können. Eine beliebte Form von Prototypen ist ein Mockup, das den zukünftigen Benutzern und anderen Akteuren hilft, eine Vorstellung davon zu bekommen, wie das System aussehen wird. Prototypen erleichtern Designentscheidungen, da Aspekte der Anwendung vor der Erstellung der Anwendung gesehen und geteilt werden können. Viele Verbesserungen der Kommunikation zwischen Benutzern und Entwicklern wurden oft mit der Einführung von Prototypen gesehen. Frühere Ansichten der Anwendungen führten später zu weniger Veränderungen und reduzierten damit die Gesamtkosten erheblich. Prototypen können flache Diagramme (oft als Drahtrahmen bezeichnet) oder Arbeitsanwendungen mit synthetisierter Funktionalität sein. Wireframes werden in einer Vielzahl von grafischen Design-Dokumenten gemacht und entfernen oft alle Farbe aus dem Design (d.h. verwenden Sie eine graue Farbpalette) in Fällen, in denen die endgültige Software erwartet wird, dass sie Grafikdesign angewendet haben. Dies hilft, Verwirrung zu verhindern, ob der Prototyp das endgültige visuelle Aussehen und das Gefühl der Anwendung darstellt.Anwendungsfälle Ein Anwendungsfall ist eine Struktur zur Dokumentation der Funktionsanforderungen für ein System, in der Regel mit Software, ob das neu oder geändert ist. Jeder Anwendungsfall bietet eine Reihe von Szenarien, die vermitteln, wie das System mit einem menschlichen Benutzer oder einem anderen System interagieren sollte, um ein bestimmtes Geschäftsziel zu erreichen. Verwenden Sie Fälle typischerweise vermeiden technisches Jargon, lieber die Sprache des Endbenutzers oder Domain-Experten. Anwendungsfälle werden oft von Anforderungsingenieuren und Stakeholdern mitautorisiert. Anwendungsfälle sind annehmbar einfache Werkzeuge zur Beschreibung des Verhaltens von Software oder Systemen. Ein Anwendungsfall enthält eine textuelle Beschreibung der Möglichkeiten, wie Nutzer mit der Software oder dem System arbeiten sollen. Die Anwendung von Fällen sollte keine internen Arbeiten des Systems beschreiben, noch sollten sie erklären, wie dieses System umgesetzt wird. Stattdessen zeigen sie die notwendigen Schritte, um eine Aufgabe ohne sequentielle Annahmen durchzuführen. Spezifikationen Anforderungen Spezifikation Anforderungen ist die Synthese von Entdeckungsergebnissen über aktuelle staatliche Geschäftsanforderungen und die Bewertung dieser Bedürfnisse zu bestimmen und zu präzisieren, was erforderlich ist, um die Bedürfnisse im Rahmen der Lösung im Fokus zu erfüllen. Entdeckung, Analyse und Spezifikation bewegen das Verständnis von einem aktuellen Zustand in einen zukünftigen Zustand. Anforderungen Spezifikation kann die volle Breite und Tiefe des zukünftigen Zustands zu realisieren, oder es könnte gezielt bestimmte Lücken zu füllen, wie Priorität Software-System Fehler zu beheben und Verbesserungen zu machen. Da jeder große Geschäftsprozess fast immer Software- und Datensysteme und -technologie verwendet, ist die Anforderungsspezifikation oft mit Software-Systemaufbau, Einkaufen, Cloud Computing-Strategien, eingebetteter Software in Produkte oder Geräte oder anderen Technologien verbunden. Die umfassendere Definition der Anforderungsspezifikation umfasst oder konzentriert sich auf jede Lösungsstrategie oder Komponente, wie Schulung, Dokumentationsführer, Personal, Marketingstrategien, Ausrüstung, Lieferungen usw. Arten von Anforderungen sind auf verschiedene Arten kategorisiert. Die folgenden sind gemeinsame Kategorisierungen der Anforderungen, die sich auf das technische Management beziehen: Aussagen von Tatsachen und Annahmen, die die Erwartungen des Systems in Bezug auf Missionsziele, Umwelt, Zwänge und Maßnahmen der Effektivität und Eignung (MOE/MOS) definieren. Die Kunden sind diejenigen, die die acht primären Funktionen der Systemtechnik ausführen, mit besonderem Schwerpunkt auf dem Betreiber als Schlüsselkunden. Die betrieblichen Anforderungen definieren den Grundbedarf und beantworten mindestens die in der folgenden Liste aufgeführten Fragen: Operationelle Verteilung oder Bereitstellung: Wo wird das System eingesetzt? Missionsprofil oder Szenario: Wie wird das System sein Ziel erreichen? Leistung und damit verbundene Parameter: Was sind die kritischen Systemparameter, um die Mission zu erreichen? Nutzungsumgebungen: Wie sind die verschiedenen Systemkomponenten zu verwenden? Effektivitätsanforderungen: Wie effektiv oder effizient muss das System seine Mission durchführen? Betriebslebenszyklus: Wie lange wird das System vom Benutzer genutzt? Umwelt: Welche Umgebungen wird erwartet, dass das System effektiv arbeitet? Architekturanforderungen Die architektonischen Anforderungen erklären, was getan werden muss, indem die notwendige Systemarchitektur eines Systems identifiziert wird. Strukturanforderungen Strukturelle Anforderungen erklären, was getan werden muss, indem die notwendige Struktur eines Systems identifiziert wird. Verhaltensanforderungen Verhaltensanforderungen erklären, was getan werden muss, indem das notwendige Verhalten eines Systems identifiziert wird. Funktionsanforderungen Funktionelle Anforderungen erklären, was getan werden muss, indem die notwendige Aufgabe, Aktion oder Aktivität, die durchgeführt werden muss. Funktionelle Anforderungsanalyse wird als Toplevel-Funktionen für die Funktionsanalyse verwendet. Nichtfunktionale Anforderungen Nicht-funktionale Anforderungen sind Anforderungen, die Kriterien festlegen, mit denen der Betrieb eines Systems beurteilt werden kann, anstatt bestimmte Verhaltensweisen. Leistungsanforderungen Das Ausmaß, in dem eine Mission oder Funktion ausgeführt werden muss; in der Regel gemessen an Menge, Qualität, Deckung, Aktualität oder Bereitschaft. Während der Anforderungsanalyse werden die Anforderungen an die Leistung (wie gut getan werden muss) interaktiv über alle identifizierten Funktionen auf der Grundlage von Systemlebenszyklusfaktoren entwickelt und in Bezug auf den Grad der Sicherheit in ihrer Schätzung, den Grad der Kritik am Systemerfolg und ihre Beziehung zu anderen Anforderungen charakterisiert.Anforderungen an die Gestaltung Die "Build to", "code to" und "Buy to" Anforderungen an Produkte und "How to execution" Anforderungen an Prozesse, die in technischen Datenpaketen und technischen Handbüchern ausgedrückt werden. Abgeleitete Anforderungen Anforderungen, die implizit oder aus höheren Anforderungen transformiert werden. Beispielsweise kann ein Bedarf an langer Reichweite oder hoher Geschwindigkeit zu einem Designbedarf für geringes Gewicht führen. Allokierte Anforderungen Eine Anforderung, die durch die Aufteilung oder anderweitige Zuordnung einer hochrangigen Anforderung in mehrere untergeordnete Anforderungen festgelegt wird. Beispiel: Ein 100-Pfund-Element, das aus zwei Subsystemen besteht, kann zu Gewichtsanforderungen von 70 Pfund und 30 Pfund für die beiden niedrigeren Positionen führen. Bekannte Anforderungen Kategorisierungsmodelle sind FURPS und FURPS,+ entwickelt bei Hewlett-Packard. Anforderungen Analyse Probleme Stakeholder stellt Steve McConnell, in seinem Buch Rapid Development, Details eine Reihe von Möglichkeiten, wie Benutzer Anforderungen sammeln hemmen können: Benutzer verstehen nicht, was sie wollen oder Benutzer haben keine klare Vorstellung von ihren Anforderungen Benutzer verpflichten sich nicht zu einer Reihe von schriftlichen Anforderungen Benutzer bestehen auf neuen Anforderungen, nachdem die Kosten und Zeitplan festgelegt worden sind Kommunikation mit Benutzern ist langsam Benutzer oft nicht an Bewertungen teilnehmen oder sind nicht in der Lage, dies zu tun Benutzer sind technisch ungebildet Benutzer nicht verstehen den Entwicklungsprozess Benutzer nicht wissen über die aktuelle Technologie Dies kann dazu führen, dass sich die Benutzeranforderungen auch beim Start der System- oder Produktentwicklung ändern. Ingenieur- und Entwicklerfragen Mögliche Probleme, die von Ingenieuren und Entwicklern während der Anforderungsanalyse verursacht werden, sind: Eine natürliche Neigung zum Schreibcode kann zu der Umsetzung beginnen, bevor die Anforderungsanalyse abgeschlossen ist, was zu Codeänderungen führt, um die tatsächlichen Anforderungen zu erfüllen, sobald sie bekannt sind. Technisches Personal und Endbenutzer können unterschiedliche Vokabeln haben. Folglich können sie falsch glauben, dass sie in vollkommener Übereinstimmung sind, bis das fertige Produkt geliefert wird. Ingenieure und Entwickler können versuchen, die Anforderungen an ein bestehendes System oder Modell anzupassen, anstatt ein System zu entwickeln, das speziell auf die Bedürfnisse des Kunden. Geschätzte Lösungen Eine Lösung für Kommunikationsprobleme war es, Spezialisten in der Unternehmens- oder Systemanalyse einzusetzen. In den 1990er Jahren eingeführte Techniken wie Prototyping, Unified Modeling Language (UML), Anwendungsfälle und agile Softwareentwicklung sind auch als Lösungen für Probleme gedacht, die mit früheren Methoden zu tun haben. Auch eine neue Klasse von Anwendungssimulations- oder Anwendungsdefinitionstools sind in den Markt eingetreten. Diese Tools sollen die Kommunikationslücke zwischen Geschäftsnutzern und der IT-Organisation überbrücken – und auch Anwendungen vor der Erstellung eines Codes "test market" ermöglichen. Die besten dieser Tools bieten: elektronische Whiteboards, um Anwendungsflüsse zu skizzieren und Alternativen zu testen, die die Fähigkeit zur Erfassung von Geschäftslogik und Daten benötigen, hohe Treue-Prototypen zu erzeugen, die die Endanwendungsinteraktivitäts genau nachahmen, um kontextuelle Anforderungen und andere Kommentarfähigkeiten für Remote- und verteilte Anwender zu ergänzen und mit der Simulation zu interagieren.