Software Wartung im Software-Engineering ist die Änderung eines Softwareprodukts nach Lieferung, um Fehler zu korrigieren, Leistung oder andere Eigenschaften zu verbessern. Eine gemeinsame Wahrnehmung der Wartung ist, dass es lediglich Mängel bei der Festsetzung von Mängeln beinhaltet. In einer Studie wurde jedoch festgestellt, dass über 80 % der Wartungsbemühungen für nicht-korrigative Maßnahmen verwendet werden. Diese Wahrnehmung wird von Nutzern, die problematische Berichte vorlegen, bestätigt, dass in Wirklichkeit funktionelle Verbesserungen des Systems sind. Mehr neuere Studien legen den Fehleranteil näher an 21%. Geschichte Software Wartung und Entwicklung der Systeme wurden erstmals von Meir M. Lehman im Jahr 1969 angesprochen. Über einen Zeitraum von zwanzig Jahren führte seine Forschung zur Formulierung der Lehman-Gesetze (Lehman 1997). Kernergebnisse seiner Forschung kommen zu dem Schluss, dass die Wartung wirklich entwicklungsorientiert ist und dass Unterhaltsentscheidungen durch das Verständnis der Systeme (und Software) im Laufe der Zeit unterstützt werden. Lehman zeigte, dass sich die Systeme im Laufe der Zeit weiter entwickeln. Da sie sich weiterentwickeln, wachsen sie komplexer, es sei denn, einige Maßnahmen wie Code-Reformierung werden ergriffen, um die Komplexität zu verringern. Ende der siebziger Jahre hat eine bekannte und weithin erwähnte Umfragestudie von Lientz und Swanson den sehr hohen Anteil der Lebenszykluskosten ausgesetzt, die auf Wartung ausgeschrieben wurden. Laut der Umfrage waren rund 75 % der Wartungsbemühungen auf den ersten beiden Arten und die Fehlerkorrektur um 21 %. In vielen weiteren Studien wird ein ähnliches Problem Größenordnung vorgeschlagen. Studien zeigen, dass der Beitrag der Endnutzer während der neuen Datensammlung und -analyse von entscheidender Bedeutung ist. Dies ist die Hauptursache jedes Problems während der Entwicklung und Wartung von Software. Softwarewartung ist wichtig, weil sie einen großen Teil der Lebenszykluskosten verbraucht und auch die Unfähigkeit, Software schnell und zuverlässig zu ändern, bedeutet, dass Geschäftsmöglichkeiten verloren gehen. Importe von Software Wartung Die wichtigsten Software-Erhaltungsprobleme sind sowohl auf Führungsebene als auch auf technischer Ebene. Schlüsselverwaltungsfragen sind: Angleichung an die Kundenprioritäten, Personalausstattung, die Organisation behält Wartung, Kosteneinschätzung. Kernpunkte sind: begrenztes Verständnis, Folgenabschätzung, Prüfung, Haltbarkeit. Software Wartung ist eine sehr breite Tätigkeit, die Fehlerkorrektur, Verbesserung der Fähigkeiten, Löschung veralteter Fähigkeiten und Optimierung umfasst. Da Änderungen unvermeidlich sind, müssen Mechanismen für die Bewertung, Kontrolle und Änderung entwickelt werden. Jegliche Arbeiten zur Änderung der Software nach ihrer Inbetriebnahme gelten daher als Instandhaltungsarbeiten. Zweck ist es, den Wert der Software im Laufe der Zeit zu erhalten. Der Wert lässt sich dadurch erhöhen, dass die Kundenbasis erweitert wird, zusätzliche Anforderungen erfüllt, einfacher genutzt, effizienter und neuer Technologien eingesetzt werden. Wartung kann für 20 Jahre gelten, während die Entwicklung 1–2 Jahre beträgt. Software Wartungsplanung Ein integraler Bestandteil der Software ist die Wartung, die während der Softwareentwicklung einen genauen Wartungsplan benötigt. Man sollte angeben, wie die Nutzer Änderungen verlangen oder Probleme melden. Mittel- und Kostenvoranschläge sollten berücksichtigt werden, und eine neue Entscheidung sollte für die Entwicklung jedes neuen Systems und seiner Qualitätsziele gerichtet werden. Die Software-Erhaltung, die für 5+ Jahre (oder sogar Jahrzehnte) nach dem Entwicklungsprozess dauern kann, erfordert einen wirksamen Plan, der den Umfang der Softwarewartung, die Anpassung des Nachtrags-/Beschäftigungsvorgangs, die Benennung der Wartungsarbeiten und die Schätzung der Lebenszykluskosten berücksichtigen kann. Wartung von Software In diesem Abschnitt werden die sechs Software-Erhaltungsverfahren beschrieben, wie: Der Durchführungsprozess umfasst Software-Vorbereitung und -Übergang, wie die Konzeption und Erstellung des Wartungsplans, die Vorbereitung auf die während der Entwicklung ermittelten Probleme und die Folgemaßnahmen zur Produktkonfiguration. Problem- und Änderungsanalyseverfahren, die ausgeführt werden, sobald der Antrag zur Verantwortung der Wartungsgruppe geworden ist. Er muss jeden Antrag analysieren, bestätigen (um die Situation zu verbessern) und prüfen, ob es gültig ist, untersuchen und eine Lösung vorschlagen, den Antrag und den Lösungsvorschlag dokumentieren und schließlich alle erforderlichen Genehmigungen für die Anwendung der Änderungen erhalten. In Erwägung der Umsetzung der Änderung selbst. Annahme der Änderung durch Bestätigung der geänderten Arbeit mit dem einzelnen, der den Antrag gestellt hat, um sicherzustellen, dass die Änderung eine Lösung darstellt. Der Migrationsprozess (Plattform Migration, z.B.) ist außergewöhnlich und ist nicht Teil der täglichen Wartung. Wenn die Software ohne Änderung der Funktionalität auf eine andere Plattform übertragen werden muss, wird dieser Prozess genutzt, und ein Wartungsprojektteam wird wahrscheinlich dieser Aufgabe zugewiesen. Letztlich ist der letzte Wartungsprozess, auch eine Veranstaltung, die nicht täglich stattfindet, der Ruhestand einer Software. Es gibt eine Reihe von Prozessen, Aktivitäten und Praktiken, die einzigartig sind, um die Bewahrer zu halten, z.B.: Übergang: Eine kontrollierte und koordinierte Reihe von Tätigkeiten, bei denen ein System schrittweise von dem Entwickler auf die Wartungsvereinbarungen (SLA) und spezialisierten (bereichsspezifischen) Wartungsverträge übertragen wird, die von Wartungs- und Problemlösungsbeauftragten ausgehandelt wurden: ein Problemlösungsprozess, der von den Wartungsinhabern verwendet wird, um Prioritäten zu setzen, Dokument zu dokumentieren und die Anträge, die sie Kategorien der Software-Erhaltung E.B Swanson erhalten, nannten zunächst drei Arten von Wartungs-, Berichtigungs-, Anpassungs- und perfektem Service. L 1219 wurde im Juni 2010 durch P14764 ersetzt. Diese wurden inzwischen aktualisiert und ISO/IEC 14764 präsentiert: Korrektur der Wartung: Reaktive Änderung eines Software-Produkts, das nach Lieferung durchgeführt wurde, um die festgestellten Probleme zu korrigieren. Korrektive Wartung kann mit automatischer Bugfestsetzung automatisiert werden. Anpassungsfähigkeit: Änderung eines Softwareprodukts nach Lieferung, um ein Software-Produkt in einem veränderten oder sich verändernden Umfeld zu halten. Lesbarkeit: Änderung eines Software-Produkts nach Lieferung, um die Leistungsfähigkeit oder die Wartung zu verbessern. präventive Wartung: Änderung eines Softwareprodukts nach Lieferung, um Fehler im Software-Produkt zu erkennen und zu korrigieren, bevor sie wirksame Fehler werden. Es gibt auch einen Begriff der Vor-Lieferung/Vor-Freisetzung, der alle guten Dinge ist, um die Gesamtkosten der Eigentumsverhältnisse der Software zu senken. Dinge wie die Einhaltung von Programmiernormen, die auch die Ziele der Software-Nachhaltigkeit umfassen. Verwaltung der Kupplung und des Zusammenhalts der Software. Ziele der Softwareunterstützung (SAE JA1004, JA1005 und JA1006). Manche wissenschaftliche Einrichtungen führen Forschung durch, um die Kosten für die laufende Software-Erhaltung zu quantifizieren, da es keine Ressourcen wie Entwurfsunterlagen und System-/Software-Einführungs- und Ressourcenmangel gibt (multiply cost by ca.1.5-2.0, wo keine Daten verfügbar sind). Unterhaltsfaktoren Auswirkungen wichtiger Anpassungsfaktoren auf die Wartung (konsortiert nach maximal positiven Auswirkungen) Nicht nur Fehler-prone-Modulen sind unproblematisch, aber viele andere Faktoren können auch die Leistung beeinträchtigen. Beispielsweise ist ein sehr komplexer Spaghetti-Code sehr schwierig, um sicher zu bleiben. Eine sehr gemeinsame Situation, die die Leistung häufig beeinträchtigt, fehlt es an geeigneten Wartungsinstrumenten, wie z.B. Fehlerverfolgungssoftware, Veränderung der Managementsoftware und Prüfung der Bibliothekssoftware. Nachstehend werden einige der Faktoren und die Bandbreite der Auswirkungen auf die Softwarewartung beschrieben. Auswirkungen wichtiger Anpassungsfaktoren auf die Wartung (konsortiert nach maximalen negativen Auswirkungen) Unterhaltsschuld In einem Papier für die 27. Internationale Konferenz zum Thema Softwarequalitätsmanagement im Jahr 2019 hat John Estdale den Begriff „Grundschuldverschuldung“ für Unterhaltsanforderungen eingeführt, der durch die Abhängigkeit von externen IT-Faktoren wie Bibliotheken, Plattformen und Werkzeugen, die sich als obsolet erwiesen haben. Nach wie vor läuft der Antrag, und die IT-Abteilung vergessen diese theoretische Haftung und konzentriert sich auf dringendere Anforderungen und Probleme in anderen Bereichen. Eine solche Verschuldung akkumuliert sich über die Zeit, weigern Sie sich auf den Wert des Softwarevermögens. Letztlich geschieht etwas, das System unumgänglich macht. Der Eigentümer kann dann feststellen, dass das System nicht mehr geändert werden kann – es ist unhaltbar. Weniger dramatisch kann es zu lange dauern oder zu viel kosten, um das Geschäftsproblem zu lösen, und eine alternative Lösung muss gefunden werden. Die Software ist plötzlich auf £0 gesunken. Estdale definiert „Maintenance Debt“ als: die Kluft zwischen dem aktuellen Umsetzungszustand eines Antrags und dem Ideal, wobei nur die Funktionalität externer Komponenten genutzt wird, die vollständig erhalten und unterstützt werden. Dieser Schuldenstand ist oft versteckt oder nicht anerkannt. Die allgemeine Aufrechterhaltungsfähigkeit eines Antrags hängt von der anhaltenden Erlangbarkeit aller Komponenten aller Art von Lieferanten ab, einschließlich: Entwicklungsinstrumente: Zusammenstellung, Zusammenstellung und Aufbau von Testwerkzeugen: Testauswahl, Ausführung/Verwertung/reporting-Plattformen, um die oben genannten auszuführen: Hardware, Betriebssystem und andere Dienstleistungen Produktionsumfeld sowie alle Bereitschafts-/Disaster-Rehabilitationseinrichtungen, einschließlich der Entwicklungscode-Sprache’sRun-Time Support Environment, und das breitere Ökosystem der Jobplanung, Übertragung von Dateien, Weiterverfolgung, Back- und Archiv, Ein-on usw. getrennt erworbene Pakete, z.B. DBMS, Grafik, lobt, Middleware Bought in Sourcecode, Objektcodebibliotheken und andere unwiderrufliche Dienste Anforderungen, die sich aus anderen Anwendungen ergeben, die das Produktionsumfeld teilen oder mit dem betreffenden Antrag und natürlich Verfügbarkeit relevanter Fähigkeiten, intern oder auf dem Markt. Die vollständige Auflösung einer Komponente könnte die Anwendung unaufwendig oder unerheblich unhaltbar machen. Siehe auch die Anwendung des Renten Journal of Software Maintenance and Evolution: Forschung und Praxis Langfristige Unterstützung auf Basis von Software Engineering Software Archaeology Software Buildinger Software Weiterentwicklung Referenzen ISO/IEC 14764IEEE-1464-2006 Software Engineering – Software Lifezyklus-Prozesse – Wartung. 2006 doi:10.1109/IEEESTD.2006.235774.ISBN 4960-8.Pigoski, Thomas M. (1996). Praktische Wartungssoftware. New York: John Kuhn & Sons.ISBNUNG DES0-471-17001-3.Pigoski, Thomas M. Beschreibung für Softwareentwicklung und Wartung (Version 0,5). SWEBOK Knowledge Area.April, Alain; Abran, Alain (2008). Software Wartungsmanagement. New York: Julius-IEEE.ISBN UV0-470-14707-8.Gopalaswamy Ramesh; Ramesh Hottiprolu (2006). Wartung der Software: wirksame Praktiken für geografisch verteilte Umgebungen. Neu-Delhi: Tata McGraw-Hill.ISBN, DIE0-07-048345-3.Grubb, Penny; Takang, Armstrong (2003). Wartung der Software. New Jersey: World Scientific Publishing.ISBN gegen 981-238-425-6.Lehman, M.M.; Belady, L.A 1985. Programmentwicklung: Prozesse des Softwarewechsels. London: Science Press Inc. ISBN 0-12-442441-4.Page-Jones, Meilir (2014) Leitfaden für Strukturierte Systeme Design. New York: Ihre Presse. ISBN 0-917072-17-0. Externe Links Journal of Software Maintenance