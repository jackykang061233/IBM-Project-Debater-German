In Logik, Mathematik, Informatik und Linguistik besteht eine formale Sprache aus Wörtern, deren Buchstaben aus einem Alphabet genommen werden und nach einem bestimmten Satz von Regeln gut formuliert sind. Das Alphabet einer formalen Sprache besteht aus Symbolen, Buchstaben oder Zeichen, die in Zeichenketten der Sprache einfassen. Jeder aus Symbolen dieses Alphabets zusammengefügte String wird als Wort bezeichnet, und die Wörter, die einer bestimmten formalen Sprache angehören, werden manchmal gut formulierte Wörter oder gut formulierte Formeln genannt. Eine formale Sprache wird oft durch eine formale Grammatik wie eine regelmäßige Grammatik oder kontextfreie Grammatik definiert, die aus ihren Formationsregeln besteht. Der Bereich der formalen Sprachtheorie untersucht vor allem die rein syntaktischen Aspekte solcher Sprachen, d.h. ihre internen Strukturmuster. Die formale Sprachtheorie sprang aus Linguistik, als Weg, die syntaktischen Regelmäßigkeiten der natürlichen Sprachen zu verstehen. In der Informatik werden unter anderem formale Sprachen als Grundlage zur Definition der Grammatik der Programmiersprachen und formalisierten Versionen von Untergruppen natürlicher Sprachen verwendet, in denen die Wörter der Sprache Begriffe darstellen, die mit bestimmten Bedeutungen oder Semantiken verbunden sind. In der Berechnungskomplexitätstheorie werden typischerweise Entscheidungsprobleme als formale Sprachen definiert, und Komplexitätsklassen sind definiert als die Sätze der formalen Sprachen, die von Maschinen mit begrenzter Rechenleistung parsiert werden können. In der Logik und den Grundlagen der Mathematik werden formale Sprachen verwendet, um die Syntax der axiomatischen Systeme zu repräsentieren, und der mathematische Formalismus ist die Philosophie, dass alle Mathematik auf diese Weise auf die syntaktische Manipulation der formalen Sprachen reduziert werden kann. Geschichte Die erste Verwendung der formalen Sprache wird als Gottlob Freges 1879 Begriffsschrift gedacht, was "Begriffsschrift" bedeutet, die eine "formale Sprache der reinen Sprache" beschreibt. Das frühe Semi-Thue-System von Axel Thue, das zum Nachschreiben von Strings verwendet werden kann, war auf formale Grammatiken einflussreich. Wörter über ein Alphabet Ein Alphabet kann im Kontext formaler Sprachen beliebig sein, obwohl es oft sinnvoll ist, ein Alphabet im üblichen Sinne des Wortes zu verwenden, oder allgemeiner ein Zeichensatz wie ASCII oder Unicode. Die Elemente eines Alphabets werden als Buchstaben bezeichnet. Ein Alphabet kann eine unendliche Anzahl von Elementen enthalten; die meisten Definitionen in der formalen Sprachtheorie geben Alphabete mit einer endlichen Anzahl von Elementen an, und die meisten Ergebnisse gelten nur für sie. Ein Wort über ein Alphabet kann jede endliche Folge (d.h. Zeichenkette) von Buchstaben sein. Der Satz aller Wörter über ein Alphabet Σ ist in der Regel mit Σ* (mit dem Kleenstern) bezeichnet. Die Länge eines Wortes ist die Anzahl der Buchstaben, aus denen es zusammengesetzt ist. Für jedes Alphabet gibt es nur ein Wort der Länge 0, das leere Wort, das oft mit e, ε, λ oder sogar Λ bezeichnet wird. Durch Verkettung kann man zwei Wörter zu einem neuen Wort kombinieren, dessen Länge die Summe der Längen der ursprünglichen Wörter ist. Das Ergebnis, ein Wort mit dem leeren Wort zu schlagen, ist das ursprüngliche Wort. In einigen Anwendungen, insbesondere in der Logik, ist das Alphabet auch als Vokabular bekannt und Wörter sind als Formeln oder Sätze bekannt; dies bricht die Buchstaben/Wort-Metaphor und ersetzt sie durch eine Wort/Sentenz-Metaphore. Begriff Eine formale Sprache L über ein Alphabet Σ ist eine Untermenge von Σ*, d.h. ein Satz von Wörtern über dieses Alphabet. Manchmal werden die Sätze der Worte in Ausdrücke gruppiert, während Regeln und Zwänge für die Schaffung von "gutgeformten Ausdrücken" formuliert werden können. In der Informatik und Mathematik, die in der Regel nicht mit natürlichen Sprachen behandelt werden, wird das Adjektiv formal oft als redundant weggelassen. Während die formale Sprachtheorie sich in der Regel mit formalen Sprachen befasst, die durch einige syntaktische Regeln beschrieben werden, ist die eigentliche Definition des Begriffs "formale Sprache" nur wie oben: ein (möglicherweise unendliches) Satz von endlichen Strings aus einem bestimmten Alphabet, nicht mehr und nicht weniger. In der Praxis gibt es viele Sprachen, die durch Regeln wie reguläre Sprachen oder kontextfreie Sprachen beschrieben werden können. Die Vorstellung einer formalen Grammatik kann dem intuitiven Konzept einer Sprache näher sein, die durch syntaktische Regeln beschrieben wird. Durch einen Missbrauch der Definition wird oft eine bestimmte formale Sprache als mit einer formalen Grammatik ausgestattet gedacht, die sie beschreibt. Beispiele Die folgenden Regeln beschreiben eine formale Sprache L über das Alphabet Σ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, }:= Jeder Leerzeichen, der nicht "+" oder "=" enthält und nicht mit 0 beginnt, ist in L. Der String 0 ist in L. Ein String mit "=" ist in L, wenn und nur, wenn es genau ein "=" gibt, und es trennt zwei gültige Strings von L. Ein String mit "+" aber nicht "=" ist in L, wenn und nur, wenn jeder "+" in der String zwei gültige Strings von L trennt. Keine Zeichenfolge ist in L anders als die zuvor genannten Regeln. Unter diesen Regeln ist der String 23+4=555 in L, aber der String 234+ ist nicht. Diese formale Sprache drückt natürliche Zahlen, gut gebildete Ergänzungen und gut gebildete Additionsgleichheiten aus, aber sie drückt nur aus, wie sie aussehen (ihre Syntax,) nicht, was sie bedeuten (Semantik). Bei diesen Regeln gibt es z.B. keinen Hinweis, dass 0 die Zahl Null bedeutet, "+" Addition bedeutet, 23+4=555 falsch ist, etc. Baugewerbe Für endliche Sprachen kann man explizit alle gut formulierten Wörter aufzählen. Zum Beispiel können wir eine Sprache L wie nur L = {a, b, ab, cba} beschreiben. Der degenerierte Fall dieser Konstruktion ist die leere Sprache, die überhaupt keine Wörter enthält (L = ξ). Aber auch über ein endliches (nicht leeres) Alphabet wie Σ = {a, b} gibt es eine unendliche Anzahl von endlichen Wörtern, die möglicherweise ausgedrückt werden können: a, abb, ababba, aaabbbbaab, .... Daher sind formale Sprachen typischerweise unendlich, und die Beschreibung einer unendlichen formalen Sprache ist nicht so einfach wie das Schreiben L = {a, b, ab, cba}. Hier sind einige Beispiele für formale Sprachen: L = Σ*, der Satz aller Wörter über Σ; L = {a}* = {an}, wobei n über die natürlichen Zahlen und ein Mittel eine wiederholte n-mal (das ist der Satz von Wörtern, die nur aus dem Symbol a bestehen); der Satz von syntaktisch korrekten Programmen in einer bestimmten Programmiersprache (deren Syntax in der Regel durch eine kontextfreie Grammatik definiert ist); Die formale Sprachtheorie betrifft sich jedoch selten mit bestimmten Sprachen (ausgenommen als Beispiele), beschäftigt sich aber hauptsächlich mit der Untersuchung verschiedener Formalismen, um Sprachen zu beschreiben. So kann beispielsweise eine Sprache als solche durch eine formale Grammatik generierten Strings angegeben werden, die durch einen bestimmten regelmäßigen Ausdruck beschrieben oder angepasst werden; jene Strings, die von einigen Automaten akzeptiert werden, wie z.B. eine Turing-Maschine oder endlich-state automaton; solche Strings, für die ein bestimmtes Entscheidungsverfahren (ein Algorithmus, der eine Folge von verwandten YES/NO-Fragen stellt) die Antwort YES erzeugt. Typische Fragen über solche Formalitäten sind: Was ist ihre Ausdruckskraft? (Kann Formalismus X jede Sprache beschreiben, die der Formalismus Y beschreiben kann? Kann es andere Sprachen beschreiben?) Was ist ihre Erkennbarkeit? (Wie schwierig ist es, zu entscheiden, ob ein bestimmtes Wort einer vom Formalismus X beschriebenen Sprache gehört?) Was ist ihre Vergleichbarkeit? (Wie schwierig ist es, zu entscheiden, ob zwei Sprachen, eine im Formalismus X und eine im Formalismus Y, oder in X wiederum, tatsächlich die gleiche Sprache sind?) Überraschend oft ist die Antwort auf diese Entscheidungsprobleme "es kann überhaupt nicht geschehen", oder "es ist extrem teuer" (mit einer Charakterisierung wie teuer). Daher ist formale Sprachtheorie ein wichtiger Anwendungsbereich der Rechenschaftstheorie und Komplexitätstheorie. Formale Sprachen können in die Chomsky-Hierarchie auf der Grundlage der ausdrucksstarken Kraft ihrer generativen Grammatik sowie der Komplexität ihres erkennenden Automaten klassifiziert werden. Kontextfreie Grammatiken und regelmäßige Grammatiken bieten einen guten Kompromiss zwischen Ausdruckskraft und Parsingfreiheit und sind in praktischen Anwendungen weit verbreitet. Operationen in den Sprachen Einige Operationen in den Sprachen sind üblich. Dazu gehören die Standard-Set-Operationen wie Gewerkschaft, Schnittpunkt und Ergänzung. Eine weitere Betriebsart ist die elementare Anwendung von String-Operationen. Beispiele: Nehmen Sie an, L 1 {\displaystyle L_{1} und L 2 {\displaystyle L_{2} sind Sprachen über ein gemeinsames Alphabet Σ {\displaystyle \Sigma } . Die Concatenation L 1 ⋅ L 2 {\displaystyle L_{1}\cdot L_{2} besteht aus allen Strings des Formulars v w {\displaystyle vw} wobei v {\displaystyle v} ein String aus L 1 ist {\displaystyle L_{1} und w {\displaystyle w} ein String aus L 2 ist {\displaystyle L_{2} . Der Schnittpunkt L 1 С L 2 {\displaystyle L_{1}\cap L_{2} von L 1 {\displaystyle L_{1} und L 2 {\displaystyle L_{2} besteht aus allen Strings, die in beiden Sprachen enthalten sind Die Ergänzung L 1 {\displaystyle \neg L_{1} von L 1 {\displaystyle L_{1} zu Σ {\displaystyle \Sigma } besteht aus allen Strings über Σ {\displaystyle \Sigma }, die nicht in L 1 {\displaystyle L_{1} sind. Der Kleene-Star: die Sprache, die aus allen Wörtern besteht, die in der Originalsprache Null oder mehr Wörter sind; Reversal: Lassen Sie ε das leere Wort sein, dann ε R = ε {\displaystyle \varepsilon ^{R}=\varepsilon } und für jedes nicht leere Wort w = σ 1 ⋯ σ n {\displaystyle w=\sigma {_1}\cdots \sigma {_n} (wo σ 1 , ... {_n}\cdots \sigma {_1}, dann für eine formale Sprache L (W R ∈ w ∈ L } {\displaystyle L^{R}=\{w^{R}\mid w\in L}\ . String homomorphismSuch String Operationen werden verwendet, um Verschlusseigenschaften von Klassen von Sprachen zu untersuchen. Eine Klasse von Sprachen wird unter einer bestimmten Operation geschlossen, wenn die Operation, auf Sprachen in der Klasse angewendet, immer wieder eine Sprache in der gleichen Klasse produziert. So sind beispielsweise die kontextfreien Sprachen unter Gewerkschaft, Konzilierung und Schnittpunkt mit regulären Sprachen, aber nicht unter Schnittpunkt oder Ergänzung geschlossen. Die Theorie von Trios und abstrakten Sprachenfamilien untersucht die häufigsten Verschlusseigenschaften von Sprachfamilien in ihrem eigenen Recht. Anwendungen Programmiersprachen Ein Compiler hat in der Regel zwei verschiedene Komponenten. Ein lexischer Analysator, der manchmal von einem Werkzeug wie lex erzeugt wird, identifiziert die Token der Programmiersprache Grammatik, z.B. Identifikatoren oder Schlüsselwörter, numerische und String-Literaturen, Pünctuation und Operator-Symbole, die selbst durch eine einfachere formale Sprache vorgegeben werden, in der Regel durch regelmäßige Ausdrücke. Auf der grundlegendsten konzeptionellen Ebene versucht ein Parser, manchmal von einem Parser-Generator wie yacc erzeugt, zu entscheiden, ob das Quellprogramm syntaktisch gültig ist, d.h. wenn es gut in Bezug auf die Programmiersprache Grammatik gebildet wird, für die der Compiler gebaut wurde. Selbstverständlich machen die Compiler mehr, als nur den Quellcode zu parsieren – sie übersetzen ihn normalerweise in ein ausführbares Format. Aus diesem Grund gibt ein Parser in der Regel mehr als eine ja/nein Antwort aus, typischerweise ein abstrakter Syntaxbaum. Dies wird von nachfolgenden Schritten des Compilers verwendet, um schließlich einen ausführbaren Maschinencode zu erzeugen, der direkt auf der Hardware läuft, oder einen Zwischencode, der eine virtuelle Maschine zur Ausführung benötigt. Formale Theorien, Systeme und Nachweise In der mathematischen Logik ist eine formale Theorie eine Reihe von Sätzen in einer formalen Sprache ausgedrückt. Ein formales System (auch als logisches Kalkül oder logisches System bezeichnet) besteht aus einer formalen Sprache zusammen mit einem deduktiven Gerät (auch als deduktives System bezeichnet). Die deduktive Vorrichtung kann aus einer Reihe von Transformationsregeln bestehen, die als gültige Inferenzregeln interpretiert werden können, oder einem Satz von Axiomen, oder beides haben. Ein formales System wird verwendet, um einen Ausdruck aus einem oder mehreren anderen Ausdrücken abzuleiten. Obwohl eine formale Sprache mit seinen Formeln identifiziert werden kann, kann ein formales System nicht ebenfalls durch seine Theoremen identifiziert werden. Zwei formale Systeme F S {\displaystyle {\mathcal {FS} und F S' {\displaystyle {\mathcal {FS}' können alle gleichen Theoremen haben und sich dennoch in einer signifikanten prooftheoretischen Weise unterscheiden (eine Formel A kann eine syntaktische Konsequenz einer Formel B in einer, aber nicht anderen beispielsweise sein). Ein formaler Nachweis oder Ableitung ist eine endliche Folge von gut formulierten Formeln (die als Sätze oder Sätze interpretiert werden können), die jeweils ein Axiom oder aus den vorhergehenden Formeln in der Reihenfolge durch eine Regel der Inferenz folgt. Der letzte Satz in der Reihenfolge ist ein Theorem eines formalen Systems. Formale Nachweise sind nützlich, weil ihre Theoremen als wahre Aussagen interpretiert werden können. Interpretationen und Modelle Formalsprachen sind völlig syntaktisch in der Natur, können aber Semantik gegeben werden, die den Elementen der Sprache Bedeutung geben. Beispielsweise ist in der mathematischen Logik der Satz möglicher Formeln einer bestimmten Logik eine formale Sprache, und eine Interpretation gibt jedem der Formeln - gewöhnlich ein Wahrheitswert - eine Bedeutung zu. Die Untersuchung der Interpretationen formaler Sprachen wird formale Semantik genannt. In mathematischer Logik wird dies oft in Bezug auf Modelltheorie getan. In der Modelltheorie werden die Begriffe, die in einer Formel auftreten, als Objekte innerhalb mathematischer Strukturen interpretiert, und feste Interpretationsregeln bestimmen, wie der Wahrheitswert der Formel aus der Interpretation ihrer Begriffe abgeleitet werden kann; ein Modell für eine Formel ist eine Interpretation von Begriffen, so dass die Formel wahr wird. Siehe auch Combinatorik zu Wörtern Freie monoid Formal Methode Grammar Framework Mathematische Notation Assoziative Array String (Computerwissenschaft) Anmerkungen Referenzen Zitate Quellen Werke zitiert Allgemeine Referenzen Externe Links "Formalsprache", Encyclopedia of Mathematics, EMS Press, 2001 [1994] University of Maryland, Formal Language Definitions James Power, "Notes on Formal Language Theory and Parsing", 29 November 2002. Entwürfe einiger Kapitel des "Handbook of Formal Language Theory", Vol. 1–3, G. Rozenberg und A. Salomaa (Hrsg.). Springer Verlag, (1997:) Alexandru Mateescu und Arto Salomaa, Vorwort in Vol.1, S. v–viii, und "Formal Languages: An Einführung and a Synopsis", Kapitel 1 in Vol. 1, S.1–39 Sheng Yu, "Regular Languages", Kapitel 2 in Vol. 1 Jean-Michel Autebert, Jean Berstel, Luc Boasson, "Context-Free Languages and Push-Down Automata", Kapitel 3 in Band 1 Christian Choffrut und Juhani Karhumäki, "Combinatorics of Words", Kapitel 6 in Band 1 Tero Harju und Juhani Karhumäki, Morphisms, Kapitel 7 in Band 1,105 Jean-Eric Pin, "Syntaktische Halbgruppen", Kapitel 10 in Vol. 1, S. 679–746 M. Crochemore und C. Hancart, "Automata for Matching Patterns", Kapitel 9 in Vol. 2 Dora Giammarresi, Antonio Restivo, "Zweidimensionale Sprachen", Kapitel 4 in Band 3, S. 215–267