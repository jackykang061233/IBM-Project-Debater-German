Kennziffern zur Identifizierung der Clusterstruktur (OPIKT) ist ein Algorithmus zur Ermittlung dichter Cluster in Geodaten. Markus M. Breunig, Hans-Peter Warel und Jörg Sander. Ihre Grundidee ähnelt der DBSCAN, aber sie befasst sich mit einem der größten Schwächen des DBSCAN: dem Problem, aussagekräftige Cluster in Daten unterschiedlicher Dichte zu erkennen. Um dies zu tun, sind die Punkte der Datenbank (linear) so angeordnet, dass räumlich engste Punkte Nachbarn in der Bestellung werden. Zusätzlich wird für jeden Punkt eine besondere Entfernung gespeichert, die die für einen Cluster zugelassene Dichte darstellt, so dass beide Punkte zum gleichen Cluster gehören. Dies ist als Drogram vertreten. Grundidee Wie DBSCAN erfordert OPIK zwei Parameter: ., die die maximale Entfernung (Rad) beschreibt, und MinPts, in denen die Anzahl der Punkte beschrieben wird, die zur Bildung eines Clusters erforderlich sind. Ein Punkt p ist ein Kernpunkt, wenn mindestens die MinPtspunkte innerhalb ihrer ).-neighborhood N ε ( p ) Memestyle N_ Memevarepsilon (p) (einschließlich Punkt p selbst) gefunden werden. OPIK betrachtet im Gegensatz zu DBSCAN auch Punkte, die Teil eines dichter verpackten Clusters sind, so wird jeder Punkt eine Kernstrecke zugewiesen, die die Entfernung zum nächsten Punkt beschreibt: Kern-dist d , M i n P t s ( p ) = { HEEFINED bei N  of ( p ) [ M i n P ts i n P s - kleinste Entfernung in Nε ( p  )  p (p )) }} EF EF EF EF & & & & }N_SSOvarepsilon (}p) MinPtss Mathematikit MinPts}}{\text{-th kleinsten Entfernung in }N_customvarepsilon (p) & Logtext[otherwise}}\end] Die Reichweite eines anderen Punkts ist entweder die Entfernung zwischen o und p oder die Kernstrecke, die größer ist: erreichbarer ε  i , M i n P t s ( o , p ) = { BEEFINED  | ( p ) [M i n P t s s (kernd  i  i, M i n P t s s s s s ( p)  p }} }}  o  o  o psilon psilon psilon }N_SSOvarepsilon (}p) MinPts}}\\\max(Gettext{core-dist}}_custom Mathematikit  cuvarepsilon MinPts((p), faser{dist((p,o)))) & Logtext{otherwise}}\end{cases Wenn p und o die nächsten Nachbarn sind, ist dies die  the     WELLdisplaystyle \varepsilon 'psilonvarepsilon }, wir müssen p und o demselben Cluster angehören. beiden Kern- und Reichweiten sind nicht definiert, wenn kein ausreichend dichter Cluster (w.r.t.ε) zur Verfügung steht. Angesichts einer ausreichend großen ε, dies geschieht nie, aber dann gibt es jede ε-neighborhood-Anfrage die gesamte Datenbank, die in O (n 2 ) Memestyle O(n2)2)} läuft. Der  the-Parameter ist daher verpflichtet, die Dichte von Clustern, die nicht mehr interessant sind, abzubauen und den Algorithmus zu beschleunigen. Der Parameter . ist streng, nicht notwendig. Man kann einfach auf den größtmöglichen Wert gesetzt werden. Wenn ein räumlicher Index zur Verfügung steht, spielt er jedoch eine praktische Rolle im Hinblick auf die Komplexität. OPIKT aus DBSCAN durch die Entfernung dieses Parameters, zumindest in dem Maße, in dem nur der maximale Wert zu legen ist. Pseudocode Der Grundansatz der OPIK ähnelt der DBSCAN, aber anstelle der Aufrechterhaltung bekannter, aber bisher unbehandelter Cluster-Mitglieder in einem Set werden sie in einer prioritären Warte beibehalten (z.B. mit einem indexierten Heap). Funktion OPIK(DB, eps, MinPts) ist für jeden beliebigen Punkt p.reach-Verkehr =UNDEFINED für jede unverarbeitete Stelle von DB do N =getNeighbors(p, eps)-Marke p als verarbeitetes Output p in die bestellte Liste, wenn Kern-Ferne (p, eps, MinPts) =UNDEFINED dann Saatgut = vordringliche Warte-Aktualisierung(N, p, Seeds, eps, MinPts) für jede nächste q in Saatgut do N' =getNeighbors(q, eps) q als Verarbeitungsleistung q in die vorgeschriebene Liste, wenn Kern-Fern (q, eps, MinPts) =!UNDEFINED do aktualisiert(N,' q, Saatgut, eps, MinPts) In Fortschreibungen)( werden die prioritären Warteschlangen mit dem ε Memedisplaystyle \varepsilon } -Nachbarschaft von p Memestyle p} und q KINGstyle q} aktualisiert: Funktion aktualisiert(N, p, Seeds, eps, MinPts) ist ein Kernstück = Kernstück (P, Eps, MinPts) für jede O in N, wenn es nicht neugewerblich ist (korrigiert, aber nicht mehr) Gewinnung der Cluster mit einer Reichweite (eine besondere Art von Drogram), die hierarchische Struktur der Cluster kann leicht erreicht werden. Es handelt sich um eine 2D-Anlage mit der Bestellung der von OPIK verarbeiteten Punkte auf der x-Achse und der Reichweite auf der y-Achse. Da die Cluster zu einem Cluster gehören, verfügen die Cluster über eine geringe Reichweite bis zu ihrem nächsten Nachbarn, zeigen die Cluster als Täler in der Reichweite. Je tiefer das Tal, des Verlierers des Clusters. Das Bild oben zeigt dieses Konzept. In seinem oberen linken Bereich wird ein synthetisches Beispiel-Datenwerk gezeigt. Der oberen rechten Teil beleuchtet den durch OPIK hergestellten Laubbaum und der geringere Teil zeigt die Reichweite, wie er von OPIK berechnet wird. Farben in diesem Grundstück sind Etiketten, die nicht vom Algorithmus berechnet werden, aber es ist gut sichtbar, wie die Täler in dem Grundstück den Clustern der oben genannten Daten entsprechen. Die gelben Punkte in diesem Bild werden als Lärm angesehen, und kein Tal ist in ihrer Reichweite zu finden. Sie werden in der Regel nicht Cluster zugewiesen, außer das allgegenwärtige "alle Daten"-Cluster in einem hierarchischen Ergebnis. Extrakte aus diesem Grundstück können manuell durchgeführt werden, indem eine Reihe auf der x-Achse nach visueller Prüfung ausgewählt werden, indem ein Schwellenwert für die y-Achse gewählt wird (das Ergebnis ähnelt dann einem DBSCAN-Clustering-ergebnis mit dem gleichen {\ KINGstyle \varepsilon } und MinPtsparametern; hier ein Wert von 0,1 potenziellen Ergebnissen), oder durch verschiedene Algorithmen, die versuchen, die Täler durch steile, Knie- oder lokale Maxima aufzudecken. Clusterings, die diese Art erhalten, sind in der Regel hierarchisch und können nicht durch einen einzigen DBSCAN-Betrieb erreicht werden. Komplexität wie DBSCAN, OPIK-Verfahren jeweils einmal und führt eine ε KINGstyle \varepsilon } - Nachlässigkeit bei dieser Verarbeitung. In Anbetracht eines räumlichen Index, der eine Nachbarschaftsfrage in O ( Log   n ) Memestyle O(\log n)} gewährt, wird eine Gesamtlaufzeit von O (n ⋅ Log   n ) Memestyle O(n\cdot \log n)} erreicht. Die Autoren des Originalpapiers melden einen tatsächlichen konjunkturellen Abwärtsfaktor von 1,6 gegenüber DBSCAN. Hinweis darauf, dass der Wert von   WELLdisplaydisplaystyle \varepsilon } die Kosten des Algorithmus stark beeinflussen könnte, da ein Wert zu groß die Kosten einer Nachbarschaftsfrage auf lineare Komplexität erhöhen könnte. Insbesondere die Auswahl der  > > max x , y d ( x , y ) Memedisplaystyle \varepsilon >\max {_x,y}d(x,y) (großer als die maximale Entfernung in der Datenform) ist möglich, führt jedoch zu einer kalkulären Komplexität, da jede Abfrage die vollständigen Datenmengen wiedergibt. Selbst wenn kein räumlicher Index verfügbar ist, kommt dies zu zusätzlichen Kosten bei der Verwaltung des Heap.   KINGstyle \varepsilon } sollte daher für die gesetzten Daten angemessen gewählt werden. Verlängerungen von OPIK-OF sind ein herausragender Erkennungsgorithmus auf der Grundlage von OPTI. Hauptzweck ist die Extraktion von Auslierern aus einem bestehenden OPIK-Ausgang zu niedrigen Kosten im Vergleich zu einer anderen Aufdeckungsmethode. Die besser bekannte Version LOF basiert auf denselben Konzepten. DeLi-Clu, dichte-Link-Clustering kombiniert Ideen von Single-linkage-Clustering und OPIKen, beseitigt den Parameter ε Memedisplaystyle \varepsilon } und bietet Leistungsverbesserungen gegenüber OPIK. HiSC ist eine hierarchische Subspace-Clustering-Methode auf der Grundlage von OPIKs. HiCO ist ein hierarchischer Entflechtungsgorithmus auf der Grundlage von OPTI. DiSH ist eine Verbesserung über HiSC, die komplexere Hierarchien finden kann. FOPIKTI ist eine schnellere Umsetzung mit zufälligen Projektionen. HDBSCAN* basiert auf einer Raffinerie von DBSCAN, ausgenommen Grenzpunkte aus den Clustern und damit nach einer strengeren Definition der Dichtestufen von Hartigan. Verfügbarkeit von Java Umsetzungen von OPIK, OPIK-OF, DeLi-Clu, HiSC, HiCO und DiSH sind im Rahmen des ELKI Data Mining (mit einer Indexbeschleunigung für mehrere Fernfunktionen und mit automatischen Clustern, die die using Extraktionsmethode verwenden) erhältlich. Andere Java-Projekte umfassen die Weka-Erweiterung (keine Unterstützung für die ξ-Clustergewinnung). Das R-Paket Nuscan umfasst eine C+-Durchführung von OPIK (mit der traditionellen Nuscan-ähnlichen und .-Clustergewinnung) mit einem k-d-baum für Indexbeschleunigung für Euclidean Entfernung nur. Skype-Durchführung von OPIKs ist in der Py-Cluster-Bibliothek und in Sikit-learn erhältlich. HDBSCAN* ist in der Online-Bibliothek erhältlich. Luxemburg Links