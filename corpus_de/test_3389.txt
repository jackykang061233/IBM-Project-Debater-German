Ein feldprogrammierbares Gate-Array (FPGA) ist eine integrierte Schaltung, die von einem Kunden oder einem Designer nach der Fertigung konfiguriert werden soll – also der Begriff feldprogrammierbar". Die FPGA-Konfiguration wird in der Regel mit einer Hardware-Beschreibungssprache (HDL) angegeben, ähnlich wie bei einer anwendungsspezifischen integrierten Schaltung (ASIC). Zur Vorgabe der Konfiguration wurden bisher Schaltpläne verwendet, die jedoch aufgrund des Aufkommens elektronischer Designautomatisierungswerkzeuge immer seltener sind. FPGAs enthalten eine Reihe von programmierbaren Logikblöcken und eine Hierarchie von "rekonfigurierbaren Leiterbahnen", die Blöcke "verdrahtet" lassen, wie viele Logik-Gatter, die in verschiedenen Konfigurationen miteinander verdrahtet werden können. Logic-Blöcke können konfiguriert werden, um komplexe Kombinationsfunktionen oder einfach nur einfache Logik-Gatter wie AND und XOR auszuführen. In den meisten FPGAs umfassen logische Blöcke auch Speicherelemente, die einfache Flip-Flops oder mehr komplette Speicherblöcke sein können. Viele FPGAs können umprogrammiert werden, um verschiedene Logikfunktionen zu implementieren, die ein flexibles rekonfigurierbares Computing ermöglichen, wie es in der Computersoftware ausgeführt wird. FPGAs haben eine bemerkenswerte Rolle in der Embedded-Systementwicklung aufgrund ihrer Fähigkeit, Systemsoftware (SW) Entwicklung gleichzeitig mit Hardware (HW) zu starten, System-Performance-Simulationen in einer sehr frühen Phase der Entwicklung zu ermöglichen und verschiedene System-Partitionierung (SW und HW)-Tests und Iterationen vor dem endgültigen Einfrieren der Systemarchitektur zu ermöglichen. Technisches Design Zeitgenössische feldprogrammierbare Gate-Arrays (FPGAs) verfügen über große Ressourcen von Logikgates und RAM-Blöcken, um komplexe digitale Berechnungen zu implementieren. Da FPGA-Designs sehr schnelle I/O-Raten und bidirektionale Datenbusse verwenden, wird es eine Herausforderung, das korrekte Timing der gültigen Daten innerhalb der Setupzeit zu überprüfen und Zeit zu halten. Die Bodenplanung ermöglicht die Ressourcenzuweisung innerhalb von FPGAs, diese Zeitzwänge zu erfüllen. FPGAs können verwendet werden, um jede logische Funktion zu implementieren, die ein ASIC ausführen kann. Die Fähigkeit, die Funktionalität nach dem Versand, die teilweise Neukonfiguration eines Teils des Designs und die geringen nicht wiederkehrenden Engineering-Kosten im Verhältnis zu einem ASIC-Design (gegenüber den allgemein höheren Stückkosten) zu aktualisieren, bieten Vorteile für viele Anwendungen. Einige FPGAs haben neben digitalen Funktionen analoge Funktionen. Das gebräuchlichste analoge Merkmal ist eine programmierbare Drehgeschwindigkeit auf jedem Ausgangspin, die es dem Ingenieur ermöglicht, niedrige Raten auf leicht beladenen Pins einzustellen, die sonst unannehmbar klingeln oder ein paaren würden, und höhere Raten auf stark belasteten Pins auf Schnellkanälen einzustellen, die sonst zu langsam laufen würden. Häufig sind auch Quarz-Kristall-Oszillatoren, On-Chip-Resistenz-Kapazitäts-Oszillatoren und phasenverriegelte Schleifen mit eingebetteten spannungsgesteuerten Oszillatoren für die Takterzeugung und -verwaltung sowie für Hochgeschwindigkeits-Sternizer-Deserializer (SERDES) Sendetakte und Empfangstaktrückgewinnung. Gleichwohl sind Differenzkomparatoren an Eingangsstiften, die an differentielle Signalisierungskanäle angeschlossen sind. Einige "gemischte Signale FPGAs" haben periphere Analog-Digital-Wandler (ADCs) und Digital-Analog-Wandler (DACs) mit analogen Signalaufbereitungsblöcken integriert, die sie als System-on-a-Chip (SoC) betreiben können. Solche Geräte verschwimmen die Linie zwischen einem FPGA, das digitale und Nullen auf seinem internen programmierbaren Verbindungsgewebe trägt, und einem feldprogrammierbaren analogen Array (FPAA), das auf seinem internen programmierbaren Verbindungsgewebe analoge Werte trägt. Geschichte Die FPGA-Branche sprang aus programmierbarem Festspeicher (PROM) und programmierbaren Logikgeräten (PLDs). PROMs und PLDs hatten beide die Möglichkeit, in Chargen in einer Fabrik oder im Feld (feldprogrammierbar) programmiert zu werden. Zwischen logischen Gattern war jedoch eine programmierbare Logik fest verdrahtet. Altera wurde 1983 gegründet und lieferte 1984 das erste reprogrammierbare Logikgerät der Branche – das EP300 –, das mit einem Quarzfenster im Paket ausgestattet war, das es Benutzern erlaubte, eine ultraviolette Lampe auf der Düse zu leuchten, um die EPROM-Zellen zu löschen, die die Gerätekonfiguration hielten. Xilinx Mitbegründer Ross Freeman und Bernard Vonderschmitt erfanden 1985 das erste kommerziell nutzbare feldprogrammierbare Gate-Array – das XC2064. Die XC2064 hatte programmierbare Tore und programmierbare Verbindungen zwischen Toren, die Anfänge einer neuen Technologie und Markt. Der XC2064 hatte 64 konfigurierbare Logikblöcke (CLBs), mit zwei Drei-Eingang-Lookup-Tabellen (LUTs). Mehr als 20 Jahre später wurde Freeman für seine Erfindung in die National Inventors Hall of Fame eingetragen. 1987 finanzierte das Naval Surface Warfare Center ein Experiment von Steve Casselman, um einen Computer zu entwickeln, der 600.000 umprogrammierbare Tore implementiert. Casselman war erfolgreich und 1992 wurde ein mit dem System verbundenes Patent ausgestellt. Altera und Xilinx fuhren unangefochten fort und wuchsen von 1985 bis Mitte der 1990er Jahre, als die Konkurrenten hochgingen und einen beträchtlichen Teil ihres Marktanteils erlitten. 1993 belief sich Actel (jetzt Microsemi) auf rund 18 Prozent des Marktes. Bis 2013 repräsentierten Altera (31 Prozent), Actel (10 Prozent) und Xilinx (36 Prozent) zusammen etwa 77 Prozent des FPGA-Marktes. Die 1990er Jahre waren eine Periode des schnellen Wachstums für FPGAs, sowohl in der Stromerzeugung als auch im Produktionsvolumen. Anfang der 1990er Jahre wurden FPGAs in erster Linie in der Telekommunikation und Vernetzung eingesetzt. Ende des Jahrzehnts fand die FPGAs ihren Weg in Konsum-, Automobil- und Industrieanwendungen. Unternehmen wie Microsoft haben begonnen, FPGAs zu nutzen, um hochleistungsfähige, rechnerisch intensive Systeme zu beschleunigen (wie die Rechenzentren, die ihre Bing-Suchmaschine betreiben), aufgrund der Leistung pro Watt Vorteil liefern FPGAs. Microsoft begann mit FPGAs, um Bing im Jahr 2014 zu beschleunigen, und im Jahr 2018 begann die Bereitstellung von FPGAs über andere Rechenzentren Workloads für ihre Azure Cloud Computing-Plattform. Integration Im Jahr 2012 wurde der grobkörnige architektonische Ansatz durch die Kombination von Logikblöcken und Verbindungen traditioneller FPGAs mit eingebetteten Mikroprozessoren und verwandten Peripheriegeräten zu einem kompletten "System auf einem programmierbaren Chip" weitergeführt. Diese Arbeit spiegelt die Architektur wider, die von Ron Perloff und Hanan Potash der Burroughs Advanced Systems Group 1982 geschaffen wurde, die eine rekonfigurierbare CPU-Architektur auf einem einzigen Chip namens SB24 kombinierte. Beispiele für solche Hybrid-Technologien sind im Xilinx Zynq-7000 alle programmierbaren SoC zu finden, der einen 1,0 GHz Dual-Core ARM Cortex-A9 MPCore Prozessor umfasst, der innerhalb des Logikgewebes von FPGA oder im Altera Arria V FPGA eingebettet ist, der einen 800 MHz Dual-Core ARM Cortex-A9 MPCore enthält. Das Atmel FPSLIC ist ein weiteres solches Gerät, das einen AVR-Prozessor in Kombination mit Atmels programmierbarer Logikarchitektur verwendet. Die Microsemi SmartFusion-Geräte enthalten einen ARM Cortex-M3 Hartprozessorkern (mit bis zu 512 kB Blitz und 64 kB RAM) und analoge Peripheriegeräte wie einen Mehrkanal-Analog-Digital-Wandler und Digital-Analog-Wandler zu ihrem Flash-Speicher-basierten FPGA-Gewebe. Weicher Kern Ein alternativer Ansatz zur Verwendung von Hard-Macro-Prozessoren ist die Verwendung von Soft-Prozessor-IP-Kernen, die innerhalb der FPGA-Logik implementiert sind. Nios II, MicroBlaze und Mico32 sind Beispiele für beliebte Softcore-Prozessoren. Viele moderne FPGAs werden zu "Laufzeit" programmiert, was zu der Idee der rekonfigurierbaren Rechen- oder rekonfigurierbaren Systeme geführt hat – CPUs, die sich zur Hand neu konfigurieren. Zusätzlich entstehen neue, nicht-FPGA-Architekturen. Software-konfigurierbare Mikroprozessoren wie die Stretch S5000 nehmen einen hybriden Ansatz durch die Bereitstellung einer Reihe von Prozessorkernen und FPGA-ähnlichen programmierbaren Kernen auf demselben Chip an. Timelines Gates 1987: 9.000 Tore, Xilinx 1992: 600.000 Naval Surface Warfare Department Anfang der 2000er Jahre:Millionen 2013: 50 Millionen, Xilinx Marktgröße 1985: Erste kommerzielle FPGA : Xilinx XC2064 1987: $14 Millionen c. 1993: > $385 Millionen 2005: $1.9 Milliarden 2010 Schätzungen: $2,75 Milliarden 2013: $5.4 Milliarden 2020 Schätzung: $9,8 Milliarden Design beginnt Ein Design-Start ist ein neues benutzerdefiniertes Design für die Umsetzung auf einem FPGA. 2005: 80.000 2008: 90.000 Vergleiche zu ASICsHistorisch, FPGAs sind langsamer, weniger energieeffizient und im Allgemeinen weniger Funktionalität als ihre festen ASIC-Gegenstände erreicht. Eine ältere Studie zeigte, dass auf FPGAs implementierte Designs im Durchschnitt 40 mal so viel Fläche benötigen, 12 mal so viel dynamische Leistung zeichnen und mit einem Drittel die Geschwindigkeit der entsprechenden ASIC-Implementierungen laufen. In jüngster Zeit haben FPGAs wie der Xilinx Virtex-7 oder der Altera Stratix 5 entsprechende ASIC- und ASSP-Lösungen ("Anwendungsspezifischer Standardteil", wie z.B. ein eigenständiger USB-Schnittstellenchip) durch die Bereitstellung erheblich reduzierter Stromnutzung, erhöhter Geschwindigkeit, niedrigerer Materialkosten, minimaler Implementierungs-Reastate und erhöhter Möglichkeiten für die Neukonfiguration auf dem Flugplatz" auf den Markt gebracht. Ein Design, das 6 bis 10 ASICs umfasste, kann nun nur mit einem FPGA realisiert werden. Zu den Vorteilen von FPGAs gehören die Möglichkeit, bei bereits eingesetztem (d.h. "im Feld)" neu zu programmieren, um Fehler zu beheben, und beinhalten oft kürzere Zeit auf dem Markt und niedrigere nicht wiederkehrende Engineering-Kosten. Anbieter können auch eine Mittelstraße über FPGA-Prototyping: Entwicklung ihrer Prototyp-Hardware auf FPGAs, aber Herstellung ihrer endgültigen Version als ASIC, so dass sie nach dem Design nicht mehr geändert werden kann. Dies ist oft auch bei neuen Prozessordesigns der Fall. Entwicklung Einige FPGAs verfügen über die Möglichkeit einer teilweisen Neukonfiguration, die einen Teil des Gerätes während des Weiterlaufs wieder programmiert. Komplexe programmierbare Logik-Geräte (CPLD)Die primären Unterschiede zwischen komplexen programmierbaren Logik-Geräten (CPLDs) und FPGAs sind architektonisch. Eine CPLD weist eine vergleichsweise restriktive Struktur auf, die aus einer oder mehreren programmierbaren Summen-Produktlogik-Arrays besteht, die eine relativ geringe Anzahl von getakteten Registern zuführt. Dadurch sind CPLDs weniger flexibel, haben aber den Vorteil von vorhersehbaren Zeitverzögerungen und einem höheren Logik-zu-Verbindungsverhältnis. FPGA-Architekturen hingegen werden von der Verbindung dominiert. Dies macht sie wesentlich flexibler (in Bezug auf die für die Umsetzung auf sie praktikablen Designs), aber auch viel komplexer zu entwerfen, oder zumindest erfordert komplexere elektronische Designautomatisierung (EDA) Software. In der Praxis ist die Unterscheidung zwischen FPGAs und CPLDs oft eine der Größen, da FPGAs in der Regel viel größer sind als CPLDs. Typischerweise enthalten nur FPGAs komplexere eingebettete Funktionen wie Addierer, Multiplizierer, Speicher und Serializer/Deserializer. Eine weitere häufige Unterscheidung ist, dass CPLDs eingebettete Flash-Speicher enthalten, um ihre Konfiguration zu speichern, während FPGAs normalerweise externe nichtflüchtige Speicher benötigen (aber nicht immer). Wenn ein Design ein einfaches Einschalten erfordert (Logic ist bereits bei power-up konfiguriert) sind CPLDs im Allgemeinen bevorzugt. Für die meisten anderen Anwendungen sind FPGAs allgemein bevorzugt. Manchmal werden sowohl CPLDs als auch FPGAs in einem einzigen Systemdesign verwendet. In diesen Ausführungen führen CPLDs in der Regel Leimlogikfunktionen durch und sind für das Booten der FPGA sowie das Controlling Reset und Boot-Sequenz der kompletten Leiterplatte verantwortlich. Je nach Anwendung kann es daher sinnvoll sein, sowohl FPGAs als auch CPLDs in einem einzigen Design zu verwenden. Sicherheitsüberlegungen FPGAs haben sowohl Vorteile als auch Nachteile im Vergleich zu ASICs oder sicheren Mikroprozessoren hinsichtlich der Hardwaresicherheit. Die Flexibilität von FPGAs macht schädliche Änderungen bei der Herstellung zu einem geringeren Risiko. Bisher wurde für viele FPGAs der Design-Bitstream freigelegt, während der FPGA ihn aus externem Speicher (typischerweise bei jedem Power-on) lädt. Alle großen FPGA-Anbieter bieten nun ein Spektrum an Sicherheitslösungen für Designer wie Bitstream-Verschlüsselung und Authentifizierung. Zum Beispiel bieten Altera und Xilinx eine AES-Verschlüsselung (bis zu 256-Bit) für Bitstreams, die in einem externen Flash-Speicher gespeichert sind. FPGAs, die ihre Konfiguration intern in nichtflüchtigen Flash-Speicher speichern, wie Microsemis ProAsic 3 oder Lattices XP2 programmierbare Geräte, stellen den Bitstream nicht frei und brauchen keine Verschlüsselung. Darüber hinaus bietet Flash-Speicher für eine Lookup-Tabelle einen einzigen Ereignis-versetzten Schutz für Raumanwendungen. Kunden, die eine höhere Garantie des Manipulationswiderstandes wünschen, können Schreib-Once, Antifuse FPGAs von Anbietern wie Microsemi verwenden. Mit seinen Stratix 10 FPGAs und SoCs hat Altera einen Secure Device Manager und physisch unkloneable Funktionen eingeführt, um einen hohen Schutz vor physischen Angriffen zu gewährleisten. Im Jahr 2012 zeigten die Forscher Sergei Skorobogatov und Christopher Woods, dass FPGAs gegen feindliche Absichten verletzlich sein können. Sie entdeckten eine kritische Hintertür-Verwundbarkeit wurde in Silizium als Teil der Actel/Microsemi ProAsic 3 hergestellt, so dass es auf vielen Ebenen wie Umprogrammierung Krypto und Zugriffsschlüssel, Zugriff auf unverschlüsselte Bitstream, Änderung von Low-Level-Silicium-Features, und Extraktion von Konfigurationsdaten. Anwendungen Ein FPGA kann verwendet werden, um jedes Problem zu lösen, das berechnet wird. Dies ist trivial durch die Tatsache bewiesen, dass FPGAs zur Realisierung eines weichen Mikroprozessors wie der Xilinx MicroBlaze oder Altera Nios II verwendet werden können. Ihr Vorteil liegt darin, dass sie für einige Anwendungen aufgrund ihrer Parallelität und Optimität hinsichtlich der Anzahl der für bestimmte Prozesse verwendeten Tore deutlich schneller sind. FPGAs begann ursprünglich als Konkurrenten an CPLDs, um Klebelogik für Leiterplatten zu implementieren. Da ihre Größe, ihre Fähigkeiten und ihre Geschwindigkeit zugenommen haben, übernahm FPGAs zusätzliche Funktionen, um den Punkt, an dem einige nun als Vollsysteme auf Chips (SoCs) vermarktet werden. Insbesondere mit der Einführung von dedizierten Multiplikatoren in FPGA-Architekturen in den späten 1990er Jahren begannen Anwendungen, die traditionell die einzige Reserve der digitalen Signalprozessor-Hardware (DSPs) war, FPGAs zu integrieren. Ein weiterer Trend bei der Verwendung von FPGAs ist die Hardwarebeschleunigung, bei der man mit dem FPGA bestimmte Teile eines Algorithmus beschleunigen und einen Teil der Berechnung zwischen dem FPGA und einem generischen Prozessor teilen kann. Die Suchmaschine Bing wird für die Übernahme der FPGA-Beschleunigung für ihren Suchalgorithmus 2014 festgestellt. Seit 2018 sehen FPGAs einen verstärkten Einsatz als KI-Beschleuniger, darunter Microsofts "Project Catapult" und zur Beschleunigung künstlicher neuronaler Netzwerke für maschinelle Lernanwendungen. Traditionell wurden FPGAs für spezielle vertikale Anwendungen reserviert, bei denen das Produktionsvolumen klein ist. Für diese Low-Volume-Anwendungen ist die Prämie, die Unternehmen in Hardware-Kosten pro Einheit für einen programmierbaren Chip zahlen, günstiger als die Entwicklungsressourcen für die Erstellung eines ASIC. Ab 2017 haben die neuen Kosten- und Leistungsdynamik das Angebot an tragfähigen Anwendungen erweitert. Die Firma Gigabyte erstellte eine i-RAM-Karte, die eine Xilinx FPGA verwendet, obwohl ein maßgeschneiderter Chip wäre billiger, wenn in großen Mengen. Das FPGA wurde gewählt, um es schnell auf den Markt zu bringen und der Anfangslauf war nur 1000 Einheiten, die eine FPGA die beste Wahl. Dieses Gerät ermöglicht es Menschen, Computer-ram als Festplatte zu verwenden. Gemeinsame Anwendungen Architektur Logic Blöcke Die häufigste FPGA-Architektur besteht aus einer Reihe von Logikblöcken, I/O-Pads und Routing-Kanälen. In der Regel haben alle Routing-Kanäle die gleiche Breite (Anzahl der Drähte). Mehrere I/O-Pads können in die Höhe einer Zeile oder die Breite einer Spalte im Array passen. Eine Anwendungsschaltung muss in ein FPGA mit ausreichenden Ressourcen abgebildet werden. Während die Anzahl der benötigten CLBs/LABs und I/Os leicht aus dem Design ermittelt wird, kann die Anzahl der benötigten Routing-Tracks auch bei Designs mit gleicher Logik erheblich variieren. Zum Beispiel erfordert ein Crossbar-Schalter viel mehr Routing als ein systolisches Array mit der gleichen Gate-Anzahl. Da ungenutzte Routing-Tracks die Kosten (und die Leistung verringern) des Teils erhöhen, ohne irgendwelche Vorteile zu bieten, versuchen FPGA-Hersteller, nur genug Tracks zu bieten, so dass die meisten Designs, die in Bezug auf Lookup-Tabellen (LUTs) und I/Os passen, können geleitet werden. Dies wird durch Schätzungen, wie sie aus der Rent-Regel oder durch Versuche mit bestehenden Konstruktionen abgeleitet werden, bestimmt. Ab 2018 werden Netzwerk-on-Chip-Architekturen für Routing und Vernetzung entwickelt. Im allgemeinen besteht ein logischer Block aus einigen logischen Zellen (genannt ALM, LE, Schicht etc.). Eine typische Zelle besteht aus einem 4-Eingang LUT, einem vollständigen Addierer (FA) und einem D-Flip-Flop, wie oben gezeigt. Die LUTs sind in dieser Figur in zwei 3-Eingang LUTs aufgeteilt. Im Normalbetrieb werden diese durch den linken Multiplexer (mux) zu einem 4-Eingang LUT zusammengefasst. Im arithmetischen Modus werden ihre Ausgänge dem Addierer zugeführt. Die Auswahl des Modus wird in die mittlere MUX programmiert. Der Ausgang kann entweder synchron oder asynchron sein, je nach Programmierung des mux nach rechts, im Abbildungsbeispiel. In der Praxis werden ganze oder Teile des Addierers als Funktionen in die LUTs gespeichert, um Platz zu sparen. Harte Blöcke Moderne FPGA-Familien erweitern sich auf die oben genannten Fähigkeiten, um höhere Funktionalität in Silizium fixiert. Nachdem diese gemeinsamen Funktionen in der Schaltung eingebettet sind, verringert die Fläche erforderlich und gibt diesen Funktionen eine erhöhte Geschwindigkeit gegenüber dem Aufbau von logischen Primitiven. Beispiele hierfür sind Multiplikatoren, generische DSP-Blöcke, eingebettete Prozessoren, Hochgeschwindigkeits-I/O-Logik und eingebettete Speicher. Higher-End-FPGAs können High-Speed-Multi-Gigabit-Transceiver und harte IP-Kerne wie Prozessorkerne, Ethernet-Medienzugriffssteuereinheiten, PCI/PCI Express-Controller und externe Speichercontroller enthalten. Diese Kerne existieren neben dem programmierbaren Gewebe, aber sie sind aus Transistoren anstelle von LUTs gebaut, so dass sie ASIC-Level Leistung und Stromverbrauch haben, ohne eine erhebliche Menge an Geweberessourcen zu verbrauchen, so dass mehr des Gewebes frei für die anwendungsspezifische Logik. Die Multi-Gigabit-Transceiver enthalten außerdem hochleistungsanaloge Eingangs- und Ausgangsschaltungen sowie Hochgeschwindigkeits-Sternizer und Deserializer, Komponenten, die nicht aus LUTs aufgebaut werden können. Höhere physikalische Schicht (PHY) Funktionalitäten wie z.B. Liniencodierung können oder können nicht neben den Serializern und Deserializern in harter Logik, je nach FPGA, implementiert werden. Uhr Die meisten der in einem FPGA eingebauten Schaltungen sind synchrone Schaltungen, die ein Taktsignal benötigen. FPGAs enthalten engagierte globale und regionale Routing-Netzwerke für Uhr und Reset, so dass sie mit minimalem Skew geliefert werden können. Auch enthalten FPGAs in der Regel analoge Phasenregelschleife und/oder Verzögerungsregelschleifenkomponenten zur Synthese neuer Taktfrequenzen sowie Dämpfungs-Jitter. Komplexe Designs können mehrere Takte mit unterschiedlichen Frequenz- und Phasenverhältnissen verwenden, die jeweils separate Taktdomänen bilden. Diese Taktsignale können lokal durch einen Oszillator erzeugt werden oder sie können aus einem seriellen Datenstrom mit hoher Geschwindigkeit gewonnen werden. Bei der Erstellung von Clock-Domain-Übergangsschaltungen muss darauf geachtet werden, Metastabilität zu vermeiden. FPGAs enthalten in der Regel Block RAMs, die als Dual-Port-RAMs mit verschiedenen Takten arbeiten können, unterstützt bei der Konstruktion von FIFOs und Dual-Port-Puffern, die verschiedene Taktdomänen verbinden. 3D Architekturen Um die Größe und den Stromverbrauch von FPGAs zu schrumpfen, haben Anbieter wie Tabula und Xilinx 3D oder gestapelte Architekturen eingeführt. Nach der Einführung seiner 28 nm 7-Serie FPGAs sagte Xilinx, dass mehrere der höchstdichten Teile in diesen FPGA-Produktlinien mit mehreren Düsen in einem Paket konstruiert werden, wobei Technologie für 3D-Bau- und Stacked-die-Baugruppen entwickelt wird. Xilinx's Ansatz stapelt mehrere (drei oder vier) aktive FPGA stirbt nebeneinander auf einem Silizium-Interposer – ein Stück Silizium, das passive Verbindung trägt. Durch die Multi-die-Konstruktion können auch unterschiedliche Teile des FPGA mit unterschiedlichen Prozesstechnologien geschaffen werden, da sich die Prozessanforderungen zwischen dem FPGA-Gewebe selbst und den sehr hohen Geschwindigkeits-28Gbit/s seriellen Transceivern unterscheiden. Ein so gebautes FPGA wird als heterogene FPGA bezeichnet. Alteras heterogener Ansatz beinhaltet die Verwendung einer einzigen monolithischen FPGA-Diät und die Verbindung anderer Die/Technologien mit der FPGA mittels Intels eingebetteter Multi-die-Verbindungsbrücke (EMIB)-Technologie.Design und Programmierung Um das Verhalten des FPGA zu definieren, bietet der Benutzer ein Design in einer Hardware-Beschreibungssprache (HDL) oder als schematisches Design. Die HDL-Form ist besser geeignet, um mit großen Strukturen zu arbeiten, da es möglich ist, hochrangiges Funktionsverhalten festzulegen, anstatt jedes Stück von Hand zu zeichnen. Durch den schematischen Einstieg kann jedoch eine einfachere Visualisierung eines Designs und seiner Bauteilmodule ermöglicht werden. Mit Hilfe eines elektronischen Designautomatisierungstools wird eine technologiegestützte Netlist generiert. Die netlist kann dann auf die eigentliche FPGA-Architektur mit einem Prozess namens Place-and-Route, in der Regel von der proprietären Place-and-Route-Software des FPGA-Unternehmens durchgeführt werden. Der Nutzer validiert die Karten-, Orts- und Routenergebnisse über Zeitanalysen, Simulationen und andere Prüf- und Validierungsmethoden. Sobald der Design- und Validierungsprozess abgeschlossen ist, wird die erzeugte Binärdatei, typischerweise mit der proprietären Software des FPGA-Anbieters, verwendet, um die FPGA neu zu konfigurieren. Diese Datei wird über eine serielle Schnittstelle (JTAG) oder ein externes Speichergerät wie ein EEPROM an die FPGA/CPLD übertragen. Die häufigsten HDLs sind VHDL und Verilog sowie Erweiterungen wie SystemVerilog. In dem Versuch, die Komplexität der Gestaltung in HDLs zu reduzieren, die mit dem Äquivalent von Montagesprachen verglichen wurden, gibt es jedoch Bewegungen, die Abstraktionsebene durch die Einführung alternativer Sprachen zu erhöhen. National Instruments' LabVIEW grafische Programmiersprache (manchmal als G bezeichnet) verfügt über ein FPGA-Add-In-Modul, das dem Ziel und dem Programm FPGA Hardware zur Verfügung steht. Verilog wurde geschaffen, um den Prozess zu vereinfachen, um HDL robuster und flexibler zu machen. Verilog ist derzeit die beliebtesten. Verilog schafft eine Abstraktion, um die Details seiner Umsetzung zu verbergen. Verilog hat eine C-ähnliche Syntax, im Gegensatz zu VHDL. Um die Konstruktion komplexer Systeme in FPGAs zu vereinfachen, gibt es Bibliotheken von vordefinierten komplexen Funktionen und Schaltungen, die getestet und optimiert wurden, um den Designprozess zu beschleunigen. Diese vordefinierten Schaltungen werden häufig als geistiges Eigentum (IP) Kerne bezeichnet und sind von FPGA-Anbietern und Drittanbietern erhältlich. Sie sind selten frei und typischerweise unter proprietären Lizenzen veröffentlicht. Andere vordefinierte Schaltungen sind von Entwickler-Communities wie OpenCores (in der Regel unter freien und offenen Quelllizenzen wie der GPL, BSD oder ähnlicher Lizenz) und anderen Quellen verfügbar. Solche Ausführungen sind als "Open-Source-Hardware" bekannt. In einem typischen Design-Flow simuliert ein FPGA-Anwendungsentwickler das Design auf mehreren Stufen während des gesamten Designprozesses. Zunächst wird die RTL-Beschreibung in VHDL oder Verilog simuliert, indem Testbänke erstellt werden, um das System zu simulieren und Ergebnisse zu beobachten. Nachdem die Synthesemaschine das Design auf eine Netzliste abgebildet hat, wird die Netzliste in eine Gate-Level-Beschreibung übersetzt, in der die Simulation wiederholt wird, um die Synthese ohne Fehler zu bestätigen. Schließlich ist in der FPGA die Konstruktion festgelegt, an welcher Stelle Vermehrungsverzögerungen addiert werden können und die Simulation mit diesen Werten wieder annotiert auf die Netzliste läuft. In jüngerer Zeit wird OpenCL (Open Computing Language) von Programmierern genutzt, um die Leistungsfähigkeit und Leistungseffizienz von FPGAs zu nutzen. OpenCL ermöglicht es Programmierern, Code in der C-Programmiersprache zu entwickeln und FPGA-Funktionen als OpenCL-Kernels mit OpenCL-Konstrukten anzusprechen. Weitere Informationen finden Sie unter High-Level-Synthese und C bis HDL. Grundlegende Prozesstechnik Typen SRAM – basierend auf statischer Speichertechnologie. In-System programmierbar und neu programmierbar. Erfordert externe Boot-Geräte. CMOS. Derzeit im Einsatz. Insbesondere können Flash-Speicher oder EEPROM-Geräte häufig Inhalte in interne SRAM laden, die Routing und Logik steuert. Fuse – Einmal programmierbar. Bipolar.Obsolete. Antifuse – Einmal programmierbar.CMOS.PROM – Programmable Read-Only Memory-Technologie. Einmal programmierbar durch Kunststoffverpackung. Obsolete.EPROM – Erasable Programmable Read-Only Memory Technologie. Einmal programmierbar, aber mit Fenster, kann mit ultraviolett (UV) light.CMOS.Obsolete.EEPROM gelöscht werden – Elektrische Erasable Programmable Read-Only Memory-Technologie. Kann auch in Kunststoffverpackungen gelöscht werden. Einige, aber nicht alle EEPROM-Geräte können im System programmiert werden. CMOS. Flash – Flash-erase EPROM-Technologie. Kann auch in Kunststoffverpackungen gelöscht werden. Einige, aber nicht alle Flash-Geräte können im System programmiert werden. Üblicherweise ist eine Flash-Zelle kleiner als eine äquivalente EEPROM-Zelle und ist daher kostengünstiger herzustellen. CMOS Wichtigste Hersteller Im Jahr 2016 waren die langjährigen Branchen-Rivalen Xilinx (jetzt AMD) und Altera (jetzt eine Intel-Tochter) die FPGA-Marktführer. Damals kontrollierten sie fast 90 Prozent des Marktes. Sowohl Xilinx als auch Altera bieten proprietäre elektronische Design-Automatisierungssoftware für Windows und Linux (ISE/Vivado und Quartus), mit der Ingenieure ihre Entwürfe entwerfen, analysieren, simulieren und synthetisieren können. Weitere Hersteller sind: Mikrochip: Microsemi (vorher Actel), Herstellung von Antifuse-, Flash-basierten, Mixed-Signal FPGAs; erworben von Microchip im Jahr 2018 Atmel, eine zweite Quelle von einigen Altera-kompatiblen Geräten; auch FPSLIC oben erwähnt; erworben von Microchip in 2016 Lattice Semiconductor, die Low-Power SRAM-basierte FPGAs mit integriertem Konfigurationsblitz, Instant-on und Live-Rekonfiguration SiliconBlue Im März 2010 kündigte Tabula ihre FPGA-Technologie an, die zeitmultiplexe Logik und Verbindung nutzt, die potenzielle Kosteneinsparungen für hochdichte Anwendungen erfordert. Am 24. März 2015 hat Tabula offiziell geschlossen. Am 1. Juni 2015 kündigte Intel an, dass es Altera für ungefähr $16,7 Milliarden erwerben würde und den Erwerb am 30. Dezember 2015 abgeschlossen. Am 27. Oktober 2020 kündigte AMD an, sie würde Xilinx erwerben. Siehe auch FPGA Mezzanine Card FPGA Prototyping Liste der HDL-Simulatoren Liste der Xilinx FPGAs Verilog und SystemVerilog Hardware Beschreibung Sprachen VHDL, Very High Speed Integrated Circuit Hardware Beschreibung Sprache Hardware Beschleunigung für eine Übersicht der Computing basiert vor allem in Hardware Notes ReferenzenWeiter lesen Sadrozinski, Hartmut F.-W; Wu, Jinyuan (2010). Anwendungen von feldprogrammierbaren Gate Arrays in der wissenschaftlichen Forschung. Taylor & Francis.ISBN 978-1-4398-4133-4.Wirth, Niklaus (1995). Digital Circuit Design Ein Einführungstextbuch.Springer.ISBN 978-3-540-58577-0.Mitra, Jubin (2018)."Ein FPGA-basiertes Phasenmesssystem". IEEE Transactions on Very Large Scale Integration (VLSI) Systems.IEEE.26: 133–142.doi:10.1109/TVLSI.2017.2758807.S2CID 4920719.Mencer, Oskar et al.(2020). " Geschichte, Status und Zukunft von FPGAs". Kommunikation der ACM.ACM.Vol.63, Nr. 10.doi:10.1145/3410669 Externe Links Was ist ein FPGA? auf YouTube