Eine Domain-spezifische Sprache (DSL) ist eine auf eine bestimmte Anwendungsdomäne spezialisierte Computersprache. Dies steht im Gegensatz zu einer allgemeingültigen Sprache (GPL), die über Domänen weit verbreitet ist. Es gibt eine Vielzahl von DSLs, von weit verbreiteten Sprachen für gemeinsame Domänen, wie HTML für Webseiten, bis zu Sprachen, die von nur einem oder einigen Teilen von Software verwendet werden, wie MUSH Softcode. DSLs können durch die Art der Sprache weiter unterteilt werden und umfassen Domänen-spezifische Markupsprachen, Domänen-spezifische Modellierungssprachen (im Allgemeinen Spezifikationssprachen) und Domänen-spezifische Programmiersprachen. Spezielle Computersprachen gibt es immer im Computerzeitalter, aber der Begriff "domainspezifische Sprache" ist durch den Anstieg der Domain-spezifischen Modellierung populärer geworden. Einfachere DSLs, insbesondere von einer einzigen Anwendung, werden manchmal informell Mini-Sprachen genannt. Die Linie zwischen allgemeinen Sprachen und Domänensprachen ist nicht immer scharf, da eine Sprache spezielle Merkmale für eine bestimmte Domäne haben kann, sondern breiter anwendbar sein kann, oder umgekehrt grundsätzlich breit anwendbar sein kann, sondern in der Praxis vor allem für eine bestimmte Domäne verwendet wird. Zum Beispiel wurde Perl ursprünglich als Textverarbeitungs- und Leimsprache entwickelt, für dieselbe Domäne wie AWK- und Shell-Skripte, wurde aber später meist als allgemeine Programmiersprache verwendet. Im Gegensatz dazu ist PostScript eine Turing-Komplettsprache und kann grundsätzlich für jede Aufgabe verwendet werden, aber in der Praxis wird eng als Seitenbeschreibungssprache verwendet. Verwendung Das Design und die Verwendung entsprechender DSLs ist ein wesentlicher Bestandteil der Domain-Engineering, indem eine Sprache verwendet wird, die für die jeweilige Domäne geeignet ist – dies kann aus der Verwendung einer vorhandenen DSL oder GPL oder der Entwicklung einer neuen DSL bestehen. Die spracheorientierte Programmierung betrachtet die Schaffung von Sondersprachen für das Ausdrucken von Problemen im Rahmen des Problemlösungsprozesses. Die Erstellung einer Domain-spezifischen Sprache (mit Software, um sie zu unterstützen), anstatt eine bestehende Sprache wiederherzustellen, kann lohnenswert sein, wenn die Sprache eine bestimmte Art von Problem oder Lösung deutlicher zum Ausdruck bringt als eine bestehende Sprache, die es erlauben würde, und die Art des Problems erscheint ausreichend häufig. Pragmatisch kann eine DSL auf einen bestimmten Problembereich, eine bestimmte Problemdarstellungstechnik, eine bestimmte Lösungstechnik oder andere Aspekte einer Domäne spezialisiert sein. Überblick Eine Domain-spezifische Sprache wird speziell erstellt, um Probleme in einer bestimmten Domäne zu lösen und ist nicht in der Lage, Probleme außerhalb zu lösen (obwohl technisch möglich sein kann). Im Gegensatz dazu werden allgemeine Sprachen erstellt, um Probleme in vielen Domänen zu lösen. Die Domain kann auch ein Geschäftsbereich sein. Einige Beispiele für Geschäftsbereiche sind: Lebensversicherungsrichtlinien (die intern von einem großen Versicherungsunternehmen entwickelt wurden) Kampfsimulationslohnrechnung Eine Domain-spezifische Sprache ist irgendwo zwischen einer winzigen Programmiersprache und einer Skriptsprache und wird häufig analog zu einer Programmierbibliothek verwendet. Die Grenzen zwischen diesen Konzepten sind ziemlich verschwommen, ähnlich wie die Grenze zwischen Skriptsprachen und allgemeiner Sprachen. Bei der Gestaltung und Implementierung sind Domain-spezifische Sprachen (oder oft deklarierte Syntaxe oder Grammatik) mit ganz spezifischen Zielen in der Gestaltung und Umsetzung. Eine Domain-spezifische Sprache kann eine visuelle Diagrammsprache sein, wie sie vom Generic Eclipse Modeling System, programmatischen Abstraktionen wie dem Eclipse Modeling Framework oder Textsprachen erstellt wird. Zum Beispiel hat das Befehlszeilen-Dienstprogramm grep eine regelmäßige Expressions-Syntax, die Muster in Textzeilen übereinstimmt. Das sed-Dienstprogramm definiert eine Syntax für die Anpassung und den Ersatz regelmäßiger Ausdrücke. Oft können diese winzigen Sprachen in einer Shell zusammen verwendet werden, um komplexere Programmieraufgaben durchzuführen. Die Zeile zwischen Domänensprachen und Skriptsprachen ist etwas verwischt, aber Domänenspezifische Sprachen fehlen oft Low-Level-Funktionen für Dateisystemzugriff, Interprozesssteuerung und andere Funktionen, die vollwertige Programmiersprachen, Skripting oder anders charakterisieren. Viele Domain-spezifische Sprachen kompilieren nicht auf Byte-Code oder ausführbaren Code, sondern auf verschiedene Arten von Medienobjekten: GraphViz exportiert nach PostScript, GIF, JPEG usw., wobei Csound zu Audiodateien kompiliert und eine ray-tracing-Domain-spezifische Sprache wie POV-Compiles zu Grafikdateien kompiliert. Eine Computersprache wie SQL stellt einen interessanten Fall dar: Sie kann als Domain-spezifische Sprache angesehen werden, weil sie auf eine bestimmte Domäne (im Fall von SQL, Zugriff auf und Verwaltung von relationalen Datenbanken) spezifisch ist und oft von einer anderen Anwendung aufgerufen wird, aber SQL hat mehr Keywords und Funktionen als viele Skriptsprachen und wird oft als Sprache in seinem eigenen Recht gedacht, vielleicht wegen der Prävalenz von Datenbankmanipulation in der Programmierung und der Menge an Mastery erforderlich, um eine Sprache zu sein. Viele Domänensprachen haben APIs freigelegt und können ohne Unterbrechung des Ablaufs der Ausführung oder eines separaten Prozesses von anderen Programmiersprachen abgerufen werden und können somit als Programmierbibliotheken fungieren. Programmierwerkzeuge Einige Domänen-spezifische Sprachen erweitern sich im Laufe der Zeit um vollwertige Programmierwerkzeuge, die die Frage, ob eine Sprache Domain-spezifisch ist oder nicht. Ein gutes Beispiel ist die funktionelle Sprache XSLT, die speziell für die Transformation eines XML-Diagramms in ein anderes entwickelt wurde, das seit seiner Einführung erweitert wurde, um (insbesondere in seiner 2.0-Version) für verschiedene Formen der Dateisystem-Interaktion, String und Date-Manipulation und Datentypisierung zu ermöglichen. Im Modellbau finden sich viele Beispiele für Domain-spezifische Sprachen wie OCL, eine Sprache zur Dekoration von Modellen mit Behauptungen oder QVT, eine Domänen-spezifische Transformationssprache. Sprachen wie UML sind jedoch typischerweise allgemeine Modellierungssprachen. Zusammenfassend kann eine Analogie nützlich sein: Eine Very Little Language ist wie ein Messer, das in tausenden von verschiedenen Arten verwendet werden kann, vom Schneiden von Nahrung bis zum Zerschneiden von Bäumen. Eine Domain-spezifische Sprache ist wie ein Elektro-Bohrer: Es ist ein leistungsstarkes Werkzeug mit einer Vielzahl von Anwendungen, aber ein bestimmter Kontext, nämlich Löcher in Sachen. Eine Allgemeine Zwecksprache ist eine komplette Werkbank, mit einer Vielzahl von Werkzeugen, die für die Durchführung einer Vielzahl von Aufgaben bestimmt sind. Domänenspezifische Sprachen sollten von Programmierern verwendet werden, die, wenn sie ihren aktuellen Workbench betrachten, erkennen, dass sie einen besseren Bohrer benötigen und feststellen, dass eine bestimmte Domänensprache genau das bietet. Domain-spezifische Sprachthemen Externe und Embedded Domain-Spezialsprachen DSLs, die über einen unabhängigen Dolmetscher oder Compiler implementiert werden, werden als Externe Domain-Spezialsprachen bezeichnet. Bekannte Beispiele sind LaTeX oder AWK. Eine separate Kategorie, die als Embedded (oder Interne)Domain-Spezialsprachen bekannt ist, wird in der Regel innerhalb einer Hostsprache als Bibliothek implementiert und ist tendenziell auf die Syntax der Host-Sprache beschränkt, obwohl dies von Host-Sprachfähigkeiten abhängt. Nutzungsmuster Es gibt mehrere Nutzungsmuster für Domain-spezifische Sprachen: Verarbeitung mit eigenständigen Werkzeugen, die über den direkten Benutzerbetrieb aufgerufen werden, oft auf der Kommandozeile oder aus einer Makefile (z.B. für die regelmäßige Expressionsanpassung, sed, lex, yacc, das GraphViz-Toolset, etc.) Domain-Expressionssprachen, die mit Programmiersprachen-Makrosystemen implementiert werden und als Bibliotheken implementiert werden, die die Syntax ihrer Host-Allgemeine Zwecksprache ausnutzen, oder eine Submenge davon unter Hinzufügung von Domänen-spezifischen Sprachelementen (Datentypen, Routinen, Methoden, Makros usw.) (z.B. jQuery, React, Embedded SQL, LINQ) Viele Domain-spezifische Sprachen können auf mehr als eine Weise verwendet werden. DSL-Code, der in einer Hostsprache eingebettet ist, kann spezielle Syntax-Unterstützung haben, wie Regexes in sed, AWK, Perl oder JavaScript, oder kann als Strings weitergegeben werden. Designziele Die Einbindung eines Domain-spezifischen Sprachansatzes in die Softwaretechnik beinhaltet Risiken und Chancen. Die gut gestaltete Domain-spezifische Sprache schafft die richtige Balance zwischen diesen. Domänenspezifische Sprachen haben wichtige Designziele, die mit denen der Allgemeinsprachen im Gegensatz stehen: Domain-spezifische Sprachen sind weniger umfassend. Domain-spezifische Sprachen sind in ihrer Domain viel ausdrucksvoller. Domain-spezifische Sprachen sollten minimale Redundanz aufweisen. Idioms Bei der Programmierung sind Idiome Methoden, die von Programmierern zur Bewältigung gemeinsamer Entwicklungsaufgaben auferlegt werden, z.B.: Stellen Sie sicher, dass Daten gespeichert werden, bevor das Fenster geschlossen wird. Code bearbeiten, wenn Befehlszeilenparameter ändern, weil sie das Programmverhalten beeinflussen. Allgemeine Programmiersprachen unterstützen solche Idiome selten, können aber Domänenspezifische Sprachen beschreiben, z.B.: Ein Skript kann automatisch Daten speichern. Eine Domain-spezifische Sprache kann die Befehlszeileneingabe parametrieren. Beispiele für Domänen-spezifische Sprachen sind HTML, Logo für Bleistift-ähnliche Zeichnung, Verilog und VHDL Hardware Beschreibung Sprachen, MATLAB und GNU Octave für Matrix-Programmierung, Mathematica, Maple und Maxima für symbolische Mathematik, Spezifikation und Beschreibung Sprache für reaktive und verteilte Systeme, Tabellenkalkulationen und Makros, SQL für relationale Datenbank-Abfragen, YACC Grammatik für die Erstellung von Parsern, regelmäßige GameMaker Language Die von GameMaker Studio verwendete GML-Skripting-Sprache ist eine Domain-spezifische Sprache, die auf Anfänger-Programmierer ausgerichtet ist, um die Programmierung leicht zu lernen. Während die Sprache als Mischung aus mehreren Sprachen wie Delphi, C,+ und BASIC dient, gibt es einen Mangel an Strukturen, Datentypen und andere Funktionen einer vollwertigen Programmiersprache. Viele der eingebauten Funktionen sind zum Zwecke der einfachen Portabilität geschliffen. Die Sprache dient vor allem dazu, es für jeden leicht zu machen, die Sprache zu holen und ein Spiel zu entwickeln. ColdFusion Markup Language ColdFusion ist ein weiteres Beispiel für eine Domain-spezifische Sprache für datengesteuerte Webseiten. Diese Scripting-Sprache wird verwendet, um Sprachen und Dienstleistungen wie Java, .NET, C,+ SMS, E-Mail, E-Mail-Server, http, ftp, Austausch, Verzeichnis-Dienste und Dateisysteme für die Verwendung in Websites zu weben. Die ColdFusion Markup Language (CFML) enthält eine Reihe von Tags, die in ColdFusion Seiten verwendet werden können, um mit Datenquellen zu interagieren, Daten zu manipulieren und Ausgabe anzuzeigen. CFML-Tag-Syntax ist ähnlich wie HTML-Element-Syntax. Erlang OTP Die Erlang Open Telecom Platform wurde ursprünglich für den Einsatz innerhalb von Ericsson als Domain-spezifische Sprache konzipiert. Die Sprache selbst bietet eine Plattform von Bibliotheken, um endliche State-Maschinen, generische Server und Event-Manager zu erstellen, die es einem Ingenieur schnell ermöglichen, Anwendungen zu implementieren oder Bibliotheken zu unterstützen, die in Industrie-Benchmarks gezeigt wurden, um andere Sprachen, die für eine gemischte Reihe von Domains, wie C und C++ bestimmt sind, zu übertreffen. Die Sprache ist jetzt offiziell Open Source und kann von ihrer Website heruntergeladen werden. FilterMeister FilterMeister ist eine Programmierumgebung, mit einer Programmiersprache, die auf C basiert, zum spezifischen Zweck der Erstellung von Photoshop-kompatiblen Bildverarbeitungsfilter-Plugins; FilterMeister läuft als Photoshop-Plugin selbst und kann Skripte laden und ausführen oder kompilieren und als unabhängige Plug-Ins exportieren. Obwohl die FilterMeister-Sprache einen signifikanten Teil der C-Sprache und Funktionsbibliothek reproduziert, enthält sie nur jene Funktionen, die im Kontext von Photoshop-Plugins verwendet werden können und fügt eine Reihe von spezifischen Merkmalen hinzu, die nur in dieser spezifischen Domäne nützlich sind. MediaWiki Vorlagen Das Template-Feature von MediaWiki ist eine eingebettete Domänen-spezifische Sprache, deren grundlegendes Ziel darin besteht, die Erstellung von Seitenvorlagen und die Umschließung von MediaWiki-Seiten in andere MediaWiki-Seiten zu unterstützen. Nutzung von Software Um die Produktivität und Qualität des Software-Engineerings zu verbessern, hat es großes Interesse an Domain-spezifischen Sprachen gegeben. Domain-spezifische Sprache könnte möglicherweise eine robuste Reihe von Werkzeugen für effiziente Software-Engineering bieten. Solche Werkzeuge beginnen, ihren Weg in die Entwicklung kritischer Softwaresysteme zu machen. Das Software Cost Reduction Toolkit ist ein Beispiel dafür. Das Toolkit ist eine Reihe von Diensten, darunter ein Spezifikations-Editor, um eine Anforderungsspezifikation zu erstellen, ein Abhängigkeits-Diagramm-Browser, um variable Abhängigkeiten anzuzeigen, ein Konsistenz-Checker, um fehlende Fälle in gut formulierten Formeln in der Spezifikation zu fangen, ein Modell-Checker und ein Theorem prover, um die Programmeigenschaften gegen die Spezifikation zu überprüfen, und ein invarianter Generator, der automatisch Invarianten auf den Anforderungen baut. Eine neuere Entwicklung ist eine sprachorientierte Programmierung, eine integrierte Software-Engineering-Methodik, die hauptsächlich auf der Erstellung, Optimierung und Nutzung von Domain-spezifischen Sprachen basiert. Metakompiler Durchführende sprachorientierte Programmierung sowie alle anderen Formen von Domain-spezifischen Sprachen sind die Klasse der Compiler-Schreibwerkzeuge, die Metakompiler genannt werden. Ein Metakompiler ist nicht nur für die Generierung von Parsern und Codegeneratoren für Domänen-spezifische Sprachen nützlich, sondern ein Metakompiler selbst kompiliert ein speziell für die Domäne der Metaprogrammierung konzipiertes Domänen-spezifisches Metallanguage. Neben der Parsing-Domänensprache sind Metakompiler nützlich, um eine Vielzahl von Software-Engineering- und Analysetools zu generieren. Die Meta-Kopiler-Methodik findet sich häufig in Programmtransformationssystemen. Metakompiler, die sowohl in der Informatik als auch in der Computerindustrie eine wichtige Rolle gespielt haben, sind Meta-II und sein nachkommender TreeMeta. Unreal Engine vor Version 4 und anderen Spielen Unreal und Unreal Tournament enthüllte eine Sprache namens UnrealScript. Dies ermöglichte eine rasche Entwicklung von Modifikationen gegenüber dem Konkurrenten Quake (mit dem Id Tech 2 Motor). Die Id Tech-Engine verwendet Standard C-Code Bedeutung C musste erlernt und richtig angewendet werden, während UnrealScript für einfache Bedienung und Effizienz optimiert wurde. In ähnlicher Weise hat die Entwicklung neuerer Spiele ihre eigenen spezifischen Sprachen eingeführt, ein weiteres gemeinsames Beispiel ist Lua für das Drehen. Regeln Engines for Policy Automation Verschiedene Business Rules Engines wurden entwickelt, um Politik- und Geschäftsregeln zu automatisieren, die sowohl in der staatlichen als auch in der privaten Industrie verwendet werden. ILOG, Oracle Policy Automation, DTRules, Drools und andere unterstützen DSLs, die verschiedene Problembereiche unterstützen sollen. DTRules geht so weit, eine Schnittstelle für die Verwendung mehrerer DSLs innerhalb eines Regelsets zu definieren. Der Zweck von Business Rules Engines ist es, eine Darstellung der Geschäftslogik in möglichst human lesbarer Weise zu definieren. Damit können sowohl Fachexperten als auch Entwickler mit der gleichen Darstellung der Geschäftslogik arbeiten und verstehen. Die meisten Regeln Engines bieten sowohl einen Ansatz zur Vereinfachung der Steuerungsstrukturen für die Geschäftslogik (z.B. unter Verwendung von Deklarativen Regeln oder Entscheidungstabellen) als auch Alternativen zur Programmierung von Syntax zugunsten von DSLs. Statistische Modellsprachen Statistische Modellierer haben Domain-spezifische Sprachen wie R (eine Implementierung der S-Sprache), Bugs, Jags und Stan entwickelt. Diese Sprachen liefern eine Syntax zur Beschreibung eines Bayesischen Modells und erzeugen eine Methode zur Lösung dieses Modells mittels Simulation. Generieren Sie Modell und Dienstleistungen für mehrere Programmiersprachen Generieren Sie Objekthandling und Dienste basierend auf einer Schnittstellenbeschreibung Sprache für eine Domain-spezifische Sprache wie JavaScript für Webanwendungen, HTML für Dokumentation, C+ für Hochleistungscode, etc. Dies geschieht durch übergreifende Frameworks wie Apache Thrift oder Google Protocol Buffers. Gherkin Gherkin ist eine Sprache, die Testfälle definieren soll, um das Verhalten der Software zu überprüfen, ohne anzugeben, wie dieses Verhalten umgesetzt wird. Es soll von nicht-technischen Benutzern mit einer natürlichen Sprachsyntax und einem linienorientierten Design gelesen und verwendet werden. Die mit Gherkin definierten Tests müssen dann in einer allgemeinen Programmiersprache durchgeführt werden. Die Schritte in einem Gherkin-Programm fungieren dann als Syntax für die für Nichtentwickler zugängliche Verfahrenseinrufung. Weitere Beispiele Weitere prominente Beispiele für Domain-spezifische Sprachen sind: Emacs Lisp Spielbeschreibung Sprache OpenGL Shading Language Gradle ActionScript Vorteile und Nachteile Einige der Vorteile: Domänenspezifische Sprachen ermöglichen es, Lösungen im Idiom und auf der Ebene der Abstraktion der Problemdomäne auszudrücken. Die Idee ist, dass Domain-Experten selbst Domain-spezifische Sprachprogramme verstehen, validieren, modifizieren und oft sogar entwickeln können. Dies ist jedoch selten der Fall. Domänenspezifische Sprachen erlauben eine Validierung auf Domänenebene. Solange die Sprachkonstrukte sicher sind, kann jeder mit ihnen geschriebene Satz als sicher angesehen werden. Domain-spezifische Sprachen können dazu beitragen, die Entwicklung von Business-Informationssystemen von traditionellen Software-Entwicklern auf die typischerweise größere Gruppe von Domain-Experten zu verschieben, die (entweder mit weniger technischer Expertise) ein tieferes Wissen über die Domain haben. Domänenspezifische Sprachen sind angesichts ihres begrenzten Umfangs leichter zu lernen. Einige der Nachteile: Kosten für das Lernen einer neuen Sprache gegen ihre begrenzte Anwendbarkeit Kosten für die Gestaltung, Umsetzung und Aufrechterhaltung einer Domain-spezifischen Sprache sowie der Werkzeuge, die erforderlich sind, um mit ihr (IDE) Finden, Setzen und Aufrechterhaltung der richtigen Reichweite zu entwickeln. Schwierigkeiten beim Ausgleich von Kompromissen zwischen Domänenspezifität und allgemeiner Programmiersprache. Potentialverlust der Prozessoreffizienz im Vergleich zu handcodierter Software. Verbreitung ähnlicher nicht standardisierter Domain-spezifischer Sprachen, z.B. einer DSL, die innerhalb eines Versicherungsunternehmens verwendet wird, gegenüber einer DSL, die in einem anderen Versicherungsunternehmen verwendet wird. Nicht-technische Domain-Experten finden es schwer, DSL-Programme selbst zu schreiben oder zu modifizieren. Erhöhte Schwierigkeit, die DSL mit anderen Komponenten des IT-Systems zu integrieren (im Vergleich zur Integration mit einer Allgemeinsprache). Niedrige Versorgung von Experten in einer bestimmten DSL tendiert dazu, Arbeitskosten zu erhöhen. Es ist schwerer, Codebeispiele zu finden. Werkzeuge zur Auslegung von Domänen-spezifischen Sprachen JetBrains MPS ist ein Werkzeug zur Gestaltung von Domänen-spezifischen Sprachen. Es verwendet Projektionsbearbeitung, die es erlaubt, die Grenzen der Sprachparser zu überwinden und DSL-Editoren zu erstellen, wie z.B. mit Tabellen und Diagrammen. Es implementiert sprachorientierte Programmierung. MPS kombiniert eine Umgebung für Sprachdefinition, Spracharbeit und eine integrierte Entwicklungsumgebung (IDE) für solche Sprachen. Xtext ist ein Open-Source-Software-Framework zur Entwicklung von Programmiersprachen und Domain-spezifischen Sprachen (DSLs). Im Gegensatz zu Standard-Parsergeneratoren erzeugt Xtext nicht nur einen Parser, sondern auch ein Klassenmodell für den abstrakten Syntaxbaum.Darüber hinaus bietet es eine voll ausgestattete, anpassbare Eclipse-basierte IDE. Racket ist eine plattformübergreifende Sprach-Toolchain, einschließlich Compiler, JIT-Compiler, IDE und Befehlszeilen-Tools, die für die Erstellung sowohl Domänen-spezifische Sprachen als auch völlig neue Sprachen konzipiert sind. Siehe auch Sprache Workbench Architektur Beschreibung Sprache Domain-spezifische Unterhaltungssprache Sprache für bestimmte Zwecke Jargon Metalinguistic Abstraktion Programming Domain Referenzen Weiter lesen Dunlavey (1994). Bessere Anwendungen bauen: eine Theorie der effizienten Softwareentwicklung. International Thomson Publishing. ISBN 0-442-01740-5.Heitmeyer, Constance (1998). "Die Verwendung des SCR-Toolsatzes zur Angabe von Softwareanforderungen" (PDF). Proceedings, Second IEEE Workshop on Industrial Strength Formal Specification Techniques, Boca Raton, FL, Okt. 19, 1998: 12–13.doi:10.1109/WIFT.1998.766290.ISBN 0-7695-0081-1. S2CID 16079058. Mernik, Marjan; Heering, Jan & Sloane, Anthony M. (2005). " Wann und wie Domain-spezifische Sprachen entwickelt werden". ACM Computing Surveys.37 (4): 316–344.doi:10.1145/1118890.1118892.S2CID 207158373.Spinellis, Diomidis (2001). " Bemerkenswerte Designmuster für Domänenspezifische Sprachen". Journal of Systems and Software.56 (1): 91–99.doi:10.1016/S0164-1212(00)00089-3.Parr, Terence (2007). The Definitive ANTLR Referenz: Building Domain-Specific Languages.ISBN 978-0-9787392-5-6.Larus, James (2009). "Spending Moore's Dividend".Kommunikation der ACM.52 (5): 62–69.doi:10.1145/1506409.1506425.ISSN 0001-0782.S2CID 2803479.Werner Schuster (15. Juni 2007). " Was ist ein Ruby DSL und was ist nicht?". C4Media.Retrieved 2009-09-08.Fowler, Martin (2011). Domain Specific Languages.ISBN 978-0-321-71294-3.Brambilla, Marco; Cabot, Jordi; Wimmer, Manuel (2012). Model Driven Software Engineering in der Praxis. Synthesis Lectures on Software Engineering.#1.Morgan & Claypool.ISBN 978-1-62705-708-0. Externe Links Minilanguages, The Art of Unix Programming, von Eric S. Raymond Martin Fowler auf Domain-spezifische Sprachen und Language Workbenches. Auch in einer Video-Präsentation Domain-Specific Sprachen:An Annotated Bibliography Eintägige Compiler: Aufbau einer kleinen Domain-spezifischen Sprache mittels OCaml Usenix Association: Konferenz über Domain-Specific Languages (DSL '97) und 2. Konferenz über Domain-Specific Languages (DSL '99)Internal Domain-Specific Languages Die komplette Anleitung zu (externen) Domain-Spezialsprachen jEQN Beispiel der internen Domain-Specific Sprache für die Modellierung und Simulation von erweiterten Queueing-Netzwerken. ArtikelExterne DSLs mit Eclipse-Technologie "Building Domain-Specific Languages over a Language Framework". CiteSeerX 10.1.1.50.4685 Verwendung von Acceleo mit GMF : Erstellung von Präsentationen eines MindMap DSL-Modellers UML gegen Domain-Specific Languages Sagar Sen; et al." Meta-Modell Pruning".CiteSeerX 10.1.1.156.6008