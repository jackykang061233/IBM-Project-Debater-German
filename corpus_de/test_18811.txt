Software-Engineering (SCM oder S/W CM) ist die Aufgabe, Änderungen der Software zu verfolgen und zu kontrollieren, die Teil des größeren disziplinübergreifenden Bereichs der Konfigurationsverwaltung sind. SCM-Praktiken umfassen die Revisionskontrolle und die Einrichtung von Basispunkten. Wenn etwas schief geht, kann SCM bestimmen, was geändert wurde und wer ihn geändert hat. Wenn eine Konfiguration gut funktioniert, kann SCM ermitteln, wie sie in vielen Gastgebern aufgebracht werden kann. The acronym SCM wird auch als Ausgangs-Management-Prozess und Softwarewechsel und -formationsmanagement erweitert. Jedoch wird die Konfiguration allgemein verstanden, um Änderungen zu erfassen, die normalerweise von einem Systemverwalter vorgenommen werden. Ziele Ziele von SCM sind in der Regel: Konfigurationsidentifikation - Identifizierung von Konfigurationen, Zusammensetzungsgegenständen und Basislinien. Konfigurationskontrolle - Umsetzung eines kontrollierten Veränderungsprozesses. Dies wird in der Regel durch die Einrichtung eines Wechselkontrollgremiums erreicht, dessen Hauptaufgabe darin besteht, alle Änderungsanträge zu genehmigen oder abzulehnen, die gegen jede Basislinie versandt werden. Gradrechnung - Erfassung und Berichterstattung aller erforderlichen Informationen über den Stand des Entwicklungsprozesses. Konfigurationsprüfung - Gewährleistung, dass die Konfigurationen alle geplanten Teile enthalten und in Bezug auf ihre Angaben, einschließlich Anforderungen, architektonische Spezifikationen und Benutzerhandbücher, solide sind. Baumanagement - Verwaltung des Prozesses und der für Bauarbeiten verwendeten Werkzeuge. Prozessmanagement - Gewährleistung der Einhaltung des Entwicklungsprozesses der Organisation. Umweltmanagement - Verwaltung der Software und Hardware, die das System aufnehmen. Teamwork - Erleichterung von Teamwechseln im Zusammenhang mit dem Prozess. Infektionsverfolgung - sicherzustellen, dass jeder Fehler wieder auf die Quelle zurückverfolgt hat. Mit der Einführung von Cloud Computing und DevOps wurden in einigen Fällen die Zwecke der SCM-Werkzeuge zusammengefasst. Die SCM-Werkzeuge selbst haben sich zu virtuellen Geräten entwickelt, die als virtuelle Maschinen sofort eingeführt werden können und mit Staat und Version gerettet werden können. Die Werkzeuge können Cloud-basierte virtuelle Ressourcen, einschließlich virtuelle Geräte, Lagereinheiten und Softwarepakete, modellieren und verwalten. Die Rollen und Verantwortlichkeiten der Akteure sind zusammen mit Entwicklern nun in der Lage, dynamische virtuelle Server und verwandte Ressourcen dynamisch zu entwickeln. Geschichte Die Geschichte des Software-Verwaltungsmanagements (SCM) im Computer kann so früh wie die 1950er Jahre zurückverfolgt werden, als CM (für die Konfigurationsmanagement), ursprünglich für die Entwicklung von Hardware und Produktion, auf die Entwicklung von Software angewandt wurde. Frühsoftware hatte einen physischen Fußabdruck wie Karten, Bürokratie und andere Medien. Das erste Software-Verwaltungsmanagement war ein manueller Betrieb. Mit den Fortschritten in der Sprache und Komplexität wurde das Software-Engineering, an der das Programmiermanagement und andere Methoden beteiligt sind, aufgrund von Problemen wie Zeitplan, Haushalt und Qualität ein großes Problem. Konkrete Lehren, über die Jahre hinweg, führten zur Definition und Einrichtung von Verfahren und Werkzeugen. Letztendlich wurden die Werkzeuge Systeme zur Verwaltung von Softwareänderungen. Industrieweite Praktiken wurden als Lösungen angeboten, entweder in offener oder herstellereigener Weise (wie Revisionskontrollsystem). Mit zunehmendem Einsatz von Computern haben sich Systeme ergeben, die einen breiteren Geltungsbereich haben, einschließlich Bedarfsmanagement, Designalternativen, Qualitätskontrolle und mehr; spätere Werkzeuge folgten den Leitlinien von Organisationen wie dem Modell der Fähigkeiten Maturity des Software Engineering Institute. Siehe auch die Anwendung des Lebenszyklusmanagements von Open-Source-Software-Abgleich von Version Control Software fortlaufende Automatisierungsliste der überarbeiteten Software-Infrastruktur als Code Referenzen 8 Lesen 828-2012 IEC Standard für das Konfigurationsmanagement in Systemen und Software Engineering. 2012doi:10.1109/IEEESTD.2012.6170935.ISBN gegen0-7381-7232-3.Aiello, R. (2010) Kapazitätsmanagement Best Practices: Praktische Methoden, die in der Real Welt arbeiten (1. CD-Wesley.ISBN 0-321-68586-5.Babich, W.A (1999) Management, Koordinierung für Teamproduktivität.1. Boston: Wood-Wesley Berczuk, Appleton; (2003). Muster für das Management von Software: effektive Teamarbeit, praktische Integration (1.) Addison-Wesley.ISBN 0-201-74117-2.Bersoff, E.H (1997). Elemente der Software-Datenbankverwaltung. Preis Medien, Los Batitos, CA, 1-32 Dennis, A, Wixom, B.H & Te Gruppen, D. (2002). Systemanalyse & Design: Ein objektorientiertes Konzept mit UML. Hoboken, New York: John Kuhn & Sons,Inc. Department of Defence, USA (2001). Militärhandbuch: Konfigurationsmanagement (rev.A) (MIL-HDBK-61A). Januar 2010: http://www.everyspec.com/MIL-HDBK/MIL-HDBK-0001-0099/MIL-HDBK-61_11531 Futrell, R.T et al.(2002). Qualitätssoftware Projektmanagement.1. Prentice-Hall.International Organization for Standardization (2003). ISO 10007: Qualitätsmanagementsysteme – Leitlinien für das Konfigurationsmanagement. Saeki M. (2003). Integration von Metrics in die Entwicklung von Informationssystemen Methoden: Anwendung der Methode Engineering Technik.CAiSE 2003 374–389.Scott, J.A & Nisse, D. (2001) Software-Verwaltung. Leitfaden für Software Engineering Body of Knowledge. Januar 2010: http://www.computer.org/portal/web/swebok/htmlformat Paul M. Duvall, Steve Matyas und Andrew Glover (2007). kontinuierliche Integration: Verbesserung der Softwarequalität und des Risikos.(1st ed). J.-Wesley Professional.ISBN 0-321-33638-0. Außenbeziehungen SCM und ISO 9001 von Robert Bamford und William Cesarbler, SSQC-Verwendungsfälle und Umsetzung von Lebenszyklus-Management-Strategien für Software-System-Management