Bei der Berechnung ist polymorpher Code Code, der einen polymorphen Motor verwendet, um zu mutieren, während der ursprüngliche Algorithmus intakt bleibt - das heißt, der Code ändert sich jedes Mal, wenn er läuft, aber die Funktion des Codes (seiner Semantik) wird sich überhaupt nicht ändern. So erreichen beispielsweise 1+3 und 6-2 das gleiche Ergebnis bei Verwendung unterschiedlicher Werte und Vorgänge. Diese Technik wird manchmal von Computerviren, Shellcodes und Computer-Würmern verwendet, um ihre Anwesenheit zu verbergen. Verschlüsselung ist die häufigste Methode, um Code zu verstecken. Mit Verschlüsselung wird der Hauptkörper des Codes (auch als Nutzlast bezeichnet) verschlüsselt und sinnlos erscheinen. Damit der Code wie zuvor funktioniert, wird dem Code eine Entschlüsselungsfunktion hinzugefügt. Wenn der Code ausgeführt wird, liest diese Funktion die Nutzlast und entschlüsselt sie, bevor sie wiederum ausgeführt wird. Verschlüsselung allein ist nicht Polymorphismus. Um polymorphes Verhalten zu gewinnen, wird das Verschlüsselungs-/Entschlüsselungspaar mit jeder Kopie des Codes mutiert. Dies ermöglicht verschiedene Versionen eines Codes, die alle gleich funktionieren. Die meisten Antiviren-Software und Intrusions-Detektionssysteme (IDS) versuchen, bösartigen Code zu lokalisieren, indem sie Computerdateien und Datenpakete durchsucht, die über ein Computernetzwerk gesendet werden. Findet die Sicherheitssoftware Muster, die bekannten Computerviren oder Würmern entsprechen, so werden geeignete Schritte unternommen, um die Bedrohung zu neutralisieren. Polymorphe Algorithmen machen es für eine solche Software schwierig, den schädlichen Code zu erkennen, weil er ständig mutiert. Malicious Programmierer haben versucht, ihren verschlüsselten Code von dieser Virus-Scanning-Strategie zu schützen, indem die unverschlüsselte Entschlüsselungs-Engine (und die daraus resultierende verschlüsselte Nutzlast) jedes Mal, wenn der Virus oder Wurm propagiert. Antiviren-Software verwendet eine ausgeklügelte Musteranalyse, um zugrunde liegende Muster in den verschiedenen Mutationen der Entschlüsselungsmaschine zu finden, in der Hoffnung, solche Malware zuverlässig zu erkennen. Emulation kann verwendet werden, um polymorphe Obfuskation zu besiegen, indem die Malware sich in einer virtuellen Umgebung entwirren lässt, bevor andere Methoden wie traditionelle Signatur-Scannen verwendet werden. Eine solche virtuelle Umgebung wird manchmal als Sandkasten bezeichnet. Polymorphismus schützt das Virus nicht vor einer solchen Emulation, wenn die entschlüsselte Nutzlast unabhängig von der Variation des Entschlüsselungsalgorithmus gleich bleibt. Metamorphe Code-Techniken können verwendet werden, um die Detektion weiter zu komplizieren, da das Virus ausgeführt werden kann, ohne identifizierbare Codeblöcke im Speicher zu haben, die von Infektion zu Infektion konstant bleiben. Das erste bekannte polymorphe Virus wurde von Mark Washburn geschrieben. Das Virus, genannt 1260, wurde 1990 geschrieben. Ein bekanntes polymorphes Virus wurde 1992 vom Hacker Dark Avenger als Mittel zur Vermeidung von Mustererkennung von Antivirensoftware erstellt. Ein häufiges und sehr virulentes polymorphes Virus ist der Dateiinfektor Virut. Beispiel Dieses Beispiel ist nicht wirklich ein polymorpher Code, sondern dient als Einführung in die Welt der Verschlüsselung über den XOR-Operator. In einem Algorithmus, der die Variablen A und B, aber nicht die Variable C verwendet, könnte es beispielsweise eine große Menge an Code geben, der C ändert, und es würde keinen Einfluss auf den Algorithmus selbst haben, so dass er endlos und ohne zu heed, was das Endprodukt sein wird. Start: GOTO Decryption_ Code Verschlüsselt: ...viele verschlüsselten Codes. Decryption_Code: C = C + 1 A = Verschlüsselte Schleife: B *=A C = 3214 *A B = B XOR Crypto Schlüssel *A = B C = 1 C = A + B A = A + 1 GOTO Loop IF NICHT A = Decrypting_Code C = C^2 GOTO Verschlüsselt CryptoKey: some_random_number Der verschlüsselte Code ist die Nutzlast. Um verschiedene Versionen des Codes zu machen, in jeder Kopie die Mülllinien, die manipulieren C ändern. Der Code innerhalb Verschlüsselt "(Zeilen verschlüsselter Code") kann den Code zwischen Decryption_Code und CryptoKey und jedem Algorithmus für einen neuen Code suchen, der dasselbe tut. Üblicherweise verwendet der Coder eine Null-Taste (z.B. A xor 0 = A) für die erste Virusgeneration, wodurch es für den Coder einfacher wird, weil mit diesem Schlüssel der Code nicht verschlüsselt ist. Der Coder implementiert dann einen inkrementalen Schlüsselalgorithmus oder einen zufälligen. Polymorphe Verschlüsselung Polymorpher Code kann auch verwendet werden, um Verschlüsselungsalgorithmus zu erzeugen. Dieser Code wurde vom Online-Service StringEncrypt generiert. Es nimmt den String oder einen Dateiinhalt und verschlüsselt ihn mit zufälligen Verschlüsselungsbefehlen und erzeugt polymorphen Entschlüsselungscode in einer der vielen unterstützten Programmiersprachen: Wie Sie in diesem C+ Beispiel sehen können, wurde der String verschlüsselt und jedes Zeichen in verschlüsselter Form mit UNICODE Widechar Format gespeichert. Verschiedene Verschlüsselungsbefehle wurden wie bitweise XOR, NICHT, Addition, Subtraktion, Bitdrehungen verwendet. Alles ist randomisiert, Verschlüsselungsschlüssel, Bit-Drehzähler und Verschlüsselungsbefehle bestellen sowie. Der Ausgabecode kann in C/C+, C,# Java, JavaScript, Python, Ruby, Haskell, MASM, FASM und AutoIt generiert werden. Dank der Zufälligkeit ist der generierte Algorithmus jedes Mal anders. Es ist nicht möglich, generische Entschlüsselungstools zu schreiben und der kompilierte Code mit polymorphem Verschlüsselungscode muss jedes Mal analysiert werden, wenn er neu verschlüsselt ist. Siehe auch Timeline of notable Computerviren und Würmer Metamorphic code Selbstmodifizierender Code Alphanumerischer Code Shellcode Software Cracking Sicherheit Cracking Obfuscated Code Oligomorphic Code Referenzen Spinellis, Diomidis; Zuverlässige Identifizierung von gebundenen Länge Viren ist NP-komplete, IEEE Transactions on Information Theory, 49(1):280–284, Januar 2003.doiIT:10.09.11