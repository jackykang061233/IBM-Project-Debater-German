Die Situationsrechnung ist ein Logikformalismus, der darauf abzielt, dynamische Domänen zu repräsentieren und zu begründen. Er wurde 1963 von John McCarthy vorgestellt. Die Hauptversion des in diesem Artikel vorgestellten Situationskalkulus basiert auf der von Ray Reiter 1991 vorgestellten. Es folgen Abschnitte über McCarthys 1986-Version und eine logische Programmierformulierung. Überblick Die Situationsrechnung stellt wechselnde Szenarien als eine Reihe von Logikformeln erster Ordnung dar. Die Grundelemente des Kalküls sind: Die Handlungen, die in der Welt durchgeführt werden könnenDie Grippen, die den Zustand der Welt beschreiben Die Situationen Eine Domain wird durch eine Reihe von Formeln formalisiert, nämlich: Aktionsvoraussetzung Axiome, eine für jede Aktion Nachfolger Staat Axiome, eine für jede fließende Axiome, die die Welt in verschiedenen Situationen beschreiben Die grundlegenden Axiome der Situation Kalkulus Eine einfache Roboterwelt wird als Laufbeispiel modelliert. In dieser Welt gibt es einen einzigen Roboter und mehrere unbelebte Objekte. Die Welt ist nach einem Raster angelegt, so dass Orte in Bezug auf (x, y ) {\displaystyle (x,y}) Koordinatenpunkte angegeben werden können. Es ist möglich, dass sich der Roboter um die Welt bewegt und Gegenstände abholen und fallen lässt. Einige Artikel können zu schwer sein, wenn der Roboter abholt, oder zerbrechlich, so dass sie brechen, wenn sie fallen. Der Roboter hat auch die Fähigkeit, alle gebrochenen Gegenstände zu reparieren, die er hält. Elemente Die Hauptelemente der Situationsrechnung sind die Handlungen, Grippen und die Situationen. Typischerweise sind auch mehrere Objekte an der Beschreibung der Welt beteiligt. Die Situationsrechnung basiert auf einer sortierten Domäne mit drei Arten: Handlungen, Situationen und Objekte, wobei die Objekte alles beinhalten, was keine Handlung oder Situation ist. Variablen jeder Art können verwendet werden. Während Handlungen, Situationen und Objekte Elemente der Domäne sind, werden die Grippen als Prädikate oder Funktionen modelliert. Maßnahmen Die Aktionen bilden eine Art der Domain. Variablen der Art Aktion können verwendet werden. Aktionen können quantifiziert werden. In der Beispiel-Roboter-Welt wären mögliche Aktionsbegriffe m o v e ( x , y ) {\displaystyle move(x,y}) zum Modellieren des Roboters, der sich zu einem neuen Standort bewegt ( x , y ) {\displaystyle (x,y}) und p i c k u p (o ) {\displaystyle pickup(o}) um den Roboteraufzunehmen. Ein spezielles Prädikat P o s s {\displaystyle Poss} wird verwendet, um anzuzeigen, wann eine Aktion ausführbar ist. Situation In der Situationsrechnung wird eine dynamische Welt als Fortschritt durch eine Reihe von Situationen modelliert, indem verschiedene Aktionen in der Welt durchgeführt werden. Eine Situation stellt eine Geschichte von Aktionsereignissen dar. In der hier beschriebenen Reiter-Version der Situationsrechnung stellt eine Situation keinen Zustand dar, im Gegensatz zur wörtlichen Bedeutung des Begriffs und im Gegensatz zur ursprünglichen Definition von McCarthy und Hayes. Dieser Punkt wurde von Reiter wie folgt zusammengefasst: Eine Situation ist eine endliche Folge von Handlungen. Zeitraum. Es ist kein Zustand, es ist kein Snapshot, es ist eine Geschichte [1]. Die Situation vor der Durchführung von Aktionen wird typischerweise mit S 0 {\displaystyle S_{0} bezeichnet und die Ausgangssituation genannt. Die neue Situation, die sich aus der Leistung einer Aktion ergibt, wird mit dem Funktionssymbol d o {\displaystyle do} bezeichnet. (Einige andere Referenzen verwenden auch r e s u l t {\displaystyle results} .) Dieses Funktionssymbol hat eine Situation und eine Handlung als Argumente, und eine Situation als Ergebnis, Letzteres ist die Situation, die sich aus der Durchführung der gegebenen Handlung in der gegebenen Situation ergibt. Die Tatsache, dass Situationen Sequenzen von Handlungen und nicht Zuständen sind, wird durch ein Axiom erzwungen, dass d o (a, s ) {\displaystyle do(a,s}) gleich d o (a', s') {\displaystyle do(a',s}) ist, wenn und nur, wenn a = a ' {\displaystyle a=a}' und s = s' {\display s' s'Diese Bedingung macht keinen Sinn, wenn Situationen Zustände waren, da zwei verschiedene Aktionen, die in zwei verschiedenen Zuständen ausgeführt werden, im gleichen Zustand resultieren können. In der Beispiel-Roboter-Welt, wenn die erste Aktion des Roboters zum Ort (2 ,3 ) {\displaystyle (2,3}) bewegt werden soll, ist die erste Aktion m o v e (2 , 3 ) Aussagen, deren Wahrheitswert sich ändern kann, werden von relationalen Grippen modelliert, prädiziert, die eine Situation als ihr letztes Argument annehmen. Möglich sind auch funktionelle Grippen, Funktionen, die als letztes Argument eine Situation einnehmen und einen situationsabhängigen Wert zurückgeben. Grippen können als "Eigenschaften der Welt" gedacht werden. Im Beispiel kann mit dem fließenden i s _ c a r r y i n g (o , s ) {\displaystyle is\_carrying(o,s}) angegeben werden, dass der Roboter in einer bestimmten Situation ein bestimmtes Objekt trägt. Wenn der Roboter zunächst nichts trägt, i s _ c a r r y i n g ( B a l l , S 0 ) {\displaystyle is\_carrying(Ball,S_{0}) ist falsch, während i s _ c a r r r y i n g (B a l l l , d o ( p i c k u p (B a l style) , S 0 ) ) Der Standort des Roboters kann mit einem funktionellen fließenden l o c a t i o n ( s ) {\displaystyle location(s}) modelliert werden, der in einer bestimmten Situation den Ort ( x, y ) {\displaystyle (x,y}) des Roboters zurückgibt. Formeln Die Beschreibung einer dynamischen Welt wird in zweiter Ordnung Logiken mit drei Arten von Formeln kodiert: Formeln über Handlungen (Voraussetzungen und Effekte), Formeln über den Zustand der Welt, und grundlegende Axiome. Aktionsvoraussetzungen Einige Aktionen können in einer bestimmten Situation nicht ausführbar sein.Zum Beispiel ist es unmöglich, ein Objekt aufzustellen, es sei denn, man trägt es tatsächlich. Die Einschränkungen für die Durchführung von Aktionen werden von Literaten der Form P o s s (a, s ) {\displaystyle Poss(a,s})  modelliert, wobei ein {\displaystyle a} eine Aktion ist, s {\displaystyle s} eine Situation und P o s {\displaystyle Poss} ein spezielles binäres Prädikat, das die Ausführbarkeit von Aktionen bezeichnet. Im Beispiel ist die Bedingung, dass ein Objekt fallen, nur dann möglich, wenn man es trägt, indem man es modelliert: P o s s ( d r o p ( o ) , s ) ‡ i s _ c a r r y i n g ( o , s ) {\displaystyle Poss(drop(o),s)\leftrightarrow is\_carrying(o,s}) Als komplexeres Beispiel können die folgenden Modelle, die der Roboter zu einer Zeit nur ein Objekt tragen kann, und dass einige Objekte zu schwer für den Roboter zu heben sind (durch das Prädikat h e a v y {\displaystyle heavy} angedeutet): In den Fällen, in denen die Wirkungen der Aktion (z, z) Dies geschieht durch die Wirkungsachsen. Zum Beispiel kann die Tatsache, dass das Aufnehmen eines Objekts dazu führt, dass der Roboter ihn trägt, als modelliert werden: P o s s ( p i c k u p ( o ) , s ) → i s _ c a r r r y i n g ( o , d o ( p i c k u p ( o ) , s ) ) Es können auch bedingte Effekte angegeben werden, die von dem aktuellen Zustand abhängen. Die folgenden Modelle, die einige Objekte zerbrechlich sind (indiziert durch das Prädikat f r a g i l e {\displaystyle fragile}) und sie fallen lassen sie zu zerbrechen (indiziert durch den fließenden b r o k e n {\displaystyle kaputt} ): P o s s ( d r o p ( o , s ) Während diese Formel die Wirkung der Aktionen richtig beschreibt, reicht es aufgrund des Rahmenproblems nicht aus, die Wirkung in der Logik korrekt zu beschreiben. Das Rahmenproblem Während die obigen Formeln aus Gründen der Wirkung von Handlungen geeignet scheinen, haben sie eine kritische Schwäche - sie können nicht verwendet werden, um die Nicht-Effekte von Handlungen abzuleiten. Beispielsweise ist es nicht möglich, abzuleiten, dass nach der Aufnahme eines Objekts die Position des Roboters unverändert bleibt.Dies erfordert ein sogenanntes Frame-Axiom, eine Formel wie: P o s s ( p i c k u p ( o ) , s ) ξ l o c a t i o n ( s ) = ( x , y ) → l o c a t i o n ( p i c k u p ( o ) , s typ) = ( x , y ) Die Notwendigkeit, Frame-Axioms festzulegen, wurde seit langem als Problem bei der Axiomatisierung dynamischer Welten erkannt und ist als Rahmenproblem bekannt. Da es in der Regel eine sehr große Anzahl solcher Axiome gibt, ist es sehr einfach, dass der Designer einen nötigen Rahmen Axiom verlässt, oder zu vergessen, alle geeigneten Axiome zu ändern, wenn eine Änderung der Weltbeschreibung gemacht wird. Die Nachfolgestaatenangst Die Nachfolge-Zustands-Axiome lösen das Rahmenproblem in der Situationsrechnung. Nach dieser Lösung muss der Designer als Effekt aufzählen alle Möglichkeiten, wie der Wert eines bestimmten Grippes verändert werden kann. Die Auswirkungen axioms, die den Wert von fluent F beeinflussen (x →, s ) Die Formel γ F + {\displaystyle \gamma _F}^+ beschreibt die Bedingungen, unter denen Aktion a {\displaystyle a} in Situation s {\displaystyle s} die fließende F {\displaystyle F} in der Nachfolgesituation d o (a, s ) {\displaystyle do(a,s}) wahr wird .Likewise beschreibt γ F - {\displaystyle \gamma _F}-^ die Bedingungen, unter denen die Durchführung von Aktion a {\displaystyle a} in Situation s {\displaystyle s} in der Nachfolgesituation fluent F {\displaystyle F} falsch macht. Wenn dieses Axiompaar alle Arten beschreibt, wie fließend F {\displaystyle F} Wert ändern kann, können sie als ein einziges Axiom neu geschrieben werden: (a, s)[F(x → , d o (a, s ) ) δ F + ( x → , a , s ) finanzierung (F ( x → , s ) In Worten, diese Formel sagt: "da es möglich ist, Aktion a {\displaystyle a} in situation s {\displaystyle s} durchzuführen, wäre die fließende F {\displaystyle F} in der resultierenden Situation wahr d o (a, s ) {\displaystyle do(a,s}) wenn und nur, wenn ein {\displaystyle a} in s {style\display} wahr würde " Der oben eingeführte Wert des fließenden b r o k e n {\displaystyle kaputt} wird beispielsweise durch den folgenden Nachfolgezustandsaxiom gegeben: P o s (a, s) → [b r o k e n (o , d o (a , s ) Staaten Die Eigenschaften der ursprünglichen oder einer anderen Situation können durch einfache Angabe als Formeln angegeben werden. Zum Beispiel wird eine Tatsache über den Ausgangszustand formalisiert, indem behauptet wird, S 0 {\displaystyle S_{0} (was kein Zustand, sondern eine Situation ist). Das folgende Statement-Modell, dass der Roboter zunächst nichts trägt, ist vor Ort ( 0 , 0 )(\displaystyle (0,0}) und es gibt keine kaputten Objekte: ê z ¬ i s _ c a r r y i n g (z, S 0 ) {\displaystyle \forall z\,\neg is\_carrying(z,S_{0}) l o c a t i o n (S 0 ) = (S 0 , 0 ) Grundlegende Axiome Die fundamentalen Axiome der Situation formellisieren die Idee, dass Situationen histories sind, indem sie d o (a, s ) = d o (a', s') ⟺ a = a ' ∞ s = s' {\displaystyle do(a,s)=do(a',s')\iff a=a'\land s=s}' .Sie umfassen auch andere Eigenschaften wie die zweite Auftragsinduktion auf Situationen. Regression Regression ist ein Mechanismus, um Konsequenzen in der Situationsrechnung zu beweisen. Es basiert auf dem Ausdruck einer Formel, die die Situation d o (a, s ) {\displaystyle do(a,s}) in Bezug auf eine Formel enthält, die die Aktion a {\displaystyle a} und die Situation s {\displaystyle s} enthält, aber nicht die Situation d o (a, s ) {\displaystyle do(a,s}) . .Proving Konsequenzen ist angeblich einfacher aus dieser Formel als aus der ursprünglichen. GOLOG GOLOG ist eine logische Programmiersprache basierend auf der Situationsrechnung. Die Originalversion der Situationsrechnung Der Hauptunterschied zwischen dem ursprünglichen Situationskalkulus von McCarthy und Hayes und dem heute verwendeten ist die Interpretation von Situationen. In der modernen Version der Situationsrechnung ist eine Situation eine Folge von Handlungen. Ursprünglich wurden Situationen als „der vollständige Zustand des Universums zu einem Zeitpunkt“ definiert. Es war von Anfang an klar, dass solche Situationen nicht vollständig beschrieben werden konnten; die Idee war einfach, einige Aussagen über Situationen zu geben und daraus Konsequenzen zu ziehen. Dies unterscheidet sich auch von dem Ansatz, der vom fließenden Kalkül genommen wird, wo ein Zustand eine Sammlung bekannter Tatsachen sein kann, also eine möglicherweise unvollständige Beschreibung des Universums. In der ursprünglichen Version der Situationsrechnung werden Grippen nicht reifiziert. Mit anderen Worten, Bedingungen, die sich ändern können, werden durch Prädikate und nicht durch Funktionen dargestellt. Tatsächlich definierten McCarthy und Hayes einen Grippe als eine Funktion, die von der Situation abhängt, aber sie fuhren dann immer mit Prädikaten fort, um Grippe zu repräsentieren. Zum Beispiel wird die Tatsache, dass es an Ort x {\displaystyle x} in der Situation s {\displaystyle s} regnet, durch die wörtliche r a i n g ( x, s ) {\displaystyle raining(x,s}) repräsentiert.In der 1986er Version der Situation Calculus von McCarthy werden funktionelle Grippen verwendet. Beispielsweise wird die Position eines Objekts x {\displaystyle x} in der Situation s {\displaystyle s} durch den Wert l o c a t i o n ( x, s) {\displaystyle location(x,s}) repräsentiert, wobei l o c a ti o n {\displaystyle location} ist eine Funktion. Aussagen über solche Funktionen können mit Gleichheit gegeben werden: l o c a t i o n ( x , s ) = l o c a t i o n ( x , s') {\displaystyle location(x,s)=location(x,s}' bedeutet, dass der Ort des Objekts x {\displaystyle x} in den beiden Situationen s {\displaystyle s} und s' {\displaystyle s}' gleich ist. Die Ausführung von Aktionen wird durch die Funktion r e s u l t {\displaystyle-Ergebnis} dargestellt: die Durchführung der Aktion a {\displaystyle a} in der Situation s {\displaystyle s} ist die Situation r e s u l t (a, s ) {\displaystyle results(a,s}) .Die Wirkungen von Handlungen werden durch Formeln ausgedrückt, die Auswirkungen in Situation s {\displaystyle s} und Grippen in Situationen r estyle l t (a, s ) Zum Beispiel, dass die Wirkung des Öffnens der Tür dazu führt, dass die Tür offen ist, wenn nicht verriegelt wird durch: ¬ l o c k e d ( d o o r , s ) → o p e n ( d o r , r e s u l t ( o p e n s , s ) Die Prädikate l o c k e d {\displaystyle gesperrt} und o p e n {\displaystyle open} stellen die Bedingungen einer Tür dar, die gesperrt bzw. geöffnet ist. Da diese Bedingung variieren kann, sind sie durch Prädikate mit einem Situationsargument vertreten. Die Formel besagt, dass, wenn die Tür nicht in einer Situation verriegelt ist, die Tür nach Ausführung der Wirkung des Öffnens offen ist, wobei diese Aktion durch die Konstante o p e n s {\displaystyle open} dargestellt wird. Diese Formeln reichen nicht aus, um alles abzuleiten, was als plausibel angesehen wird. In der Tat sind Grippen in verschiedenen Situationen nur verwandt, wenn sie Voraussetzungen und Wirkungen von Handlungen sind; wenn ein Grippe nicht von einer Handlung betroffen ist, gibt es keine Möglichkeit, sie zu deduzieren, hat sich nicht geändert. Die vorstehende Formel bedeutet z.B. nicht, dass ¬ l o c k e d ( d o r r, r e s u l t ( o p e n s, s ) ) {\displaystyle \neg gesperrt(Tür,Ergebnis(Öffnungen,s}) von ¬ l o c k e d ( d o r, s ) {\displaystyle \neg gesperrt(Tür, die eine Tür) gemacht wird. Um Trägheit zu halten, werden Formeln genannt Frame-Axiome benötigt. Diese Formeln geben alle Nichtwirkungen von Handlungen an: → ¬ l o c k e d ( d o r , r e s u l t ( o p e n s , s ) )In der ursprünglichen Formulierung der Situationsrechnung wird die später mit S 0 bezeichnete Ausgangssituation nicht explizit identifiziert. Die Ausgangssituation ist nicht erforderlich, wenn Situationen als Beschreibungen der Welt betrachtet werden. Zum Beispiel, um das Szenario zu repräsentieren, in dem die Tür geschlossen, aber nicht gesperrt und die Wirkung der Öffnung durchgeführt wird formalisiert, indem eine Konstante s {\displaystyle s}, um die Ausgangssituation zu verstehen und Aussagen darüber zu machen (z.B. ¬ l o c k e d ( d o r, s ) {\displaystyle \neg gesperrt(door,s}) . Dass die Tür nach der Änderung offen ist, wird durch die Formel o p e n (d o r, r e s u l t ( o p e n s, s ) ) reflektiert. Die anfängliche Situation ist vielmehr notwendig, wenn, wie in der modernen Situationsrechnung, eine Situation als Handlungsgeschichte betrachtet wird, da die Ausgangssituation die leere Handlungsfolge darstellt. Die von McCarthy 1986 eingeführte Version des Situationskalkulus unterscheidet sich von der ursprünglichen für die Verwendung von funktionellen Grippen (z.B. l o c a t i o n ( x , s ) {\displaystyle location(x,s}) ist ein Begriff, der die Position von x {\displaystyle x} in der Situation s {\displaystyle s} darstellt und für den Versuch, eine Umschreibung zu verwenden. Die Situation kalkuliert als Logikprogramm Es ist auch möglich (z.B. Kowalski 1979, Apt und Bezem 1990, Shanahan 1997) die Situation als logisches Programm zu schreiben: H o l d s (f , d o (a , s ) I n i t e s (a, f , s ) H o l d s (f , d o (a , s ) H o l d s (f , s ) T e r m i n a t e s (a, f , s ) {\displaystyle Holds(f,do(a,s))\leftarrow Poss(a,s)\wedge Holds(f,s)\wedge \neg Terminates(a,f,s}) Hier ist H o l d s {\displaystyle Holds} ein Meta-Prädikat und die Variable f {\displaystyle f} reicht über Grippen. Die Prädikate P o s s {\displaystyle Poss}, I n i t i a t e s {\displaystyle Initiates} und T e r m i n a t e s {\displaystyle Terminates} entsprechen den Prädikaten P o s s s {\displaystyle Poss}, γ F + ( x →, a, s){\displaystyle \gamma _F}^{+}({\overrightarrow {x},a,s) und γ F − ( x →, a, s ) {\displaystyle \gamma _F}^{-}({\overrightarrow {x},a,s) bzw. Der linke Pfeil ← {\displaystyle \leftarrow } ist die Hälfte der Äquivalenz ↔ {\displaystyle \leftrightarrow } .Die andere Hälfte ist implizit in der Vollendung des Programms, in dem Negation als Negation als Versagen interpretiert wird. Induktions-Axiome sind ebenfalls implizit und werden nur benötigt, um Programmeigenschaften zu beweisen. Hintere Argumentation wie in der SLD-Auflösung, die der übliche Mechanismus zur Ausführung von Logikprogrammen ist, implementiert Regression implizit. Siehe auch Frame Problem Event Calculus Referenzen J. McCarthy und P. Hayes (1969). Einige philosophische Probleme aus dem Standpunkt der künstlichen Intelligenz. In B. Meltzer und D. Michie, Redakteure, Machine Intelligence, 4:463–502. Edinburgh University Press, 1969.R Kowalski (1979). Logic for Problem Solving - Elsevier North Holland.K.R Apt und M. Bezem (1990). Azyklische Programme. In: 7. Internationale Konferenz über Logikprogrammierung.MIT Drücken. Jerusalem, Israel.R Reiter (1991). Das Rahmenproblem in der Situationsrechnung: eine einfache Lösung (manchmal) und ein Vollständigkeitsergebnis für Torregression. In Vladimir Lifshitz, Redakteur, Künstliche Intelligenz und mathematische Berechnungstheorie: Beiträge zu Ehren von John McCarthy, Seiten 359–380, San Diego, CA, USA. Academic Press Professional, Inc. 1991.M Shanahan (1997). Lösen des Rahmenproblems: eine mathematische Untersuchung des Common Sense Law of Inertia. MITTEL Presse.H Levesque, F. Pirri und R. Reiter (1998). Grundlagen für die Situationsrechnung. Electronic Transactions on Artificial Intelligence, 2(3–4):159-178.F Pirri und R. Reiter (1999). Einige Beiträge zur Metathese der Situation Calculus. Journal of the ACM, 46(3):325–361.doi:10.1145/316542.316545 R. Reiter (2001). Wissen in Aktion: Logische Grundlagen für die Spezifizierung und Umsetzung dynamischer Systeme. Die MIT Presse.