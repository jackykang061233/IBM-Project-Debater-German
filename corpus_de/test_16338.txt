Equihash ist ein speicherharter Proof-Work-Algorithmus, der vom Interdisziplinären Zentrum für Sicherheit, Zuverlässigkeit und Vertrauen der Universität Luxemburg (SnT) auf dem 2016 Network and Distributed System Security Symposium vorgestellt wird. Der Algorithmus basiert auf einer Verallgemeinerung des Geburtstagsproblems, das kollidierende Hashwerte findet. Es hat schwere Zeit-Raum-Trade-offs, aber bietet Verwundbarkeit zu unvorhergesehenen parallelen Optimierungen. Es wurde so konzipiert, dass parallele Implementierungen durch Speicherbandbreite in Engpass gebracht werden, um die Kosten-Performance-Trade-offs von der Gestaltung von benutzerdefinierten ASIC-Implementierungen zu verschlechtern. ASIC-Resistenz in Equihash basiert auf der Annahme, dass kommerziell verkaufte Hardware bereits eine ziemlich hohe Speicherbandbreite aufweist, so dass Verbesserungen durch benutzerdefinierte Hardware die Entwicklungskosten nicht wert sein können. General Equihash wurde von Alex Biryukov und Dmitry Khovratovich im Rahmen der Universität Luxemburg Forschungsgruppe CryptoLUX vorgeschlagen. Es wurde auf dem Network and Distributed System Security Symposium 2016 in San Diego vorgestellt. Bemerkenswerte Blockchain-basierte Projekte wie ZCash, Horizen, Aion, Hush und Pirate Chain haben Equihash aus Gründen wie Sicherheit, Privatsphäre und ASIC Miner Widerstand integriert. Der Hersteller Bitmain konnte die Verarbeitung von Zcash's Equihash-200,9 mit einem ASIC optimieren. Spezifikation Equihash hat drei Parameter – n \{displaystyle n}, k \{displaystyle k} und d \{displaystyle d} – die die Zeit- und Speicheranforderungen des Algorithmus bestimmen. Die Zeitkomplexität ist proportional zu 2 n k + 1 + d \{displaystyle 2^{\frac n}{k+1}+d während die Speicherkomplexität proportional zu 2 k + n k + 1 \{displaystyle 2^{k+{\frac n}{k+1 .Der Algorithmus wird oft mit d = 0 \{displaystyle d=0} implementiert (unter Verwendung einer alternativen Methode zur Steuerung der effektiven Schwierigkeit). Das Problem in Equihash besteht darin, deutliche, n \{displaystyle n} -bit-Werte i 1 , i 2 , . . . i 2 k \{displaystyle i_{1},i_{2},...,i_{2^{k zu erfüllen H (i 1 ) ⊕ H (i 2 ) ⊕ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \{displaystyle H(i_{1}\parallel i_{2}\parallel ,\.parallel i_{2^{k}) hat d \{displaystyle d} führende Nullen, wobei H \{displaystyle H} eine gewählte Hash-Funktion ist. Darüber hinaus gibt es "Algorithmenbindungsbedingungen", die das Risiko anderer Algorithmen verringern sollen, die entwickelt wurden, um das zugrunde liegende Geburtstagsproblem zu lösen. Eine speicherlose Verifikation erfordert 2 k \{displaystyle 2^{k} hashes und XORs. Erinnerungs-Härte und Zeit-Raum-Trade Es wird vorgeschlagen, das Puzzle in Equihash durch eine Variation von Wagners Algorithmus für das generalisierte Geburtstagsproblem zu lösen. (Anmerken Sie, dass das zugrunde liegende Problem nicht genau das von Wagner definierte Generalized Birthday Problem ist, da es eine einzige Liste anstelle von mehreren Listen verwendet.) Der vorgeschlagene Algorithmus macht k \displaystyle k} Iterationen über eine große Liste. Für jeden Faktor von 1 q \{displaystyle \{frac 1}{q weniger Einträge pro Liste, rechnerische Komplexität der Algorithmenwaagen proportional zu q k 2 \{displaystyle q^{\frac k}{2 für speichereffiziente Implementierungen. Alcock und Ren widerlegen den Sicherheitsansprüchen von Equihash und schließen damit ab, dass für Equihash keine Handelsoff-Resistenz gebunden ist. Verwendung Die cryptocurrency Zcash implementiert Equihash mit n = 200 \{displaystyle n=200} und k = 9 \{displaystyle k=9} .Die Kryptocurrency Horizen implementiert Equihash mit n = 200 \{displaystyle n=200} und k = 9 \displaystyle k=9}. Siehe auch Proof-of-stake Proof-work system == Referenzen ==