In der Informatik ist ein Datensatz (auch als Struktur, Struktur oder Verbindungsdaten bezeichnet) eine grundlegende Datenstruktur. Datensätze in einer Datenbank oder Tabellenkalkulation werden in der Regel Zeilen" genannt. Ein Datensatz ist eine Erfassung von Feldern, gegebenenfalls von verschiedenen Datentypen, typischerweise in einer festen Anzahl und Reihenfolge. Die Felder eines Datensatzes können auch Mitglieder genannt werden, insbesondere in der objektorientierten Programmierung; Felder können auch Elemente genannt werden, obwohl dies Verwirrung mit den Elementen einer Sammlung gefährdet. Beispielsweise könnte ein Datum als Datensatz mit einem numerischen Jahr Feld, einem Monat Feld als Zeichenkette und einem numerischen Tages-of-Monatsfeld gespeichert werden. Ein Personalrekord könnte einen Namen, ein Gehalt und einen Rang enthalten. A Kreisrekord könnte ein Zentrum und einen Radius enthalten – in diesem Fall könnte das Zentrum selbst als Punktsatz mit x- und y-Koordinaten dargestellt werden. Aufzeichnungen zeichnen sich von Arrays dadurch aus, dass ihre Anzahl an Feldern typischerweise festgelegt ist, jedes Feld einen Namen hat und dass jedes Feld einen anderen Typ haben kann. Ein Datentyp ist ein Datentyp, der solche Werte und Größen beschreibt. Die meisten modernen Computersprachen ermöglichen es dem Programmierer, neue Plattentypen zu definieren. Die Definition beinhaltet die Angabe des Datentyps jedes Feldes und einer Kennung (Name oder Label), mit der sie aufgerufen werden kann. In der Typtheorie werden Produkttypen (ohne Feldnamen) aufgrund ihrer Einfachheit allgemein bevorzugt, jedoch werden in Sprachen wie System F-sub richtige Plattentypen untersucht. Da typtheoretische Datensätze neben Daten auch erstklassige funktionstypisierte Felder enthalten können, können sie viele Merkmale der objektorientierten Programmierung ausdrücken. Aufzeichnungen können in jedem Speichermedium vorhanden sein, einschließlich Hauptspeicher und Massenspeicher wie Magnetbänder oder Festplatten. Datensätze sind ein wesentlicher Bestandteil der meisten Datenstrukturen, insbesondere verknüpfte Datenstrukturen. Viele Computerdateien werden als Arrays von logischen Datensätzen organisiert, oft in größere physikalische Datensätze oder Blöcke für Effizienz gruppiert. Die Parameter einer Funktion oder Prozedur können oft als die Felder einer Datensatzgröße betrachtet werden, und die an diese Funktion übergebenen Argumente können als einen Datensatzwert angesehen werden, der dieser Variable zum Zeitpunkt des Aufrufs zugeordnet wird. Auch in dem Rufstapel, der häufig zur Durchführung von Prozedurrufen verwendet wird, ist jeder Eintrag ein Aktivierungs- oder Anrufrahmen, der die Prozedurparameter und lokale Variablen, die Rückgabeadresse und andere interne Felder enthält. Ein Objekt in objektorientierter Sprache ist im Wesentlichen ein Datensatz, der Verfahren enthält, die spezialisiert sind, um diesen Datensatz zu handhaben; und Objekttypen sind eine Ausarbeitung von Plattentypen. In den meisten objektorientierten Sprachen sind Aufzeichnungen nur spezielle Fälle von Objekten und werden als einfache alte Datenstrukturen (PODSs) bezeichnet, um mit Objekten, die OO-Features verwenden, zu kontrastieren. Ein Datensatz kann als Computeranaloga eines mathematischen Tupels angesehen werden, obwohl ein Tupel möglicherweise oder nicht als Datensatz betrachtet werden kann, und umgekehrt, je nach Konventionen und der spezifischen Programmiersprache. In der gleichen Vene kann ein Datensatztyp als Computersprache analog des kartesischen Produkts von zwei oder mehr mathematischen Sätzen oder die Implementierung eines abstrakten Produkttyps in einer bestimmten Sprache angesehen werden. Schlüssel Ein Datensatz kann Null oder mehr Tasten haben. Ein Schlüssel ist ein Feld oder Feldsatz in dem Datensatz, der als Kennung dient. Ein einzigartiger Schlüssel wird oft als Primärschlüssel oder einfach als Record Key bezeichnet. Zum Beispiel kann eine Mitarbeiterdatei Mitarbeiternummer, Name, Abteilung und Gehalt enthalten. Die Mitarbeiternummer wird einzigartig in der Organisation sein und wäre der Hauptschlüssel. Je nach Speichermedium und Dateiorganisation kann die Mitarbeiterzahl indiziert werden – das ist auch in einer separaten Datei gespeichert, um schneller zu suchen. Der Abteilungscode darf nicht eindeutig sein; er kann auch indiziert werden, wobei er als Sekundärschlüssel oder Wechselschlüssel betrachtet werden würde. Wenn es nicht indiziert wird, müsste die gesamte Mitarbeiterdatei gescannt werden, um eine Auflistung aller Mitarbeiter in einer bestimmten Abteilung zu erstellen. Das Gehaltsfeld würde normalerweise nicht als brauchbar als Schlüssel angesehen werden. Die Indexierung ist ein Faktor, der bei der Erstellung einer Datei berücksichtigt wird. Geschichte Das Konzept eines Datensatzes kann auf verschiedene Arten von Tabellen und Datenbanken, die seit Remote-Zeiten verwendet werden, zurückgeführt werden. Der moderne Begriff der Aufzeichnungen in der Informatik, mit Feldern von wohldefinierter Art und Größe, war bereits im 19. Jahrhundert mechanische Taschenrechner, wie Babbage's Analytical Engine. Das ursprüngliche maschinenlesbare Medium, das für Daten (im Gegensatz zur Kontrolle) verwendet wurde, wurde in der 1890 United States Census für Aufzeichnungen verwendet: jede Stempelkarte war ein einziger Rekord.Vergleichen Sie den Journaleintrag von 1880 und die Stempelkarte von 1895. Aufzeichnungen wurden in der ersten Hälfte des 20. Jahrhunderts gut etabliert, als die meisten Datenverarbeitungen mit gestanzten Karten durchgeführt wurden. Typischerweise würde jeder Datensatz einer Datendatei in einer Stanzkarte aufgezeichnet werden, wobei bestimmte Spalten bestimmten Feldern zugeordnet sind. Im Allgemeinen war ein Datensatz die kleinste Einheit, die aus dem externen Speicher (z.B. Kartenleser, Band oder Festplatte) eingelesen werden konnte. Die meisten maschinellen Sprachumsetzungen und frühen Montagesprachen hatten keine spezielle Syntax für Aufzeichnungen, aber das Konzept war durch die Verwendung von Indexregistern, indirekter Adressierung und selbstmodifizierendem Code verfügbar (und weit verbreitet). Einige frühe Computer, wie die IBM 1620, hatten Hardware-Unterstützung für die Abgrenzung von Datensätzen und Feldern und spezielle Anweisungen für das Kopieren solcher Datensätze. Das Konzept von Datensätzen und Feldern war zentral in einigen frühen Datei-Sortung und Tabulierung von Diensten, wie IBM's Report Program Generator (RPG). COBOL war die erste weit verbreitete Programmiersprache, um Plattentypen zu unterstützen, und seine Plattendefinitionsanlagen waren damals ziemlich ausgereift. Die Sprache erlaubt die Definition von geschachtelten Datensätzen mit alphanumerischen, ganzzahligen und fraktionierten Feldern beliebiger Größe und Präzision sowie Felder, die automatisch jeden ihnen zugewiesenen Wert formatieren (z.B. Einfügen von Währungszeichen, Dezimalstellen und Zahlengruppentrennzeichen). Jede Datei ist einer Datensatzvariable zugeordnet, aus der Daten eingelesen oder geschrieben werden. COBOL liefert auch eine MOVE CORRESPONDING-Anweisung, die entsprechend ihren Namen entsprechende Felder von zwei Datensätzen zuweist. Die für numerisches Computing entwickelten frühen Sprachen, wie FORTRAN (bis FORTRAN IV) und Algol 60, haben keine Unterstützung für Plattentypen; spätere Versionen dieser Sprachen, wie FORTRAN 77 und Algol 68, fügten sie hinzu. Auch die ursprüngliche Programmiersprache Lisp fehlte an Aufzeichnungen (außer der eingebauten Konszelle), aber ihre S-Expressionen lieferten ein angemessenes Surrogat. Die Pascal Programmiersprache war eine der ersten Sprachen, um Plattentypen mit anderen Grundtypen in ein logisch konsistentes Typensystem zu integrieren. Die Programmiersprache PL/I für COBOL-Stil-Aufzeichnungen. Die C-Programmiersprache lieferte zunächst das Plattenkonzept als eine Art Vorlage (Struktur), die auf einem Speicherbereich gelegt werden könnte, anstatt als ein echter Datentyp. Letztere wurden schließlich (durch die Typdef-Deklaration) bereitgestellt, aber die beiden Konzepte sind in der Sprache noch deutlich. Die meisten Sprachen, die nach Pascal (wie Ada, Modula und Java) erstellt wurden, unterstützten auch Aufzeichnungen. Betriebserklärung eines neuen Datensatztyps, einschließlich der Position, des Typs und (möglicherweise) Namen jedes Feldes; Erklärung von Variablen und Werten als gegebener Datensatztyp; Aufbau eines Datensatzwertes aus gegebenen Feldwerten und (manchmal) mit bestimmten Feldnamen; Auswahl eines Feldes eines Datensatzes mit einem expliziten Namen; Zuordnung eines Datensatzwertes zu einer Datensatzgröße;Vergleich von zwei Datensätzen zur Gleichheit; Berechnung eines Standard Hash-Werts. Die Auswahl eines Feldes aus einem Rekordwert ergibt einen Wert. Einige Sprachen können Einrichtungen zur Verfügung stellen, die alle Felder eines Datensatzes aufzählen, oder zumindest die Felder, die Referenzen sind. Diese Einrichtung ist erforderlich, um bestimmte Dienstleistungen wie Debugger, Müllsammler und Serialisierung umzusetzen. Es erfordert einen gewissen Grad an Polymorphismus. In Systemen mit Protokoll-Subtypisierung können die Vorgänge auf Werten des Datensatztyps auch Folgendes umfassen: Fügen Sie ein neues Feld zu einem Datensatz hinzu und setzen Sie den Wert des neuen Feldes. Entfernen eines Feldes von einem Datensatz. In solchen Einstellungen bedeutet ein bestimmter Datensatztyp, dass ein bestimmter Feldsatz vorhanden ist, dessen Werte jedoch zusätzliche Felder enthalten können. Ein Datensatz mit den Feldern x, y und z würde somit zur Art der Datensätze mit den Feldern x und y gehören, wie ein Datensatz mit den Feldern x, y und r.The Rationelle ist, dass ein (x,y,z) Datensatz zu einer Funktion weitergeleitet wird, die einen (x,y) Datensatz als Argument erwartet, da diese Funktion alle Felder finden wird, die innerhalb des Datensatzes benötigt werden. Viele Möglichkeiten der praktischen Umsetzung von Aufzeichnungen in Programmiersprachen würden Probleme mit der Genehmigung solcher Variabilität haben, aber die Angelegenheit ist ein zentrales Merkmal von Plattentypen in theoretischeren Kontexten. Zuweisung und Vergleich Die meisten Sprachen erlauben die Zuordnung zwischen Datensätzen, die genau den gleichen Datensatztyp haben (einschließlich der gleichen Feldtypen und Namen, in der gleichen Reihenfolge). Je nach Sprache können jedoch zwei getrennt definierte Datentypen als verschiedene Typen betrachtet werden, auch wenn sie genau die gleichen Felder haben.Einige Sprachen können auch eine Zuordnung zwischen Datensätzen zulassen, deren Felder unterschiedliche Namen haben, wobei jeder Feldwert mit der entsprechenden Feldvariablen durch ihre Positionen innerhalb des Datensatzes abgestimmt wird, so dass beispielsweise eine komplexe Zahl mit Feldern, die real und imag genannt werden, einer 2D-Punkt-Datensatzvariable mit den Feldern X und Y zugeordnet werden kann. Bei dieser Alternative müssen die beiden Operanden noch die gleiche Reihenfolge von Feldtypen aufweisen. Einige Sprachen können auch verlangen, dass entsprechende Typen die gleiche Größe und Kodierung haben, so dass der gesamte Datensatz als uninterpretierter Bit-String zugewiesen werden kann. Andere Sprachen können dabei flexibler sein und erfordern nur, dass jedem Wertfeld das entsprechende Variablenfeld legal zugeordnet werden kann, so dass beispielsweise ein kurzes Ganzzahlfeld einem langen Ganzzahlfeld zugeordnet werden kann oder umgekehrt. Andere Sprachen (z.B. COBOL) können Felder und Werte nach ihren Namen und nicht nach Positionen entsprechen. Diese gleichen Möglichkeiten gelten für den Vergleich von zwei Werten für Gleichheit. Einige Sprachen können auch Auftragsvergleiche <'(und '>') erlauben, die auf dem Vergleich einzelner Felder beruhende lexikographische Reihenfolge verwenden. PL/I erlaubt sowohl die vorhergehenden Zuordnungsarten als auch Strukturausdrücken, wie a = a+1; wo a eine Aufzeichnung oder Struktur in PL/I-Terminologie ist. Algol 68's Verteilungsfeldauswahl In Algol 68, wenn Pts eine Reihe von Datensätzen war, jeweils mit ganzen Feldern X und Y, könnte man Y von Pts schreiben, um eine Reihe von Zahlen zu erhalten, bestehend aus den Y-Feldern aller Elemente von Pts. Daraus ergeben sich die Aussagen Y von Pts[3]:=7 und (Y von Pts)[3]:= 7 die gleiche Wirkung haben würde. Pascal's mit Aussage In der Pascal Programmiersprache würde der Befehl mit R do S die Befehlssequenz S ausführen, als wären alle Felder des Datensatzes R als Variablen angegeben worden. So, statt zu schreiben Pt.X := 5; Pt.Y :=Pt.X + 3 könnte man mit Pt beginnen X := 5;Y := X + 3 Ende. Darstellung im Speicher Die Darstellung von Datensätzen im Speicher variiert je nach Programmiersprachen. Üblicherweise werden die Felder in aufeinanderfolgenden Positionen im Speicher gespeichert, in der gleichen Reihenfolge wie sie im Aufzeichnungstyp angegeben werden. Dies kann zu zwei oder mehr Feldern führen, die in das gleiche Wort des Speichers gespeichert sind; in der Tat wird diese Funktion häufig in Systemen verwendet, die auf bestimmte Bits eines Wortes zugreifen. Auf der anderen Seite werden die meisten Compiler Padding-Felder hinzufügen, die dem Programmierer meist unsichtbar sind, um den von der Maschine auferlegten Ausrichtungszwängen nachzukommen – so dass ein Floating Point-Feld ein einziges Wort besetzen muss. Einige Sprachen können einen Datensatz als eine Reihe von Adressen implementieren, die auf die Felder zeigen (und möglicherweise auf ihre Namen und/oder Typen). Objekte in objektorientierten Sprachen werden oft auf recht komplizierte Weise umgesetzt, insbesondere in Sprachen, die eine Mehrfach-Klasse-Erbung ermöglichen. Selbst definierende Aufzeichnungen Ein selbst definierender Datensatz ist eine Art Datensatz, der Informationen enthält, um den Datensatztyp zu identifizieren und Informationen innerhalb des Datensatzes zu lokalisieren. Sie kann die Versätze von Elementen enthalten; die Elemente können daher in beliebiger Reihenfolge gespeichert oder entfallen. Alternativ können verschiedene Elemente des Datensatzes, die jeweils eine Elementkennung enthalten, einfach in beliebiger Reihenfolge aufeinander folgen. Beispiele Die folgenden Beispiele für Datensatzdefinitionen zeigen: PL/I: Algol 68: Modedatum =struct (int Jahr, int Monat, int day);C:Fortran Gehen Sie: Pascal: Rust:Swift Haskell: Julia: Standard ML: COBOL:Java 15: Common Lisp: Siehe auch Block (Datenspeicher) Verbunddatentyp Datenhierarchie Objektzusammensetzung Passive Datenstruktur Union Typ == Referenzen =Sekularität, auch die Säkularität (von lateinischem Saekulum, weltlich oder "von Generationen",)" ist der Zustand, in Bezug auf Religion und Irrligion nicht oder neutral zu sein. Alles, was keinen ausdrücklichen Bezug auf die Religion hat, entweder negativ oder positiv, kann als säkular betrachtet werden. Der Prozess, in dem die Dinge säkular oder so werden, wird als Säkularisierung bezeichnet, und jedes Konzept oder Ideologie, die das Säkular fördern, kann als Säkularismus bezeichnet werden. Begriffsbestimmungen Historisch war das Wort säkular nicht verwandt oder mit der Religion verbunden, sondern war ein freistehender Begriff in Latein, der sich auf jede mundane Bemühung beziehen würde. Der Begriff saecula saeculorum (saeculōrum ist die genitive Plural von saeculum) wie im Neuen Testament in der Vulgate-Übersetzung gefunden (ca 410) der ursprünglichen Koine griechischen Phrase ες τοςς αϊἰνας τῶν ας τών αуν (eis toùs aionas ton aiote) wurde heute verwendet.Säkularität und Säkularität stammen aus dem lateinischen Wort saeculum, das bedeutete "von einer Generation, gehört zu einem Alter" oder bezeichnete eine Periode von etwa hundert Jahren. Die christliche Lehre, die Gott außerhalb der Zeit existiert, führte die mittelalterliche westliche Kultur dazu, säkular zu verwenden, um die Trennung von spezifisch religiösen Angelegenheiten und die Einbindung in zeitliche Angelegenheiten anzuzeigen. " Säkular bedeutet nicht notwendigerweise Feindseligkeit oder Ablehnung von Gott oder Religion, obwohl einige den Begriff auf diese Weise verwenden (siehe Säkularismus, unten;) Martin Luther sprach von "säkularer Arbeit" als Berufung von Gott für die meisten Christen. Nach kulturellen Anthropologen wie Jack David Eller wird die Säkularität am besten verstanden, nicht als antireligiös, sondern als "religiös neutral" zu sein, da viele Aktivitäten in religiösen Körpern selbst säkular sind und die meisten Versionen der Säkularität nicht zu Irrligiosität führen. Die Idee einer Dichotomie zwischen Religion und Säkular entstand in der europäischen Aufklärung. Da Religion und Säkularität beide westliche Konzepte sind, die unter dem Einfluss der christlichen Theologie entstanden sind, haben andere Kulturen nicht notwendigerweise Wörter oder Konzepte, die ihnen ähnlich oder gleichwertig sind. In vielen Kulturen gibt es wenig Dichotomie zwischen natürlichen und übernatürlichen, religiösen und nicht-religiösen, vor allem, weil die Menschen Glauben an andere übernatürliche oder spirituelle Dinge haben, unabhängig vom Glauben an Gott oder Götter. Andere Kulturen betonen die Praxis des Rituals statt des Glaubens. Begriffe sowohl säkular als auch religiös, während manchmal einige Parallelen in lokalen Kulturen, wurden in der Regel zusammen mit westlichen Weltanschauungen, oft im Kontext des Kolonialismus importiert. Versuche, entweder das Säkular oder die Ordensleute in nicht-westlichen Gesellschaften, begleitende lokale Modernisierungs- und Verwestungsprozesse zu definieren, waren oft und immer noch voller Spannung. Aufgrund all dieser Faktoren wurde säkular als allgemeiner Bezugsbegriff in den Sozialwissenschaften viel abgeschrieben und wird sorgfältig und mit Qualifikationen verwendet. Man kann das Essen und Baden als Beispiele für säkulare Aktivitäten betrachten, denn es kann nichts inhärent religiöses über sie geben. Dennoch sehen einige religiöse Traditionen sowohl essen als auch baden als Sakramente und machen sie daher religiöse Aktivitäten in diesen Weltanschauungen. Ein aus religiösem Text oder Lehre abgeleitetes Gebet zu sagen, die Verehrung durch den Kontext einer Religion, die Durchführung von körperlichen und geistigen Werken der Barmherzigkeit und die Teilnahme an einer religiösen Seminarschule oder Kloster sind Beispiele für religiöse (nicht-sekulären) Aktivitäten. Das Säkular wird in vielfältiger Weise erlebt, von der Trennung von Religion und Staat bis hin zu Antireligion oder sogar Proreligion, je nach Kultur. Zum Beispiel haben die Vereinigten Staaten sowohl die Trennung von Kirche und Staat als auch die Proreligiosität in verschiedenen Formen wie den Schutz der Religionsfreiheiten; Frankreich hat die Trennung von Kirche und Staat (und Revolutionäres Frankreich war stark antireligiös;) die Sowjetunion war antireligion; in Indien fühlen sich die Menschen wohl, sich als säkular zu identifizieren, während die Teilnahme an Religion; und in Japan, da das Konzept der Religion nicht indigen Japan ist, die Menschen behaupten, dass sie keine Religion zu sein. Ein verwandter Begriff, Säkularismus, beinhaltet das Prinzip, dass Regierungseinrichtungen und ihre Vertreter getrennt von religiösen Institutionen, ihren Überzeugungen und ihren Würdenträgern bleiben sollten. Viele Unternehmen und Unternehmen, und einige Regierungen arbeiten auf säkularen Linien. Dies steht im Gegensatz zur Theokratie, Regierung mit Gottheit als höchste Autorität. Siehe auch Referenzen Fußnoten Bibliographie Weiter lesen Externe Links Die Wörterbuchdefinition des Säkulars bei Wiktionary