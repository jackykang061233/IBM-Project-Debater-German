Hypertext Transfer Protocol Secure (HTTPS) ist eine Erweiterung des Hypertext Transfer Protocol (HTTP). Es wird für eine sichere Kommunikation über ein Computernetzwerk verwendet und wird weit verbreitet im Internet verwendet. In HTTPS wird das Kommunikationsprotokoll mit Transport Layer Security (TLS) oder früher Secure Sockets Layer (SSL) verschlüsselt. Das Protokoll wird daher auch als HTTP über TLS oder HTTP über SSL bezeichnet. Die wichtigsten Motivationen für HTTPS sind die Authentifizierung der aufgerufenen Website und der Schutz der Privatsphäre und Integrität der ausgetauschten Daten während der Übertragung. Es schützt vor Man-in-the-Middle-Angriffen und die bidirektionale Verschlüsselung der Kommunikation zwischen einem Client und Server schützt die Kommunikation vor dem Eavesdropping und Manipulation. Der Authentifizierungsaspekt von HTTPS erfordert einen vertrauenswürdigen Dritten, um serverseitige digitale Zertifikate zu unterzeichnen. Dies war historisch eine teure Operation, die bedeutete, dass vollständig authentifizierte HTTPS-Verbindungen in der Regel nur auf gesicherten Zahlungstransaktionsdiensten und anderen gesicherten Unternehmensinformationssystemen im World Wide Web gefunden wurden. 2016 führte eine Kampagne der Electronic Frontier Foundation mit Unterstützung von Web-Browser-Entwicklern dazu, dass das Protokoll immer mehr verbreitet wurde. HTTPS wird nun häufiger von Web-Nutzern als dem ursprünglichen nicht-sicheren HTTP verwendet, vor allem, um die Seiten-Authentizität auf allen Arten von Websites zu schützen; sichere Konten; und um Benutzerkommunikation, Identität und Web-Browsing privat zu halten. Überblick Das einheitliche Ressourcenidentifikationssystem HTTPS (URI) hat identische Nutzungssyntax zum HTTP-System. HTTPS signalisiert jedoch den Browser, um eine zusätzliche Verschlüsselungsschicht von SSL/TLS zum Schutz des Verkehrs zu verwenden. SSL/TLS eignet sich besonders für HTTP, da es einen gewissen Schutz bieten kann, auch wenn nur eine Seite der Kommunikation authentifiziert ist. Dies ist bei HTTP-Transaktionen über das Internet der Fall, bei denen typischerweise nur der Server authentifiziert wird (durch den Client, der das Zertifikat des Servers untersucht). HTTPS erstellt einen sicheren Kanal über ein unsicheres Netzwerk. Dadurch wird ein angemessener Schutz vor Eavesdroppern und Man-in-the-Middle-Angriffen gewährleistet, sofern ausreichende Cipher-Suiten verwendet werden und das Server-Zertifikat überprüft und vertraut wird. Da HTTPS piggybacks HTTP ganz oben auf TLS steht, kann die Gesamtheit des zugrunde liegenden HTTP-Protokolls verschlüsselt werden. Dazu gehören die Anfrage-URL (die bestimmte Webseite angefordert wurde), Abfrageparameter, Header und Cookies (die häufig Informationen über den Benutzer identifizieren). Da jedoch Webseiten-Adressen und Portnummern zwangsläufig Teil der zugrunde liegenden TCP/IP-Protokolle sind, kann HTTPS ihre Offenlegung nicht schützen. In der Praxis bedeutet dies, dass eavesdroppers auch auf einem korrekt konfigurierten Webserver die IP-Adresse und Portnummer des Webservers und manchmal sogar den Domainnamen (z.B. www.example.org, aber nicht den Rest der URL), mit dem ein Benutzer zusammen mit der Menge der übertragenen Daten und der Dauer der Kommunikation, aber nicht mit dem Inhalt der Kommunikation kommuniziert. Web-Browser wissen, wie man HTTPS-Websites basierend auf Zertifikatsbehörden vertraut, die in ihrer Software vorinstalliert werden. Zertifikatsbehörden werden auf diese Weise von Web-Browser-Erstellern vertraut gemacht, um gültige Zertifikate bereitzustellen. Daher sollte ein Benutzer einer HTTPS-Verbindung zu einer Website vertrauen, wenn und nur, wenn alle der folgenden wahr sind: Der Benutzer vertraut darauf, dass die Browser-Software HTTPS mit korrekt vorinstallierten Zertifikatsbehörden korrekt implementiert. Der Nutzer vertraut der Bescheinigungsbehörde, nur für legitime Webseiten zu vouchieren. Die Website bietet ein gültiges Zertifikat, das heißt es wurde von einer vertrauenswürdigen Behörde unterzeichnet. Das Zertifikat identifiziert die Website korrekt (z.B. wenn der Browser https://example.com besucht, ist das empfangene Zertifikat ordnungsgemäß zum Beispiel.com und nicht irgendein anderes Unternehmen). Der Benutzer vertraut darauf, dass die Verschlüsselungsschicht des Protokolls (SSL/TLS) ausreichend sicher gegen Eavesdropper ist. HTTPS ist besonders wichtig gegenüber unsicheren Netzwerken und Netzwerken, die dem Manipulationsvorgang unterliegen können. Unsichere Netzwerke, wie öffentliche WLAN-Zugriffspunkte, ermöglichen es jedem auf demselben lokalen Netzwerk, Paket-Sniff zu erkennen und sensible Informationen zu entdecken, die nicht durch HTTPS geschützt sind. Darüber hinaus wurden einige kostenlose und kostenpflichtige WLAN-Netzwerke beobachtet, die mit Webseiten durch die Einbindung in die Paketinjektion verwickelt wurden, um ihre eigenen Anzeigen auf anderen Websites zu bedienen. Diese Praxis kann in vielerlei Hinsicht schädlich ausgenutzt werden, z.B. indem Malware auf Webseiten injiziert und die privaten Informationen der Nutzer gestohlen werden.HTTPS ist auch wichtig für Verbindungen über das Tor-Netzwerk, als schädlich Tor-Knoten könnten sonst den durch sie hindurchgehenden Inhalt in unsicherer Weise beschädigen oder verändern und Malware in die Verbindung injizieren. Dies ist ein Grund, warum die Electronic Frontier Foundation und das Tor Project die Entwicklung von HTTPS Everywhere, die im Tor Browser enthalten ist, gestartet haben. Da mehr Informationen über globale Massenüberwachung und Kriminelle, die persönliche Informationen stehlen, enthüllt werden, wird die Verwendung von HTTPS-Sicherheit auf allen Websites immer wichtiger, unabhängig von der Art der Internetverbindung. Obwohl Metadaten über einzelne Seiten, die ein Nutzer besucht, möglicherweise nicht als empfindlich angesehen werden können, wenn sie aggregiert, kann es viel über den Benutzer offenbaren und die Privatsphäre des Nutzers gefährden. Die Bereitstellung von HTTPS ermöglicht auch die Verwendung von HTTP/2 (oder dessen Vorgänger, das jetzt abgewertete Protokoll SPDY), das eine neue Generation von HTTP ist, die dazu bestimmt ist, Seitenlastzeiten, Größe und Latenz zu reduzieren. Es wird empfohlen, HTTP Strict Transport Security (HSTS) mit HTTPS zu verwenden, um Benutzer vor Man-in-the-middle Angriffen, insbesondere SSL Stripping, zu schützen. HTTPS sollte nicht mit dem in RFC 2660 angegebenen selten verwendeten Secure HTTP (S-HTTP) verwechselt werden. Nutzung in Webseiten Ab April 2018 nutzen 33,2% der Alexa Top 1.000.000 Websites HTTPS als Standard, 57,1% der 137,971 beliebtesten Webseiten des Internets haben eine sichere Implementierung von HTTPS und 70% der Seitenlasten (gemessen durch Firefox Telemetrie) verwenden HTTPS. Browser-Integration Die meisten Browser zeigen eine Warnung, wenn sie ein ungültiges Zertifikat erhalten. Ältere Browser, wenn Sie mit einer Website mit einem ungültigen Zertifikat verbinden, würden den Benutzer mit einem Dialogfeld präsentieren, fragen, ob sie weiterhin wollen. Neue Browser zeigen eine Warnung über das gesamte Fenster. Neuere Browser zeigen auch prominent die Sicherheitsinformationen der Website in der Adressleiste an. Die erweiterten Validierungszertifikate zeigen die juristische Person auf den Zertifikatsinformationen. Die meisten Browser zeigen dem Benutzer auch eine Warnung beim Besuch einer Website, die eine Mischung aus verschlüsselten und unverschlüsselten Inhalten enthält. Darüber hinaus geben viele Webfilter beim Besuch verbotener Websites eine Sicherheitswarnung zurück. Die Electronic Frontier Foundation, die besagt, dass "In einer idealen Welt, jede Web-Anfrage könnte auf HTTPS standardisiert werden", hat ein Add-on namens HTTPS Everywhere für Mozilla Firefox, Google Chrome, Chromium und Android, die HTTPS standardmäßig für Hunderte von häufig genutzten Websites ermöglicht. Sicherheit Die Sicherheit von HTTPS ist die der zugrunde liegenden TLS, die typischerweise langfristige öffentliche und private Schlüssel verwendet, um einen kurzfristigen Sitzungsschlüssel zu erzeugen, der dann verwendet wird, um den Datenfluss zwischen Client und Server zu verschlüsseln. X.509 Zertifikate werden verwendet, um den Server zu authentifizieren (und manchmal auch den Client). Infolgedessen sind Bescheinigungsbehörden und öffentliche Schlüsselzertifikate erforderlich, um die Beziehung zwischen dem Zertifikat und seinem Eigentümer zu überprüfen sowie die Gültigkeit von Bescheinigungen zu generieren, zu unterzeichnen und zu verwalten. Während dies vorteilhafter sein kann als die Überprüfung der Identitäten über ein Netz von Vertrauen, die 2013 Massenüberwachung Offenlegungen auf Zertifikatsbehörden als potenzieller Schwachpunkt für Man-in-the-middle Angriffe. Eine wichtige Eigenschaft in diesem Zusammenhang ist die Vorwärtsgeheimnis, die sicherstellt, dass in der Vergangenheit aufgezeichnete verschlüsselte Kommunikationen nicht abgerufen und entschlüsselt werden können, sollten langfristige geheime Schlüssel oder Passwörter in der Zukunft beeinträchtigt werden. Nicht alle Webserver bieten eine Vorwärtsgeheimnis. Damit HTTPS effektiv ist, muss eine Website vollständig über HTTPS gehostet werden. Wenn einige der Inhalte der Website über HTTP geladen werden (z.B. Schriften oder Bilder) oder wenn nur eine bestimmte Seite, die sensible Informationen enthält, wie z.B. eine Login-Seite, über HTTPS geladen wird, während der Rest der Website über reines HTTP geladen wird, wird der Benutzer angegriffen und überwacht. Zusätzlich müssen Cookies auf einer Website, die über HTTPS bedient wird, das sichere Attribut aktiviert haben. Auf einer Website, die sensible Informationen darauf hat, wird der Benutzer und die Sitzung jedes Mal ausgesetzt, wenn diese Website mit HTTP anstelle von HTTPS aufgerufen wird. Technische Unterschiede von HTTP HTTP HTTPS URLs beginnen mit https:/ und verwenden Port 443 standardmäßig, während HTTP URLs mit http:/ beginnen und Port 80 standardmäßig verwenden. HTTP ist nicht verschlüsselt und ist somit anfällig für Man-in-the-Middle und Eavesdropping-Angriffe, die Angreifer Zugriff auf Website-Konten und sensible Informationen erhalten können, und Webseiten zu ändern, um Malware oder Werbung zu injizieren.HTTPS ist konzipiert, um solchen Angriffen standzuhalten und gilt als sicher gegen sie (mit Ausnahme von HTTPS-Implementierungen, die deprecated Versionen von SSL verwenden). Netzwerkschichten HTTP arbeitet auf der höchsten Ebene des TCP/IP-Modells – der Anwendungsschicht; ebenso das TLS-Sicherheitsprotokoll (operiert als eine untere Unterschicht derselben Schicht), das vor der Übertragung eine HTTP-Nachricht verschlüsselt und bei der Ankunft eine Nachricht entschlüsselt. Genau genommen ist HTTPS kein separates Protokoll, sondern bezieht sich auf die Verwendung von gewöhnlichem HTTP über eine verschlüsselte SSL/TLS-Verbindung. HTTPS verschlüsselt alle Nachrichteninhalte, einschließlich der HTTP-Header und der Anfrage-/Responsedaten. Mit Ausnahme des möglichen CCA-Kryptographischen Angriffs, der im folgenden Abschnitt beschrieben ist, sollte ein Angreifer höchstens feststellen können, dass eine Verbindung zwischen zwei Parteien stattfindet, zusammen mit ihren Domainnamen und IP-Adressen. Server-Setup Um einen Webserver zur Annahme von HTTPS-Verbindungen vorzubereiten, muss der Administrator ein öffentliches Schlüsselzertifikat für den Webserver erstellen. Dieses Zertifikat muss von einer vertrauenswürdigen Bescheinigungsbehörde für den Webbrowser unterzeichnet werden, um es ohne Warnung zu akzeptieren. Die Behörde bescheinigt, dass der Zertifikatsinhaber der Betreiber des Webservers ist, der ihn präsentiert. Web-Browser werden in der Regel mit einer Liste der Unterschriftszertifikate der großen Zertifikatsbehörden verteilt, so dass sie die von ihnen unterzeichneten Zertifikate überprüfen können. Erwerb von Zertifikaten Es gibt eine Reihe von kommerziellen Bescheinigungsbehörden, die für SSL/TLS-Zertifikate einer Reihe von Typen, einschließlich erweiterter Validierungszertifikate, bezahlte Zertifikate anbieten. Let's Encrypt, gestartet im April 2016, bietet kostenlosen und automatisierten Service, der grundlegende SSL/TLS-Zertifikate auf Websites liefert. Nach Angaben der Electronic Frontier Foundation, Let's Encrypt macht das Umschalten von HTTP auf HTTPS "so einfach wie die Ausgabe eines Befehls, oder klicken Sie auf einen Knopf." Die meisten Webhosts und Cloud-Anbieter nutzen Let's Encrypt und bieten ihren Kunden kostenlose Zertifikate. Verwendung als Zutrittskontrolle Das System kann auch für die Clientauthentifizierung verwendet werden, um den Zugriff auf einen Webserver auf autorisierte Benutzer zu beschränken. Dazu erstellt der Site-Administrator typischerweise ein Zertifikat für jeden Benutzer, das der Benutzer in seinen Browser geladen. In der Regel enthält das Zertifikat den Namen und die E-Mail-Adresse des autorisierten Benutzers und wird automatisch vom Server auf jeder Verbindung überprüft, um die Identität des Benutzers zu überprüfen, möglicherweise ohne ein Passwort zu benötigen. Im Falle eines kompromittierten geheimen (privaten) Schlüssels Eine wichtige Eigenschaft in diesem Zusammenhang ist die perfekte Vorwärtsgeheimnis (PFS). Eine der langfristig asymmetrischen geheimen Schlüssel, die zur Erstellung einer HTTPS-Session verwendet werden, sollte es nicht einfacher machen, den kurzfristigen Sitzungsschlüssel abzuleiten, um dann das Gespräch zu entschlüsseln, auch zu einem späteren Zeitpunkt. Diffie–Hellman Schlüsselaustausch (DHE) und Elliptische Kurve Diffie–Hellman Schlüsselaustausch (ECDHE) sind im Jahr 2013 die einzigen Systeme bekannt, die diese Eigenschaft haben. Im Jahr 2013 verwendeten nur 30% der Firefox-, Opera- und Chromium-Browser-Sitzungen und fast 0% der Apple Safari- und Microsoft Internet Explorer-Sitzungen. TLS 1.3, veröffentlicht im August 2018, reduzierte die Unterstützung von Chiffren ohne Vorwärtsgeheimnis. Ab Februar 2020 unterstützen 96,6% der befragten Webserver einige Form der Vorwärtsgeheimnis und 52,1% werden die Vorwärtsgeheimnis mit den meisten Browsern nutzen. Eine Bescheinigung kann vor Ablauf der Frist widerrufen werden, beispielsweise weil die Geheimhaltung des privaten Schlüssels beeinträchtigt wurde. Neue Versionen von beliebten Browsern wie Firefox, Opera und Internet Explorer unter Windows Vista implementieren das Online-Zertifikat Status Protocol (OCSP), um zu überprüfen, dass dies nicht der Fall ist. Der Browser sendet die Seriennummer des Zertifikats an die Bescheinigungsbehörde oder seinen Delegierten über OCSP (Online Certificate Status Protocol) und die Behörde reagiert und dem Browser mitteilen, ob das Zertifikat noch gültig ist oder nicht. Die CA kann auch eine CRL ausstellen, um den Menschen zu sagen, dass diese Zertifikate widerrufen werden. Einschränkungen SSL (Secure Sockets Layer) und TLS (Transport Layer Security) Verschlüsselung können in zwei Modi konfiguriert werden: einfach und gegenseitig. Im einfachen Modus wird die Authentifizierung nur vom Server durchgeführt. Die gegenseitige Version erfordert, dass der Benutzer ein persönliches Client-Zertifikat im Webbrowser für die Benutzerauthentifizierung installiert. In beiden Fällen hängt der Schutzgrad von der Richtigkeit der Implementierung der Software und der verwendeten kryptographischen Algorithmen ab. SSL/TLS verhindert nicht die Indizierung der Website durch einen Web-Crawler, und in einigen Fällen kann die URI der verschlüsselten Ressource durch die Kenntnis nur der abgefangenen Anfrage / Antwortgröße abgeleitet werden.Dies ermöglicht es einem Angreifer, Zugriff auf den Klartext (die öffentlich verfügbaren statischen Inhalte) und den verschlüsselten Text (die verschlüsselte Version des statischen Inhalts) zu haben, der einen kryptographischen Angriff ermöglicht. Da TLS auf einer Protokollebene unterhalb der von HTTP arbeitet und keine Kenntnis der übergeordneten Protokolle hat, können TLS-Server nur streng ein Zertifikat für eine bestimmte Adress- und Portkombination vorlegen. In der Vergangenheit bedeutete dies, dass es nicht möglich war, namenbasierte virtuelle Hosting mit HTTPS zu verwenden. Es existiert eine Lösung namens Server Name Indication (SNI), die den Hostnamen vor der Verschlüsselung der Verbindung an den Server sendet, obwohl viele alte Browser diese Erweiterung nicht unterstützen. Unterstützung für SNI ist verfügbar seit Firefox 2, Opera 8, Apple Safari 2.1, Google Chrome 6, und Internet Explorer 7 auf Windows Vista. Aus architektonischer Sicht: Eine SSL/TLS-Verbindung wird von der ersten Frontmaschine verwaltet, die die TLS-Verbindung einleitet. Wenn aus irgendwelchen Gründen (Reisen, Verkehrsoptimierung, etc.) diese Frontmaschine nicht der Anwendungsserver ist und Daten entschlüsseln muss, müssen Lösungen gefunden werden, um Benutzerauthentifizierungsinformationen oder -zertifikat an den Anwendungsserver zu propagieren, der wissen muss, wer angeschlossen werden soll. Für SSL/TLS mit gegenseitiger Authentifizierung wird die SSL/TLS-Sitzung vom ersten Server verwaltet, der die Verbindung initiiert. In Situationen, in denen die Verschlüsselung entlang der geketteten Server propagiert werden muss, Sitzungszeit Out Management wird extrem schwierig zu implementieren. Sicherheit ist maximal mit SSL/TLS, aber auf der Client-Seite gibt es keine Möglichkeit, die SSL/TLS-Verbindung richtig zu beenden und den Benutzer zu trennen, außer indem Sie darauf warten, dass die Server-Sitzung abläuft oder alle verwandten Client-Anwendungen schließen. Auf der Blackhat Konferenz 2009 wurde eine ausgereifte Art von Man-in-the-Middle-Angriff namens SSL Stripping vorgestellt. Diese Art von Angriff besiegt die Sicherheit von HTTPS durch Änderung der https: link in a http: link, unter Ausnutzung der Tatsache, dass wenige Internet-Nutzer tatsächlich tippen https in ihre Browser-Schnittstelle: Sie erhalten auf eine sichere Website durch Klicken auf einen Link, und so werden in denken, dass sie HTTPS verwenden, wenn in der Tat sie HTTP verwenden. Der Angreifer kommuniziert dann klar mit dem Client. Dies hat die Entwicklung einer Gegenmaßnahme in HTTP namens HTTP Strict Transport Security ausgelöst. HTTPS wurde gezeigt, dass sie für eine Reihe von Verkehrsanalyseangriffen empfindlich sind. Traffic-Analyse-Angriffe sind eine Art Side-Channel-Angriff, der auf Änderungen des Timings und der Größe des Verkehrs beruht, um Eigenschaften über den verschlüsselten Verkehr selbst zu mindern. Verkehrsanalyse ist möglich, da die SSL/TLS-Verschlüsselung den Inhalt des Verkehrs ändert, aber minimale Auswirkungen auf die Größe und das Timing des Verkehrs hat. Im Mai 2010 entdeckte ein Forschungspapier von Forschern der Microsoft Research and Indiana University, dass detaillierte sensible Benutzerdaten von Seitenkanälen wie Paketgrößen abgeleitet werden können. Die Forscher fanden heraus, dass trotz des HTTPS-Schutzes in mehreren hochkarätigen, top-of-the-line-Web-Anwendungen in der Gesundheits-, Steuer-, Investitions- und Web-Suche ein Eavesdropper die Krankheiten/Medikationen/Überwachungen des Benutzers, seines Familieneinkommens und der Investitionsgeheimnisse erleiden könnte. Obwohl diese Arbeit die Schwachstelle von HTTPS zur Verkehrsanalyse demonstrierte, erforderte der von den Autoren vorgestellte Ansatz eine manuelle Analyse und konzentrierte sich speziell auf Webanwendungen, die durch HTTPS geschützt sind. Die Tatsache, dass die meisten modernen Websites, einschließlich Google, Yahoo,! und Amazon, verwenden HTTPS verursacht Probleme für viele Benutzer, die versuchen, auf öffentliche Wi-Fi Hot Spots zugreifen, weil eine Wi-Fi Hot Spot Login-Seite nicht geladen wird, wenn der Benutzer versucht, eine HTTPS-Ressource zu öffnen. Mehrere Websites, wie z.B. niessl.com und nonhttps.com, garantieren, dass sie immer über HTTP zugänglich bleiben. History Netscape Communications erstellte HTTPS 1994 für seinen Netscape Navigator Webbrowser. Ursprünglich wurde HTTPS mit dem SSL-Protokoll verwendet. Da sich SSL in Transport Layer Security (TLS) entwickelt hat, wurde HTTPS von RFC 2818 im Mai 2000 formal spezifiziert. Google kündigte im Februar 2018 an, dass sein Chrome-Browser HTTP-Seiten als "Nicht sicher" nach Juli 2018 markieren würde. Dieser Schritt war es, die Website-Besitzer zu ermutigen, HTTPS zu implementieren, als Anstrengung, das World Wide Web sicherer zu machen. Siehe auch Bullrun (Entschlüsselungsprogramm) – ein geheimes Anti-Verschlüsselungsprogramm der US National Security Agency Computer Security HSTS HTTPsec Moxie Marlinspike Opportunistische Verschlüsselung StunnelReferenzen Externe Links RFC 2818: HTTP Over TLS RFC 5246:The Transport Layer Security Protocol 1.2 RFC 6101: The Secure Sockets Layer (SSL) Protocol Version 3.0 Wie HTTPS funktioniert .in einem Comic!