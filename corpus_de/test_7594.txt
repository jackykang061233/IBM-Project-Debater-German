Allgemeines Spiel spielen (GGP) ist das Design von künstlichen Intelligenz-Programmen in der Lage, mehr als ein Spiel erfolgreich zu spielen. Für viele Spiele wie Schach werden Computer programmiert, diese Spiele mit einem speziell gestalteten Algorithmus zu spielen, der nicht auf einen anderen Kontext übertragen werden kann. Zum Beispiel kann ein Schachspiel-Computerprogramm keine Schecker spielen. Allgemeines Spiel wird als notwendiger Meilenstein auf dem Weg zukünstlicher General Intelligence betrachtet. Allgemeines Videospiel (GVGP) ist das Konzept von GGP angepasst an den Zweck der Wiedergabe von Videospielen. Für Videospiele müssen Spielregeln entweder über mehrere Iterationen von künstlichen Spielern wie TD-Gammon lernen oder manuell in einer Domänensprache vordefiniert und vorab an künstliche Spieler wie in traditionellen GGP gesendet werden. Ab 2013 wurden bedeutende Fortschritte nach dem tiefen Bewehrungs-Learning-Ansatz erzielt, einschließlich der Entwicklung von Programmen, die lernen können, Atari 2600 Spiele spielen sowie ein Programm, das lernen kann, Nintendo Entertainment System Spiele spielen. Die erste kommerzielle Nutzung der allgemeinen Spieltechnologie war Zillions of Games 1998. Das allgemeine Spiel wurde auch für Handelsvertreter im Supply Chain Management vorgeschlagen, darunter Preisverhandlungen in Online-Auktionen ab 2003. Geschichte Im Jahr 1992 definierte Barney Pell das Konzept von Meta-Game Playing und entwickelte das MetaGame-System. Dies war das erste Programm, um automatisch Spielregeln von chess-ähnlichen Spielen zu generieren, und eines der frühesten Programme, um automatisierte Spielegeneration zu verwenden. Pell entwickelte dann das System Metagamer. Dieses System war in der Lage, eine Reihe von chess-ähnlichen Spielen spielen, angesichts der Spielregeln Definition in einer speziellen Sprache namens Game Description Language (GDL), ohne jede menschliche Interaktion, wenn die Spiele generiert wurden. 1998 wurde das kommerzielle System Zillions of Games von Jeff Mallett und Mark Lefler entwickelt. Das System verwendet eine LISP-ähnliche Sprache, um die Spielregeln zu definieren. Zillions of Games hat die Bewertungsfunktion automatisch aus den Spielregeln basierend auf Stückmobilität, Boardstruktur und Spielzielen abgeleitet. Es verwendete auch übliche Algorithmen, wie sie in Computer-Choss-Systemen gefunden wurden: alpha-beta-Pruning mit bewegter Ordnung, transposition Tabellen, etc. Das Paket wurde 2007 durch den Zusatz des Axiom Plug-ins erweitert, einer alternativen Metagame-Engine, die eine komplette Programmiersprache auf Forth-Basis enthält. Im Jahr 1998 wurde z-Tree von Urs Fischbacher.z-Tree entwickelt und ist das erste und am meisten zitierte Software-Tool für experimentelle Ökonomie. z-Tree ermöglicht die Definition von Spielregeln in z-Tree-Sprache für spieltheoretische Experimente mit menschlichen Subjekten. Es ermöglicht auch die Definition von Computerspielern, die an einem Spiel mit menschlichen Subjekten teilnehmen. 2005 wurde das Stanford Project General Game Playing gegründet. 2012 begann die Entwicklung von PyVGDL. GGP-Implementierungen Stanford-Projekt General Game Playing ist ein Projekt der Stanford Logic Group der Stanford University, Kalifornien, die eine Plattform für allgemeines Spiel zu schaffen. Es ist der bekannteste Einsatz bei der Standardisierung von GGP AI und allgemein als Standard für GGP-Systeme. Die Spiele werden durch Sätze von Regeln definiert, die in der Spielbeschreibung Sprache vertreten sind. Um die Spiele zu spielen, interagieren die Spieler mit einem Game-Hosting-Server, der Bewegungen für Legalität überwacht und die Spieler über staatliche Änderungen informiert hält. Seit 2005 gibt es jährliche General Game Playing Wettbewerbe auf der AAAI Konferenz. Der Wettbewerb beurteilt Konkurrenten KIs Fähigkeiten, eine Vielzahl von verschiedenen Spielen zu spielen, indem sie ihre Leistung auf jedem einzelnen Spiel. In der ersten Phase des Wettbewerbs werden die Teilnehmer auf ihre Fähigkeit, rechtliche Schritte, gewinnen die Oberhand, und komplette Spiele schneller beurteilt. In der folgenden Startrunde stehen die KI in zunehmend komplexeren Spielen gegeneinander. Die KI, die die meisten Spiele in dieser Phase gewinnt, gewinnt den Wettbewerb, und bis 2013 seine Schöpfer verwendet, um einen $10.000 Preis zu gewinnen. Bisher waren die folgenden Programme siegreich: Sonstige Ansätze Es gibt andere allgemeine Spielsysteme, die ihre eigenen Sprachen zur Definition der Spielregeln verwenden. Andere allgemeine Spiel spielen Software umfassen: Ein System namens FRAMASI entwickelt ab 2009. Ein System namens AiAi von Stephen Tavener (previous Zillions Entwickler) geht zurück zu 2015 und aktiv entwickelt seit Ende 2017. Ein System namens PolyGamo Player von David M. Bennett veröffentlicht im September 2017 basierend auf der Unity-Spielmaschine. GVGP Implementierungen Verstärktes Lernen GVGP könnte möglicherweise verwendet werden, um echtes Videospiel KI automatisch zu erstellen, sowie "Spielumgebungen zu testen, einschließlich diejenigen, die automatisch mit der Prozessinhaltserzeugung erstellt wurden und potenzielle Schlupflöcher im Spiel zu finden, die ein Mensch ausnutzen könnte". GVGP wurde auch verwendet, um Spielregeln zu generieren, und schätzen eine Spielqualität basierend auf relative Algorithm Performance Profiles (RAPP), die die Fähigkeitsdifferenzierung, die ein Spiel zwischen guter KI und schlechte KI ermöglicht vergleichen. Video Game Beschreibung Sprache Der General Video Game AI Competition (GVGAI) läuft seit 2014. In diesem Wettbewerb werden zweidimensionale Videospiele ähnlich (und manchmal basierend auf) 1980s-era Arcade und Konsolenspiele anstelle der im GGP-Wettbewerb verwendeten Brettspiele verwendet. Es hat den Forschern und Praktizierenden einen Weg angeboten, ihre besten allgemeinen Videospiel-Algorithmen zu testen und zu vergleichen. Der Wettbewerb verfügt über ein zugehöriges Software-Framework mit einer großen Anzahl von Spielen, die in der Video Game Description Language (VGDL) geschrieben wurden, die nicht mit GDL verwechselt werden sollte und eine Programmiersprache mit einfachen Semantiken und Befehlen ist, die einfach parsiert werden können. Ein Beispiel für VGDL ist PyVGDL, entwickelt im Jahr 2013. Die in GVGP verwendeten Spiele sind für heute oft 2-dimensionale Arcade-Spiele, da sie die einfachsten und einfachsten zu quantifizieren sind. Um den Prozess der Erstellung einer KI zu vereinfachen, die Videospiele interpretieren kann, werden Spiele zu diesem Zweck manuell in VGDL geschrieben. VGDL kann verwendet werden, um ein Spiel speziell für die prozedurale Generation von Levels zu beschreiben, mit Hilfe von Answer Set Programming (ASP) und einem Evolutionary Algorithm (EA). GVGP kann dann verwendet werden, um die Gültigkeit von Verfahrensniveaus zu testen, sowie die Schwierigkeit oder Qualität von Niveaus, basierend auf wie ein Agent durchgeführt. Algorithmen seit GGP AI muss entworfen werden, um mehrere Spiele zu spielen, sein Design kann sich nicht auf Algorithmen verlassen, die speziell für bestimmte Spiele erstellt wurden. Stattdessen muss die KI mit Algorithmen konstruiert werden, deren Methoden auf eine Vielzahl von Spielen angewendet werden können. Die KI muss auch ein laufender Prozess sein, der sich an ihren aktuellen Zustand anpassen kann und nicht an den Ausgang früherer Staaten. Aus diesem Grund sind offene Schleifentechniken oft am effektivsten. Eine beliebte Methode zur Entwicklung von GGP AI ist der Monte Carlo Baumsuche (MCTS) Algorithmus. Oft verwendet zusammen mit der UCT-Methode (Upper Confidence Bound angewendet auf Bäume,) Variationen von MCTS wurden vorgeschlagen, um bestimmte Spiele besser zu spielen, sowie um es kompatibel mit Videospiel spielen. Eine weitere Variante der verwendeten Baum-Such-Algorithmen ist die Directed Breadth-first Search (DBS), in der ein Kinderknoten in den aktuellen Zustand für jede verfügbare Aktion erstellt wird, und besucht jedes Kind durch höchste durchschnittliche Belohnung, bis entweder das Spiel endet oder aus der Zeit läuft. In jeder Baum-Such-Methode simuliert die KI potentielle Handlungen und rangiert jede basierend auf der durchschnittlichen höchsten Belohnung jedes Pfades, in Bezug auf verdiente Punkte. Verbrauch Um mit Spielen zu interagieren, müssen Algorithmen unter der Annahme arbeiten, dass Spiele alle gemeinsame Eigenschaften teilen. Im Buch Half-Real: Videospiele zwischen realen Welten und fiktiven Welten, Jesper Juul gibt die folgende Definition von Spielen: Spiele basieren auf Regeln, sie haben variable Ergebnisse, verschiedene Ergebnisse geben unterschiedliche Werte, Spieler Bemühungen beeinflusst Ergebnisse, der Spieler ist an die Ergebnisse gebunden, und das Spiel hat verhandelbare Konsequenzen. Mit diesen Annahmen, Spiel spielen KI kann durch die Quantifizierung der Spielereingabe, der Spielergebnisse, und wie die verschiedenen Regeln gelten, und mit Algorithmen, um den günstigsten Pfad zu berechnen. Siehe auch AlphaZero MuZero Künstliche allgemeine Intelligenz Künstliche Intelligenz in Videospielen Domain-spezifische Unterhaltungssprache Spiel Beschreibung Sprache Multi-Task Lernen Outline von künstlicher Intelligenz Transfer Lernen ReBeL, Facebook allgemeine Spiel-Spieler, die zusätzlich behandelt Poker, Schach etc. Referenzen Externe Links Allgemein Game Playing Home Page an der Stanford University Siehe auch die CS227B - Allgemeine Spiel-Kursseite, GGP.org, GGP.org GitHub Seite, und Spiele.stanford.edu.General Game Playing Resources von der Technischen Universität Dresden zur Verfügung gestellt. AiAi von Stephen Tavener PolyGamo Player Project von David M. Bennett Axiom Development Kit ein Meta-Spiel-Entwicklungssystem kompatibel mit Zillions of Games, von Greg Schmidt. Palamedes - Ein allgemeines Spiel IDE Video Allgemeine Videospiel-KI-Wettbewerb ConvNetJSDeep Q Lernen Demo