Software-Design ist der Prozess, mit dem ein Agent eine Spezifikation eines Software-Artefakts erstellt, das Ziele zu erreichen beabsichtigt, mit einem Satz von primitiven Komponenten und unter Einschränkungen. Software-Design kann sich entweder auf "alle Tätigkeiten, die in der Konzeption, Friaming, Implementierung, Inbetriebnahme und letztlich Änderung komplexer Systeme" oder "die Aktivität nach Anforderungen Spezifikation und vor der Programmierung, wie .[in] ein stilisierte Software-Engineering-Prozess. "Software-Design beinhaltet in der Regel eine Problemlösung und Planung einer Softwarelösung. Dies umfasst sowohl eine Low-Level-Komponente als auch Algorithmus-Design und ein High-Level-Architektur-Design. Überblick Software-Design ist der Prozess der Bereitstellung und Definition von Softwarelösungen zu einem oder mehreren Sätzen von Problemen. Eine der Hauptkomponenten des Softwaredesigns ist die Software-Anforderungsanalyse (SRA). SRA ist Teil des Software-Entwicklungsprozesses, der Spezifikationen im Software-Engineering auflistet. Wenn die Software halbautomatisiert oder benutzerzentriert ist, kann Software-Design mit Benutzererfahrung Design, das ein Storyboard liefert, um diese Spezifikationen zu bestimmen. Ist die Software vollständig automatisiert (d.h. keine Benutzer- oder Benutzeroberfläche), kann ein Softwaredesign so einfach sein, wie ein Flussdiagramm oder Text, der eine geplante Folge von Ereignissen beschreibt. Es gibt auch semi-Standard-Methoden wie Unified Modeling Language und grundlegende Modellierungskonzepte. In beiden Fällen ist einige Dokumentation des Plans in der Regel das Produkt des Designs. Weiterhin kann ein Softwaredesign plattformunabhängig oder plattformspezifisch sein, je nach Verfügbarkeit der für das Design verwendeten Technologie. Der wesentliche Unterschied zwischen Software-Analyse und Design besteht darin, dass die Ausgabe einer Software-Analyse aus kleineren Problemstellungen besteht. Darüber hinaus sollte die Analyse nicht über verschiedene Teammitglieder oder Gruppen hinweg sehr unterschiedlich gestaltet werden. Im Gegensatz dazu konzentriert sich das Design auf Fähigkeiten und somit mehrere Designs für das gleiche Problem können und werden existieren. Je nach Umgebung variiert das Design oft, ob es aus zuverlässigen Rahmen erstellt oder mit geeigneten Designmustern umgesetzt wird. Beispiele sind Betriebssysteme, Webseiten, mobile Geräte oder sogar das neue Cloud Computing Paradigma. Software-Design ist sowohl ein Prozess als auch ein Modell. Der Entwurfsprozess ist eine Abfolge von Schritten, die es dem Designer ermöglicht, alle Aspekte der Software für den Bau zu beschreiben. Kreatives Können, vergangene Erfahrung, ein Gefühl, was gute Software macht, und ein allgemeines Engagement für Qualität sind Beispiele für kritische Erfolgsfaktoren für ein kompetentes Design. Es ist jedoch wichtig zu beachten, dass der Entwurfsprozess nicht immer ein unkompliziertes Verfahren ist; das Designmodell kann mit einem Architektenplan für ein Haus verglichen werden. Es beginnt, indem es die Gesamtheit der zu bauenden Sache (z.B. ein dreidimensionales Rendering des Hauses;) langsam, die Sache ist verfeinert, um Führung für die Konstruktion jedes Detail (z.B. der Klempner lag). Ebenso bietet das für Software erstellte Designmodell eine Vielzahl von unterschiedlichen Ansichten der Computersoftware. Grundlegende Gestaltungsprinzipien ermöglichen es dem Software-Ingenieur, den Entwurfsprozess zu navigieren. Davis schlägt eine Reihe von Prinzipien für Software-Design vor, die in der folgenden Liste angepasst und erweitert wurden: Der Designprozess sollte nicht unter "Tunnel Vision" leiden. Ein guter Designer sollte alternative Ansätze in Betracht ziehen, jede auf den Anforderungen des Problems, die verfügbaren Ressourcen, um die Arbeit zu tun. Das Design sollte auf das Analysemodell nachvollziehbar sein. Da ein einziges Element des Designmodells oft auf mehrere Anforderungen zurückverfolgt werden kann, ist es notwendig, ein Mittel zur Nachverfolgung der Anforderungen des Designmodells zu haben. Das Design sollte das Rad nicht neu erfinden. Systeme werden mit einer Reihe von Konstruktionsmustern konstruiert, von denen viele wahrscheinlich schon vorher getroffen wurden. Diese Muster sollten immer als Alternative zur Wiederfindung gewählt werden. Die Zeit ist kurz und die Ressourcen sind begrenzt; die Designzeit sollte in die Darstellung (genau neue) Ideen investiert werden, indem Muster integriert werden, die bereits existieren (wenn zutreffend). Das Design sollte "den intellektuellen Abstand minimieren" zwischen der Software und dem Problem, wie es in der realen Welt existiert. Das heißt, die Struktur des Softwaredesigns sollte, wann immer möglich, die Struktur der Problemdomäne imitieren. Das Design sollte Uniformität und Integration aufweisen. Ein Design ist einheitlich, wenn es vollständig kohärent erscheint.Um dieses Ergebnis zu erreichen, sollten Stil- und Formatregeln für ein Designteam definiert werden, bevor die Designarbeit beginnt. Ein Design ist integriert, wenn bei der Definition von Schnittstellen zwischen Konstruktionskomponenten Sorgfalt genommen wird. Das Design sollte so strukturiert sein, dass es Veränderungen ermöglicht. Die im nächsten Abschnitt diskutierten Designkonzepte ermöglichen es, dieses Prinzip zu erreichen. Das Design sollte so strukturiert werden, dass es sanft abbaut, auch wenn es sich um Daten, Ereignisse oder Betriebsbedingungen handelt. Gut gestaltete Software sollte nie bombardieren; es sollte entworfen werden, um ungewöhnliche Umstände unterzubringen, und wenn es die Verarbeitung beenden muss, sollte es dies auf anmutige Weise tun. Design ist keine Codierung, Codierung ist nicht Design. Auch bei der Erstellung von detaillierten Verfahrensdesigns für Programmkomponenten ist die Abstraktion des Designmodells höher als der Quellcode. Die einzigen auf der Codierebene getroffenen Entwurfsentscheidungen sollten die kleinen Ausführungsdetails ansprechen, die eine Kodierung der Verfahrensgestaltung ermöglichen. Das Design sollte auf Qualität, wie es geschaffen wird, beurteilt werden, nicht nach der Tatsache. Eine Vielzahl von Designkonzepten und Designmaßnahmen stehen zur Verfügung, um dem Designer bei der Beurteilung der Qualität während des gesamten Entwicklungsprozesses zu helfen. Das Design sollte überprüft werden, um konzeptionelle (semantische) Fehler zu minimieren. Es gibt manchmal eine Tendenz, sich auf Minutiae zu konzentrieren, wenn das Design überprüft wird, fehlt der Wald für die Bäume. Ein Design-Team sollte sicherstellen, dass wichtige konzeptionelle Elemente des Designs (Emissionen, Mehrdeutigkeit, Inkonsistenz) behandelt wurden, bevor Sie sich um die Syntax des Design-Modells sorgen. Designkonzepte Die Designkonzepte bieten dem Software-Designer eine Grundlage, aus der anspruchsvollere Methoden angewendet werden können. Es hat sich eine Reihe grundlegender Designkonzepte entwickelt. Sie sind wie folgt: Abstraction - Abstraction ist der Prozess oder das Ergebnis der Verallgemeinerung, indem der Informationsinhalt eines Konzepts oder eines beobachtbaren Phänomens reduziert wird, typischerweise um nur Informationen zu erhalten, die für einen bestimmten Zweck relevant sind. Es ist ein Akt der Darstellung wesentlicher Merkmale, ohne die Hintergrunddetails oder Erläuterungen. Erfrischung - Es ist der Prozess der Ausarbeitung. Eine Hierarchie wird entwickelt, indem eine makroskopische Funktionsaussage schrittweise abgebaut wird, bis die Programmierspracheaussage erreicht ist. In jedem Schritt werden eine oder mehrere Anweisungen eines bestimmten Programms in detailliertere Anweisungen zerlegt. Zusammenfassung und Raffinierung sind komplementäre Konzepte. Modularität - Software-Architektur ist in Komponenten unterteilt, die Module genannt werden. Software-Architektur - Es bezieht sich auf die Gesamtstruktur der Software und die Art, wie diese Struktur konzeptionelle Integrität für ein System bietet. Gute Software-Architektur liefert eine gute Investitionsrendite in Bezug auf das gewünschte Ergebnis des Projekts, z.B. in Bezug auf Leistung, Qualität, Zeitplan und Kosten. Control Hierarchy - Eine Programmstruktur, die die Organisation einer Programmkomponente darstellt und eine Hierarchie der Kontrolle impliziert. Strukturelle Partitionierung - Die Programmstruktur kann sowohl horizontal als auch vertikal unterteilt werden. Horizontale Partitionen definieren für jede große Programmfunktion separate Äste modularer Hierarchie. Vertikale Partitionierung deutet darauf hin, dass Steuerung und Arbeit oben in der Programmstruktur verteilt werden sollten. Datenstruktur - Es ist eine Darstellung der logischen Beziehung zwischen einzelnen Datenelementen. Software-Verfahren - Es konzentriert sich auf die Verarbeitung jedes Moduls individuell. Information Hiding - Module sollten so spezifiziert und entwickelt werden, dass Informationen, die innerhalb eines Moduls enthalten sind, für andere Module nicht zugänglich sind, die diese Informationen nicht benötigen. In seinem Objektmodell erwähnt Grady Booch Abstraction, Encapsulation, Modularisierung und Hierarchie als grundlegende Software-Design-Prinzipien. Das Akronym PHAME (Principles of Hierarchy, Abstraction, Modularisation und Encapsulation) wird manchmal verwendet, um sich auf diese vier Grundprinzipien zu beziehen. Design Erwägungen Es gibt viele Aspekte in der Gestaltung eines Stücks von Software zu berücksichtigen. Die Bedeutung jeder Betrachtung sollte die Ziele und Erwartungen widerspiegeln, die die Software erstellt wird, um zu erfüllen. Einige dieser Aspekte sind: Kompatibilität - Die Software ist in der Lage, mit anderen Produkten zu arbeiten, die für die Interoperabilität mit einem anderen Produkt ausgelegt sind. Beispielsweise kann ein Stück Software rückwärtskompatibel mit einer älteren Version von sich sein. Erweiterbarkeit - Neue Fähigkeiten können der Software hinzugefügt werden, ohne wesentliche Änderungen der zugrunde liegenden Architektur.Modularität - die resultierende Software umfasst gut definierte, unabhängige Komponenten, die zu einer besseren Haltbarkeit führen. Die Komponenten könnten dann isoliert implementiert und getestet werden, bevor sie zu einem gewünschten Softwaresystem integriert werden. Dies ermöglicht eine Arbeitsteilung in einem Software-Entwicklungsprojekt. Fehlertoleranz - Die Software ist widerstandsfähig und in der Lage, von Bauteilausfall zurückzugewinnen. Bewahrbarkeit - Ein Maß dafür, wie einfach Fehlerbehebungen oder funktionale Modifikationen durchgeführt werden können. Hohe Standfestigkeit kann das Produkt von Modularität und Erweiterbarkeit sein. Zuverlässigkeit (Software Haltbarkeit) -Die Software ist in der Lage, eine erforderliche Funktion unter angegebenen Bedingungen für einen bestimmten Zeitraum durchzuführen. Wiederverwendbarkeit - Die Fähigkeit, einige oder alle Aspekte der vorbestehenden Software in anderen Projekten mit wenig bis keine Änderung zu verwenden. Robustheit - Die Software kann unter Stress arbeiten oder unvorhersehbare oder ungültige Eingabe tolerieren. Sie kann beispielsweise mit Widerstand gegen niedrige Speicherbedingungen ausgebildet sein. Sicherheit - Die Software kann feindlichen Handlungen und Einflüssen widerstehen und widerstehen. Usability - Die Software-Benutzeroberfläche muss für ihren Zielbenutzer/Audio nutzbar sein. Standardwerte für die Parameter müssen so gewählt werden, dass sie eine gute Wahl für die Mehrheit der Benutzer sind. Performance - Die Software erfüllt ihre Aufgaben innerhalb eines Zeitrahmens, der für den Benutzer akzeptabel ist und nicht zu viel Speicher benötigt. Portability - Die Software sollte über verschiedene Bedingungen und Umgebungen nutzbar sein. Skalierbarkeit - Die Software passt sich gut an steigende Daten oder hinzugefügte Funktionen oder Anzahl der Benutzer an. Modellsprache Eine Modellierungssprache ist jede künstliche Sprache, die verwendet werden kann, um Informationen, Kenntnisse oder Systeme in einer Struktur, die durch eine konsequente Reihe von Regeln definiert ist auszudrücken. Diese Regeln werden zur Interpretation der Komponenten innerhalb der Struktur verwendet. Eine Modellierungssprache kann graphisch oder textuell sein. Beispiele für grafische Modellierungssprachen für Softwaredesign sind: Architekturbeschreibung Sprache (ADL) ist eine Sprache, die verwendet wird, um die Softwarearchitektur eines Softwaresystems zu beschreiben und darzustellen. Business Process Modeling Notation (BPMN) ist ein Beispiel für eine Process Modeling Sprache. EXPRESS und EXPRESS-G (ISO 10303-11) ist eine internationale Standard-Datenmodellierungssprache. Die Extended Enterprise Modeling Language (EEML) wird häufig für die Modellierung von Geschäftsprozessen auf mehreren Ebenen verwendet. Flussdiagramme sind schematische Darstellungen von Algorithmen oder anderen stufenweisen Prozessen. Fundamental Modeling Concepts (FMC) ist Modellierungssprache für softwareintensive Systeme. IDEF ist eine Familie von Modellierungssprachen, deren bemerkenswerteste sind IDEF0 für die funktionale Modellierung, IDEF1X für die Informationsmodellierung und IDEF5 für die Modellierung von Onlogien. Jackson Structured Programming (JSP) ist ein Verfahren zur strukturierten Programmierung basierend auf Korrespondenzen zwischen Datenstromstruktur und Programmstruktur. LePUS3 ist eine objektorientierte visuelle Design Description Sprache und eine formale Spezifikationssprache, die vor allem für die Modellierung großer objektorientierter (Java, C,+ C#) Programme und Designmuster geeignet ist. Unified Modeling Language (UML) ist eine allgemeine Modellierungssprache, um Software sowohl strukturell als auch verhaltensmäßig zu beschreiben. Es hat eine grafische Notation und ermöglicht eine Erweiterung mit einem Profil (UML). Alloy (Spezifikationssprache) ist eine allgemeine Anwendungsspezifikationssprache zum Ausdruck komplexer struktureller Zwänge und Verhaltensweisen in einem Softwaresystem. Es bietet eine präzise Sprachbasis auf der relationalen Logik der ersten Ordnung. Systems Modeling Language (SysML) ist eine neue allgemeine Modellierungssprache für die Systemtechnik. Serviceorientierter Modellierungsrahmen (SOMF) Designmuster Ein Software-Designer oder Architekt kann ein Designproblem identifizieren, das von anderen in der Vergangenheit besucht und vielleicht sogar gelöst wurde. Eine Vorlage oder ein Muster, das eine Lösung zu einem gemeinsamen Problem beschreibt, ist als Designmuster bekannt. Die Wiederverwendung solcher Muster kann dazu beitragen, den Softwareentwicklungsprozess zu beschleunigen. Technik Die Schwierigkeit, den Begriff Design in Bezug auf Software zu verwenden ist, dass in einigen Sinnen der Quellcode eines Programms ist das Design für das Programm, das es produziert. Soweit dies wahr ist, bezieht sich "Software-Design" auf die Gestaltung des Designs. Edsger W. Dijkstra bezog sich auf diese Schichtung von semantischen Ebenen als die "radische Neuheit" der Computerprogrammierung, und Donald Knuth nutzte seine Erfahrung Schreiben TeX, um die Futilität des Versuchs zu beschreiben, ein Programm zu entwerfen, bevor es zu implementieren: TEX wäre ein kompletter Fehler gewesen, wenn ich es nur spezifiziert hätte und nicht vollständig an seiner ursprünglichen Umsetzung teilgenommen.Der Prozess der Umsetzung führte mich ständig zu unvorhergesehenen Fragen und zu neuen Erkenntnissen, wie die ursprünglichen Spezifikationen verbessert werden könnten. Die Software-Design-Dokumentation kann überprüft oder präsentiert werden, um Einschränkungen, Spezifikationen und sogar Anforderungen vor der Computer-Programmierung anzupassen. Die Neugestaltung kann nach Überprüfung einer programmierten Simulation oder eines Prototyps erfolgen. Es ist möglich, Software bei der Programmierung zu entwerfen, ohne eine Plan- oder Anforderungsanalyse, aber für komplexere Projekte würde dies nicht als machbar angesehen werden. Ein separates Design vor der Programmierung ermöglicht es, multidisziplinäre Designer und Fachexperten (KMU) mit hochqualifizierten Programmierern für Software zusammenzuarbeiten, die sowohl nützlich als auch technisch klingen. Siehe auch Aspect-orientierte Softwareentwicklung Bachelor of Science in Information Technology Design rationale Grafikdesign Interaktionsdesign Icon Design Outline of software development Outline of software engineering Software Engineering Search-based software engineering Software Design Beschreibung (IEEE 1016) Softwareentwicklung Benutzererfahrung Benutzeroberfläche Design Webdesign Zero One Infinity References ^Roger S. Pressman (2001). Software Engineering: ein Praktizierender Ansatz.McGraw-Hill.ISBN 0-07-365578-3.Gesundheitspflege oder Gesundheitsversorgung ist die Diagnose, Behandlung und Prävention von Krankheit, Krankheit und Verletzung. Gesundheitsfürsorge kann auch auf: Gesundheitssystem, eine Organisation von Institutionen Gesundheitsfürsorge Industrie, ein Sektor der Wirtschaft "Gesundheitsversorgung" (The Office,) eine Episode von The Office See auch Gesundheit, die allgemeine Bedingung der Körper-und Geist-Gesundheit Systeme von Land Kategorie: Gesundheit nach Ländern Alle Seiten mit Titeln beginnen mit der Gesundheitsversorgung Alle Seiten mit Titeln beginnend mit Healthcare Artikeltitel mit "Gesundheitsversorgung" oder Gesundheitsversorgung