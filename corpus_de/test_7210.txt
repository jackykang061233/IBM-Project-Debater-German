QNX ( oder ) ist ein kommerzielles Unix-ähnliches Echtzeit-Betriebssystem, das vor allem auf den Embedded-Systemmarkt abzielt. QNX war eines der ersten kommerziell erfolgreichen Microkernel-Betriebssysteme. Ab 2020 wird es in einer Vielzahl von Geräten wie Autos und Handys verwendet. Das Produkt wurde Anfang der 1980er Jahre von der kanadischen Firma Quantum Software Systems entwickelt, später QNX Software Systems umbenannt. Das Unternehmen wurde 2010 von BlackBerry Limited übernommen. Warenbezeichnung Als microkernelbasiertes Betriebssystem basiert QNX auf der Idee, den größten Teil des Betriebssystem-Kernels in Form einer Reihe kleiner Aufgaben, genannt Ressourcenmanager, auszuführen. Dies unterscheidet sich von dem traditionellen monolithischen Kernel, in dem das Betriebssystem Kernel ist ein sehr großes Programm aus einer Vielzahl von Teilen, mit besonderen Fähigkeiten. Im Falle von QNX ermöglicht die Verwendung eines Mikrokernels den Benutzern (Entwickler) jegliche Funktionen auszuschalten, die sie nicht benötigen, ohne das Betriebssystem ändern zu müssen. Stattdessen werden solche Dienste einfach nicht laufen. Um die Fähigkeit des Betriebssystems und die relativ geringe Größe zu demonstrieren, veröffentlichte QNX Ende der 1990er Jahre ein Demo-Bild, das das POSIX-konforme QNX 4 OS, eine vollständige grafische Benutzeroberfläche, grafische Texteditor, TCP/IP-Netzwerk, Webbrowser und Webserver, die alle auf einer bootfähigen 1,4 MB Diskette für die 386 PC verwendet wird.QNX Neutrino (2001) wurde praktisch auf einer eingebetteten Plattform portiert. Dazu gehören die PowerPC, x86, MIPS, SH-4 und die eng miteinander verbundenen ARM, StrongARM und XScale. QNX bietet eine Lizenz für nichtkommerzielle und akademische Nutzer. Der BlackBerry PlayBook Tablet-Computer von BlackBerry verwendet eine Version von QNX als primäres Betriebssystem. Geräte von BlackBerry mit dem BlackBerry 10 Betriebssystem basieren ebenfalls auf QNX. QNX wird auch in Auto-Infotainment-Systemen mit vielen großen Autoherstellern verwendet, die Varianten anbieten, die eine eingebettete QNX-Architektur enthalten. Es wird von beliebten SSL/TLS-Bibliotheken wie wolfSSL unterstützt. In den letzten Jahren wurde QNX in automatisierten Antriebs- oder ADAS-Systemen für Automobilprojekte eingesetzt, die eine Funktionssicherheitszertifizierung erfordern. QNX bietet dies mit seinem QNX OS for Safety Produkt. Das QNX-Betriebssystem enthielt auch einen Webbrowser namens Voyager. Die Geschichte Gordon Bell und Dan Dodge, beide Studenten an der University of Waterloo im Jahr 1980, absolvierten einen Kurs (CS452) in Echtzeit-Betriebssystemen, in denen die Studenten ein grundlegendes Echtzeit-Mikrokernel und Benutzerprogramme aufgebaut. Beide waren überzeugt, dass es einen kommerziellen Bedarf für ein solches System gab und in die High-Tech-geplante Community Kanata, Ontario, um in diesem Jahr Quantum Software Systems zu starten. 1982 wurde die erste Version von QUNIX für die Intel 8088 CPU veröffentlicht. Im Jahr 1984 hat Quantum Software Systems QUNIX in QNX umbenannt, um Markenverletzungen zu vermeiden. Eine der ersten weit verbreiteten Verwendungen des QNX Echtzeit-Betriebssystems (RTOS) war in der nicht eingebetteten Welt, als es als Betriebssystem für das Ontario-Bildungssystem eigenen Computer-Design, die Unisys ICON ausgewählt wurde. Im Laufe der Jahre wurde QNX meist für größere Projekte verwendet, da sein 44k Kernel zu groß war, um in die Ein-Chip-Computer der Ära passen. Das System hat einen Ruf für Zuverlässigkeit und wurde in Laufmaschinen in vielen industriellen Anwendungen verwendet. In den späten 1980er Jahren erkannte Quantum, dass der Markt sich schnell in Richtung Portable Operating System Interface (POSIX) Modell bewegte und beschlossen, den Kernel neu zu schreiben, um viel kompatibler auf einem niedrigen Niveau zu sein. Das Ergebnis war QNX 4. Während dieser Zeit entwickelte Patrick Hayden gemeinsam mit Robin Burgener (derzeit Vollzeitbeschäftigte) ein neues Fenstersystem. Dieses patentierte Konzept wurde in die einbettbare grafische Benutzeroberfläche (GUI) namens QNX Photon microGUI entwickelt. QNX lieferte auch eine Version des X Window Systems. Gegen Ende der 1990er Jahre begann das Unternehmen, dann QNX Software Systems genannt, an einer neuen Version von QNX zu arbeiten, von Grund auf entwickelt, um symmetric multiprocessing (SMP) fähig zu sein, und alle aktuellen POSIX Application Programmierschnittstellen (APIs) und alle neuen POSIX APIs zu unterstützen, die unter Beibehaltung der Mikrokernel-Architektur erwartet werden könnten. Dies führte zu QNX Neutrino, veröffentlicht 2001. Neben dem Neutrino Kernel wurde QNX Software Systems Gründungsmitglied des Konsortiums Eclipse (integrierte Entwicklungsumgebung). Das Unternehmen veröffentlichte eine Suite von Eclipse Plug-ins verpackt mit der Eclipse Workbench im Jahr 2002 und benannte QNX Momentics Tool Suite.Im Jahr 2004 gab das Unternehmen bekannt, dass es an Harman International Industries verkauft wurde. Vor dieser Akquisition wurde QNX-Software bereits in der Automobilindustrie für Telematiksysteme weit verbreitet. Seit dem Kauf von Harman wurde QNX Software in über 200 verschiedene Automobilhersteller und -modelle, in Telematiksystemen und in Infotainment- und Navigationseinheiten entwickelt. Die QNX CAR Application Platform lief Mitte 2011 in über 20 Millionen Fahrzeugen. Das Unternehmen hat seitdem mehrere Middleware-Produkte veröffentlicht, darunter die QNX Aviage Multimedia Suite, die QNX Aviage Acoustic Processing Suite und die QNX HMI Suite. Die Mikrokerne von Cisco Systems' IOS-XR (ultra high availability IOS, vorgestellt 2004) und IOS Software Modularity ( vorgestellt 2006) basieren auf QNX. Im September 2007, QNX Software Systems gab die Verfügbarkeit von einigen seiner Quellcode bekannt. Am 9. April 2010 kündigte Research In Motion an, dass sie QNX Software Systems von Harman International Industries erwerben würden. Am selben Tag wurde der QNX Quellcode-Zugang von der Öffentlichkeit und Hobbyisten eingeschränkt. Im September 2010 kündigte das Unternehmen einen Tablet-Computer, das BlackBerry PlayBook, und ein neues Betriebssystem BlackBerry Tablet OS basierend auf QNX auf dem Tablet laufen. Am 18. Oktober 2011 kündigte Research In Motion BBX an, der später im Dezember 2011 BlackBerry 10 umbenannt wurde. Blackberry 10 Geräte bauen auf dem basierenden Betriebssystem BlackBerry PlayBook QNX für Touch-Geräte auf, passen aber die Benutzeroberfläche für Smartphones mit dem Qt-basierten Cascades Native User-Interface-Rahmen an. Auf der Genfer Motor Show zeigte Apple CarPlay, die eine iOS-ähnliche Benutzeroberfläche für Head Units in kompatiblen Fahrzeugen bietet. Nach der Konfiguration durch den Autohersteller kann QNX programmiert werden, um sein Display und einige Funktionen an ein Apple CarPlay Gerät zu übergeben. Am 11. Dezember 2014, Ford Motor Unternehmen erklärte, dass es Microsoft Auto durch QNX ersetzen würde. Im Januar 2017 kündigte QNX die bevorstehende Veröffentlichung seiner SDP 7.0 an, mit Unterstützung von Intel und ARM 32- und 64-Bit-Plattformen und Unterstützung für C++14. Es wurde im März 2017 veröffentlicht. Sicherheitsproblem Im August 2021 wurde eine hohe Risikoverwundbarkeit in älteren Versionen von QNX bekannt gegeben. Technologie Der QNX-Kernel, procnto, enthält nur CPU-Scheduling, Interprozess-Kommunikation, Interrupt-Umleitung und Timer. Alles andere läuft als Benutzerprozess, darunter ein spezielles Verfahren, das als proc bekannt ist, das Prozesserstellung und Speichermanagement durch den Betrieb in Verbindung mit dem Mikrokernel durchführt. Dies wird durch zwei Schlüsselmechanismen ermöglicht: Subroutine-Call-Typ-Interprozess-Kommunikation, und ein Bootloader, der ein Bild, das den Kernel und jede gewünschte Menge von Benutzerprogrammen und freigegebenen Bibliotheken laden kann. Es gibt keine Gerätetreiber im Kernel. Der Netzwerkstapel basiert auf NetBSD-Code. Zusammen mit seiner Unterstützung für eigene, native Gerätetreiber unterstützt QNX seinen Vermächtnis-, io-net Manager-Server und die von NetBSD portierten Netzwerktreiber. Die QNX-Interprozesskommunikation besteht darin, eine Nachricht von einem Prozess zum anderen zu senden und auf eine Antwort zu warten. Dies ist eine einzige Operation, genannt MsgSend. Die Nachricht wird vom Kernel vom Adressraum des Sendevorgangs auf den des Empfangsvorgangs kopiert. Wenn der Empfangsvorgang auf die Nachricht wartet, wird die Steuerung der CPU gleichzeitig übertragen, ohne dass der CPU Scheduler passiert. So führt das Senden einer Nachricht an einen anderen Prozess und das Warten auf eine Antwort nicht zu einem "Verlust der Drehung" für die CPU. Diese enge Integration zwischen Nachrichtenübermittlung und CPU-Scheduling ist einer der Schlüsselmechanismen, die QNX-Nachricht weit verbreitet nutzbar macht. Die meisten Unix- und Linux-Interprozess-Kommunikationsmechanismen fehlen dieser engen Integration, obwohl eine Benutzer-Raum-Implementierung von QNX-Typ Messaging für Linux existiert. Die Mishandling dieses subtilen Problems ist ein Hauptgrund für die enttäuschende Leistung einiger anderer Mikrokernsysteme wie frühen Versionen von Mach. Der Empfängerprozess muss nicht auf derselben physischen Maschine sein. Alle I/O-O-Operationen, Dateisystem-Operationen und Netzwerk-Operationen sollen durch diesen Mechanismus arbeiten, und die übertragenen Daten wurden während der Nachrichtenübermittlung kopiert. Spätere Versionen von QNX reduzieren die Anzahl der separaten Prozesse und integrieren den Netzwerkstapel und andere Funktionsblöcke aus Leistungsgründen in einzelne Anwendungen. Die Nachrichtenbehandlung wird durch Fadenpriorität priorisiert. Da I/O-Anfragen mit Nachrichtenübermittlung durchgeführt werden, erhalten hohe Prioritätsfäden I/O-Service vor niederen Prioritätsfäden, ein wesentliches Merkmal in einem harten Echtzeitsystem.Der Bootloader ist die andere Schlüsselkomponente des minimalen Mikrokernsystems. Da Benutzerprogramme in das Boot-Image integriert werden können, müssen die für das Startup benötigten Gerätetreiber und Support-Bibliotheken nicht im Kernel sein und nicht. Auch solche Funktionen wie das Laden des Programms sind nicht im Kernel, sondern werden in freigegebenen Benutzer-Raum-Bibliotheken als Teil des Boot-Bildes geladen. Es ist möglich, ein gesamtes Boot-Bild in ROM zu setzen, das für scheibenlose Embedded Systeme verwendet wird. Neutrino unterstützt symmetrische Multiverarbeitungs- und Prozessoraffinität, genannt gebundene Multiverarbeitung (BMP) in QNX-Terminologie. BMP wird verwendet, um das Cache-Hits zu verbessern und die Migration von nicht-SMP-Safe-Anwendungen auf Multiprozessor-Computer zu erleichtern. Neutrino unterstützt strenge prioritätspräemptive Planung und adaptive Partitionsplanung (APS). APS garantiert minimale CPU-Anteile auf ausgewählte Fadengruppen, auch wenn andere höhere Priorität haben können. Der adaptive Partitionsplaner ist immer noch streng prioritär, wenn das System untergeladen wird. Es kann auch konfiguriert werden, einen ausgewählten Satz von kritischen Threads streng Echtzeit auszuführen, auch wenn das System überlastet ist. QNX RTOS Release History QNX RTOSHistory QNX/Neutrino Release History QNX/Neutrino Microkernel history— Von QNX 4.24 im Jahr 1996. Transparent Distributed Processing Aufgrund seiner Mikrokernarchitektur ist QNX auch ein verteiltes Betriebssystem. Dan Dodge und Peter van derVeen halten US-Patent 6,697,876: Verteiltes Kernel-Betriebssystem basiert auf den verteilten Verarbeitungsfunktionen des QNX-Betriebssystems, die kommerziell als Transparent Distributed Processing bekannt sind. Dies ermöglicht es den QNX-Kernels auf separaten Geräten, die Systemdienste der anderen über den gleichen Kommunikationsmechanismus zuzugreifen, wie es für den Zugriff auf lokale Dienste verwendet wird. Forums OpenQNX ist ein QNX Community Portal, das unabhängig gegründet und betrieben wird. Ein IRC-Kanal und Newsgroups-Zugriff über Web ist verfügbar. Verschiedene Branchen werden von den Entwicklern auf der Website vertreten. Foundry27 ist eine webbasierte QNX-Community, die vom Unternehmen gegründet wurde. Es dient als Hub zur QNX Neutrino-Entwicklung, wo Entwickler die Lizenz registrieren, wählen und den Quellcode und das dazugehörige Toolkit des RTOS erhalten können. Siehe auch Vergleich der Betriebssysteme Android Auto NNG Open Handset Alliance Windows Embedded Automotive Ford Sync Referenzen Weiter lesen Externe Links Offizielle Website QNX bei Curlie Entwicklung für QNX Telefone Foundry27 QNX User Community Open Source Anwendungen GUIdebook > GUIs > QNX QNX verwendet für kanadische Kernkraftwerke QNX Demo Diskette Ein Ektoparasitikum ist ein Antiparasitikum, das bei der Behandlung von ektoparasitischen Befallen verwendet wird. Diese Medikamente werden verwendet, um die Parasiten zu töten, die auf der Körperoberfläche leben. Permethrin, Schwefel, Lindan, Dicophan, Benzylbenzoat, Etmectin und Crotamiton sind bekannte Ektoparasiticide. Permethrin Broad-Spektrum und potente Pyrethroid-Insektizid und ist am bequemsten für beide Scheiden und Läuse. Erste Wahl Medikament.100% Heilung Rate. Ursachen neurologischer Lähmung in Insekten wahrscheinlich durch Verzögerung der Depolarisation. Crotamiton Zweite Wahl Droge. Effektive Skabizid, Pediculocid und antipruritisch. Heilungsrate 60-88 % Benzylbenzoat 2. Linie Medikament für Scheiterhaufen und wird selten für die Pediculosis verwendet. Cure Rate 76-100% Lindane Effektiv bei der Behandlung von Kopfläuse (67-92%cure) und Scheinen (84-92% Cure) mit einer einzigen Behandlung. Penetrate durch chitinöse Abdeckungen und beeinflusst das Nervensystem. Sulfur Ältester Scabicid und schwaches Pediculocid, Antiseptikum, Fungizid und keratolytisch. Auf die Haut aufgetragen, wird langsam auf H2S reduziert und zu SO2 und Pentathionsäure oxidiert, die den Nagel von Itchmilben lösen und töten. Ivermectin Antihelminthische Droge fand hochwirksam in Skabies und Pediculosis. Es ist das einzige oral verabreichte Medikament, das für Ektoparasitose verwendet wird. wirkt durch ein Glutamat-Gated Cl-Ionenkanal nur in Wirbellosen gefunden. Dicophan Insecticide für Moskito, Fliegen und andere Schädlinge. Penetrate durch das Exoskeleton und wirkt als Neurotoxin. == Referenzen ==