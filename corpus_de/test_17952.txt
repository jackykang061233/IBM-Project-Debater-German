Die HyperText Markup Language oder HTML ist die Standard-Markup-Sprache für Dokumente, die in einem Webbrowser angezeigt werden sollen. Es kann durch Technologien wie Cascading Style Sheets (CSS) und Skriptsprachen wie JavaScript unterstützt werden. Webbrowser erhalten HTML-Dokumente von einem Webserver oder von lokalem Speicher und machen die Dokumente in Multimedia-Webseiten. HTML beschreibt die Struktur einer Webseite semantisch und ursprünglich enthalten Cues für das Erscheinungsbild des Dokuments. HTML-Elemente sind die Bausteine von HTML-Seiten. Mit HTML-Konstrukten können Bilder und andere Objekte wie interaktive Formulare in die Rendered-Seite eingebettet werden. HTML bietet eine Möglichkeit, strukturierte Dokumente zu erstellen, indem es strukturelle Semantik für Text wie Überschriften, Absätze, Listen, Links, Zitate und andere Elemente angibt. HTML-Elemente werden durch Tags delineiert, geschrieben mit Winkelwinkeln. Tags wie <img /> und <input /> führen Inhalte direkt in die Seite ein. Andere Tags wie <p> Surround und liefern Informationen über Dokumenttext und können andere Tags als Subelemente enthalten. Browser zeigen nicht die HTML-Tags, sondern verwenden sie, um den Inhalt der Seite zu interpretieren. HTML kann Programme einfügen, die in einer Skriptsprache wie JavaScript geschrieben werden, die das Verhalten und den Inhalt der Webseiten beeinflusst. Inclusion of CSS definiert das Aussehen und Layout von Inhalten. Das World Wide Web Consortium (W3C), ehemaliger Betreuer des HTML und aktueller Betreuer der CSS Standards, hat die Verwendung von CSS über explizite Präsentation HTML seit 1997 gefördert. Geschichte 1980 schlug der Physiker Tim Berners-Lee, Bauunternehmer am CERN, ENQUIRE, ein System für CERN-Forscher, um Dokumente zu verwenden und zu teilen. 1989 schrieb Berners-Lee eine Memo, die ein Internet-basiertes Hypertext-System vorschlug. Berners-Lee spezifiziert HTML und schrieb die Browser- und Server-Software Ende 1990. In diesem Jahr arbeiteten Berners-Lee- und CERN-Datensysteme-Ingenieur Robert Cailliau an einem gemeinsamen Förderantrag zusammen, das Projekt wurde jedoch nicht formal vom CERN angenommen. In seinen persönlichen Notizen von 1990 schilderte er "einige der vielen Bereiche, in denen Hypertext verwendet wird" und legte zuerst eine Enzyklopädie. Die erste öffentlich zugängliche Beschreibung von HTML war ein Dokument namens "HTML Tags", das erst Ende 1991 im Internet von Tim Berners-Lee erwähnt wurde. Es beschreibt 18 Elemente mit der anfänglichen, relativ einfachen Gestaltung von HTML. Abgesehen von dem Hyperlink-Tag wurden diese stark von SGMLguid beeinflusst, einem hauseigenen Standard Generalized Markup Language (SGML)-basierten Dokumentationsformat am CERN. Elf dieser Elemente existieren noch in HTML 4. HTML ist eine Markup-Sprache, die Webbrowser verwenden, um Text, Bilder und anderes Material in visuelle oder hörbare Webseiten zu interpretieren und zu komponieren. Default-Eigenschaften für jedes Element von HTML-Markup sind im Browser definiert, und diese Eigenschaften können durch die zusätzliche Verwendung von CSS des Webseiten-Designers verändert oder erweitert werden. Viele der Textelemente finden sich im ISO-Technical Report TR 9537 Techniken für die Verwendung von SGML, die wiederum die Merkmale der frühen Textformatierungssprachen abdeckt, wie sie vom in den frühen 1960er Jahren für das CTSS (Compatible Time-Sharing System)-Betriebssystem entwickelten Befehl RUNOFF verwendet wurden: Diese Formatierungsbefehle wurden von den Befehlen der Typenetter zur manuellen Formatierung von Dokumenten abgeleitet. Das SGML-Konzept des generalisierten Markups basiert jedoch auf Elementen (nästige annotierte Bereiche mit Attributen) anstatt nur Druckeffekte, mit auch der Trennung von Struktur und Markup; HTML wurde mit CSS schrittweise in diese Richtung bewegt. Berners-Lee betrachtete HTML als eine Anwendung von SGML. Es wurde formal von der Internet Engineering Task Force (IETF) mit der Veröffentlichung des ersten Vorschlags für eine HTML-Spezifikation, der "Hypertext Markup Language (HTML)" als solche definiert. Internet-Entwurf von Berners-Lee und Dan Connolly, die eine SGML-Dokument-Typ Definition zur Definition der Grammatik enthielt. Der Entwurf lief nach sechs Monaten ab, war aber für seine Anerkennung des benutzerdefinierten Tags des NCSA Mosaic-Browsers für die Einbettung von in-line-Bildern bemerkenswert, was die Philosophie des IETF-Blasens auf erfolgreiche Prototypen widerspiegelt. Ebenso schlug Dave Raggetts konkurrierender Internet-Draft, "HTML+ (Hypertext Markup Format,)" ab Ende 1993 vor, bereits implementierte Features wie Tabellen und Ausfüllformen zu standardisieren. Nach Ablauf der HTML- und HTML+-Entwürfe Anfang 1994 erstellte der IETF eine HTML-Arbeitsgruppe, die 1995 "HTML 2.0" abgeschlossen hat, die erste HTML-Spezifikation, die als Standard behandelt werden soll, gegen den zukünftige Implementierungen basieren sollen.Die Weiterentwicklung unter der Schirmherrschaft des IETF wurde durch konkurrierende Interessen gestoppt. Seit 1996 wurden die HTML-Spezifikationen mit Eingaben von kommerziellen Software-Anbietern durch das World Wide Web Consortium (W3C) beibehalten. Im Jahr 2000 wurde HTML aber auch ein internationaler Standard (ISO/IEC 15445:2000). HTML 4.01 wurde Ende 1999 veröffentlicht, mit weiteren Errata veröffentlicht bis 2001. Im Jahr 2004 begann die Entwicklung auf HTML5 in der Web Hypertext Application Technology Working Group (WHATWG), die 2008 gemeinsam mit dem W3C auslieferbar wurde und am 28. Oktober 2014 abgeschlossen und standardisiert wurde. HTML-Versionen Zeitleiste HTML 2 November 24, 1995 HTML 2.0 wurde als RFC 1866 veröffentlicht. Zusätzliche RFC-Funktionen: 25. November 1995:RFC 1867 (form-based file upload) Mai 1996: RFC 1942 (Tabellen) August 1996:RFC 1980 (client-side image maps) Januar 1997: RFC 2070 (Internationalisierung) HTML 3 Januar 14, 1997 HTML 3.2 wurde als W3C Empfehlung veröffentlicht. Es war die erste Version, die ausschließlich vom W3C entwickelt und standardisiert wurde, da der IETF am 12. September 1996 seine HTML Working Group geschlossen hatte. Ursprünglich kodiert Wilbur, HTML 3.2 fiel Mathematik Formeln ganz, versöhnte Überschneidung unter verschiedenen proprietären Erweiterungen und nahm die meisten von Netscapes visuellen Markup-Tags. Netscapes Blink-Element und Microsofts Marquee-Element wurden aufgrund einer gegenseitigen Vereinbarung zwischen den beiden Unternehmen weggelassen. Ein Markup für mathematische Formeln ähnlich wie in HTML wurde erst 14 Monate später in MathML standardisiert. HTML 4 Dezember 18, 1997 HTML 4.0 wurde als W3C-Empfehlung veröffentlicht. Es bietet drei Variationen: Strict, in denen deprecierte Elemente verboten Transitional sind, in denen deprecated Elemente erlaubt Frameset, in denen meist nur rahmenbezogene Elemente erlaubt sind. Ursprünglich codiert Cougar, HTML 4.0 nahm viele Browser-spezifische Elementtypen und Attribute an, aber gleichzeitig versucht Netscapes visuelle Markup-Features durch Markierung als deprecated zugunsten von Stylesheets auszulösen. HTML 4 ist eine SGML-Anwendung nach ISO 8879 – SGML.April 24, 1998 HTML 4.0 wurde mit kleineren Edits neu veröffentlicht, ohne die Versionsnummer zu erhöhen. Dezember 24, 1999 HTML 4.01 wurde als W3C-Empfehlung veröffentlicht. Es bietet die gleichen drei Varianten wie HTML 4.0 und seine letzte Errata wurden am 12. Mai 2001 veröffentlicht. Mai 2000 ISO/IEC 15445:2000 ("ISO HTML", basierend auf HTML 4.01 Strict) wurde als internationale Norm ISO/IEC veröffentlicht. In der ISO fällt diese Norm in den Bereich des ISO/IEC JTC1/SC34 (ISO/IEC Joint Technical Committee 1, Unterausschuss) 34 – Dokumentbeschreibung und Verarbeitungssprachen). Nach HTML 4.01 gab es seit vielen Jahren keine neue HTML-Version, da die Entwicklung der parallelen XML-basierten Sprache XHTML die HTML-Arbeitsgruppe der W3C Anfang und Mitte der 2000er Jahre besetzte. HTML 5 Oktober 28, 2014HTML5 wurde als W3C Empfehlung veröffentlicht. 1. November 2016 HTML 5.1 wurde als W3C Empfehlung veröffentlicht. Dezember 14, 2017 HTML 5.2 wurde als W3C-Empfehlung veröffentlicht. HTML-Entwurf Version Zeitleiste Oktober 1991 HTML Tags, ein informelles CERN-Dokument mit 18 HTML-Tags, wurde zuerst in der Öffentlichkeit erwähnt. Juni 1992 Erster informeller Entwurf des HTML DTD, mit sieben späteren Revisionen (Juli 15, August 6, August 18, November 17, November 19, November 20, November 22)November 1992 HTML DTD 1.1 (die erste mit einer Versionsnummer, basierend auf RCS-Revisionen, die mit 1.1 statt 1.0 beginnen), wurde ein informeller Entwurf Juni 1993 Hypertext Markup Language von der IETF IIIR Working Group als Internet Draft veröffentlicht. Es wurde ein Monat später durch eine zweite Version ersetzt. November 1993 HTML+ wurde vom IETF als Internet Draft veröffentlicht und war ein konkurrierender Vorschlag für den Hypertext Markup Language Draft. Sie endete im Juli 1994. November 1994 Erster Entwurf (Revision 00) von HTML 2.0 veröffentlicht von IETF selbst (genannt "HTML 2.0" von Revision 02), der schließlich zur Veröffentlichung von RFC 1866 im November 1995 führte. April 1995 (autorisiert März 1995)HTML 3,0 wurde als Standard für den IETF vorgeschlagen, aber der Vorschlag lief fünf Monate später (28. September 1995) ohne weitere Maßnahmen ab. Es umfasste viele der Fähigkeiten, die in Raggetts HTML+ Vorschlag, wie Unterstützung für Tabellen, Textfluss um Zahlen und die Darstellung komplexer mathematischer Formeln. W3C begann die Entwicklung eines eigenen Arena-Browsers als Testbett für HTML 3 und Cascading Style Sheets, aber HTML 3.0 konnte aus mehreren Gründen nicht erfolgreich sein. Der Entwurf wurde mit 150 Seiten als sehr groß angesehen und das Tempo der Browser-Entwicklung sowie die Anzahl der interessierten Parteien hatten die Ressourcen des IETF übertroffen.Browser-Anbieter, einschließlich Microsoft und Netscape zu der Zeit, wählte verschiedene Teilmengen von HTML 3 Entwürfe Funktionen sowie ihre eigenen Erweiterungen zu implementieren.(siehe Browser-Kriege). Diese umfassten Erweiterungen, um stilistische Aspekte von Dokumenten zu kontrollieren, im Gegensatz zu dem "Belief [der akademischen Ingenieursgemeinschaft], dass Dinge wie Textfarbe, Hintergrundtextur, Schriftgröße und Schriftfläche definitiv außerhalb des Geltungsbereichs einer Sprache waren, wenn ihre einzige Absicht war, festzulegen, wie ein Dokument organisiert werden würde. "Dave Raggett, der seit vielen Jahren W3C Fellow ist, hat zum Beispiel folgendes kommentiert: "In gewissem Maße baute Microsoft sein Geschäft im Web durch die Erweiterung von HTML-Funktionen. "Januar 2008 HTML5 wurde als Arbeitsentwurf des W3C veröffentlicht. Obwohl seine Syntax eng mit der von SGML ähnelt, hat HTML5 jeglichen Versuch, eine SGML-Anwendung zu sein, aufgegeben und hat explizit eine eigene HTML-Synchronisierung definiert, zusätzlich zu einer alternativen XML-basierten XHTML5-Synchronisierung.2011 HTML5 – Last Call Am 14. Februar 2011 erweiterte der W3C die Charta seiner HTML Working Group mit klaren Meilensteinen für HTML5. Im Mai 2011 erweiterte die Arbeitsgruppe HTML5 auf "Last Call", eine Einladung an Gemeinschaften innerhalb und außerhalb von W3C, um die technische Klanglichkeit der Spezifikation zu bestätigen. Die W3C entwickelte eine umfassende Testsuite, um bis 2014 eine breite Interoperabilität für die vollständige Spezifikation zu erreichen, was das Zieldatum für die Empfehlung war. Im Januar 2011 hat das WHATWG seinen HTML5 Lebensstandard in HTML umbenannt." Der W3C setzt dennoch sein Projekt fort, HTML5.2012 HTML5 – Candidate Empfehlung Im Juli 2012 entschieden sich WHATWG und W3C über einen Grad der Trennung. W3C wird die HTML5 Spezifikationsarbeit fortsetzen, die sich auf einen einzigen endgültigen Standard konzentriert, der als Snapshot von WHATWG betrachtet wird. Die WHATWG-Organisation wird ihre Arbeit mit HTML5 als "Living Standard" fortsetzen. Das Konzept eines Lebensstandards ist, dass es nie vollständig ist und immer aktualisiert und verbessert wird. Neue Funktionen können hinzugefügt werden, aber die Funktionalität wird nicht entfernt. Im Dezember 2012 hat W3C HTML5 als Kandidatenempfehlung bezeichnet. Das Kriterium für die Weiterentwicklung der W3C-Empfehlung ist "zwei 100% vollständige und vollständig interoperable Implementierungen".2014HTML5 – Proposed Recommendation and RecommendationIm September 2014 hat W3C HTML5 in die Empfehlung umgesetzt. Am 28. Oktober 2014 wurde HTML5 als stabile W3C-Empfehlung veröffentlicht, was bedeutet, dass der Spezifikationsprozess abgeschlossen ist. XHTML-Versionen XHTML ist eine separate Sprache, die als Reformulation von HTML 4.01 mit XML 1.0 begann. Es wird nicht mehr als separater Standard entwickelt. XHTML 1.0 wurde am 26. Januar 2000 als W3C-Empfehlung veröffentlicht und später am 1. August 2002 überarbeitet und veröffentlicht. Es bietet die gleichen drei Varianten wie HTML 4.0 und 4.01, in XML reformiert, mit geringen Einschränkungen. XHTML 1.1 wurde am 31. Mai 2001 als W3C-Empfehlung veröffentlicht. Es basiert auf XHTML 1.0 Strict, umfasst aber kleinere Änderungen, kann angepasst werden und wird mit Modulen in der W3C Empfehlung "Modularization of XHTML", die am 10. April 2001 veröffentlicht wurde, reformiert. XHTML 2.0 war ein Arbeitsentwurf, die Arbeit an ihm wurde im Jahr 2009 für die Arbeit an HTML5 und XHTML5 verlassen. XHTML 2.0 war mit XHTML 1.x unvereinbar und würde daher besser als eine XHTML-inspirierte neue Sprache charakterisiert werden als ein Update auf XHTML 1.x. Eine XHTML-Syntax, bekannt als XHTML5.1, wird neben HTML5 im HTML5-Entwurf definiert. Transition of HTML Publication to WHATWG Am 28. Mai 2019 gab der W3C bekannt, dass WHATWG der einzige Verleger der HTML- und DOM-Standards sei. Die W3C und WHATWG veröffentlichten seit 2012 konkurrierende Standards. Während der W3C-Standard 2007 mit dem WHATWG identisch war, haben sich die Standards seither aufgrund unterschiedlicher Designentscheidungen schrittweise auseinandergesetzt. Der WHATWG "Living Standard" war seit einiger Zeit der de facto Web-Standard. Markup HTML-Markup besteht aus mehreren Schlüsselkomponenten, einschließlich der sogenannten Tags (und deren Attribute), zeichenbasierten Datentypen, Zeichenreferenzen und Entity-Referenzen. HTML-Tags kommen am häufigsten in Paaren wie <h1> und </h1,>, obwohl einige leere Elemente darstellen und so nicht beeinträchtigt sind, zum Beispiel <img>. Das erste Tag in einem solchen Paar ist das Start-Tag, und das zweite ist das End-Tag (sie werden auch Öffnungs-Tags und Schließ-Tags genannt). Eine weitere wichtige Komponente ist die HTML-Dokument-Typ-Deklaration, die Standards-Modus-Rendering auslöst. Das Folgende ist ein Beispiel des Klassikers "Hallo, Welt!"Programm: Der Text zwischen <html> und </html> beschreibt die Webseite und der Text zwischen <body> und </body> ist der sichtbare Seiteninhalt. Der Text von Markup <title> Dies ist ein Titel</title> definiert den Browser-Seitentitel, der auf Browser-Tabs und Fenstertiteln angezeigt wird, und der Tag <div> definiert eine Teilung der Seite, die für einfaches Styling verwendet wird. Die Dokumenttyp-Erklärung <!DOCTYPE html> ist für HTML5. Wenn eine Erklärung nicht enthalten ist, werden verschiedene Browser zum Rendern in den "Qurks-Modus" umkehren. Elemente HTML-Dokumente implizieren eine Struktur von geschachtelten HTML-Elementen. Diese sind in dem Dokument durch HTML-Tags angegeben, so eingeschlossen in Winkelwinkeln: <p>.Im einfachen, allgemeinen Fall wird das Ausmaß eines Elements durch ein Paar von Tags angezeigt: a "start tag" <p> und "end tag" </p>. Der Textinhalt des Elements, falls vorhanden, wird zwischen diesen Tags gelegt. Tags können auch weitere Markierungen zwischen Anfang und Ende einschließen, einschließlich einer Mischung aus Tags und Text. Dies zeigt weitere (gedämpfte) Elemente als Kinder des Elternteils an. Das Start-Tag kann auch Elemente Attribute innerhalb des Tags enthalten. Diese geben andere Informationen an, wie z.B. Identifikatoren für Abschnitte innerhalb des Dokuments, Identifikatoren, die verwendet werden, um Stilinformationen an die Präsentation des Dokuments zu binden, und für einige Tags wie die <img>, die zur Einbettung von Bildern verwendet werden, die Referenz auf die Bildressource im Format wie diese: <img src="example.com/example.jpg> Einige Elemente, wie z.B. der Zeilenbruch <br,> oder <br />, erlauben keine eingebetteten Inhalte, entweder Text oder weitere Tags. Diese benötigen nur einen einzigen leeren Tag (einfügen zu einem Start-Tag) und verwenden keinen End-Tag. Viele Tags, insbesondere der Schlussendtag für das sehr häufig verwendete Absatzelement <p,> sind optional. Ein HTML-Browser oder ein anderer Agent kann den Verschluss für das Ende eines Elements aus dem Kontext und die durch den HTML-Standard definierten Strukturregeln aufheben. Diese Regeln sind komplex und nicht weit von den meisten HTML-Codeern verstanden. Die allgemeine Form eines HTML-Elements ist daher: <tag attribute1="value1 attribute2="value2">'content'>/tag>.Einige HTML-Elemente sind als leere Elemente definiert und nehmen das Formular <tag attribute1="value1 attribute2="value2">. Leere Elemente können keinen Inhalt einschließen, beispielsweise den <br>-Tag oder den inline <img>-Tag. Der Name eines HTML-Elements ist der Name, der in den Tags verwendet wird. Beachten Sie, dass dem Namen des End-Tags ein Slash-Zeichen vorausgeht, /, und dass in leeren Elementen der End-Tag weder erforderlich noch erlaubt ist. Werden Attribute nicht erwähnt, werden jeweils Standardwerte verwendet. Elementbeispiele Header des HTML-Dokuments: head>...</head>. Der Titel ist im Kopf enthalten, zum Beispiel: Rubriken: Dimensions, Frauen, Männer, Frauen, Männer, Frauen, Männer, Frauen, Männer und Frauen Die Effekte sind: Beachten Sie, dass CSS das Rendering drastisch ändern kann. Ziffern: Linienbrüche: <br>.Die Differenz zwischen <br> und <p> ist, dass <br> eine Linie bricht, ohne die semantische Struktur der Seite zu ändern, während <p> die Seite in die Absätze gliedert. Das Element <br> ist ein leeres Element, in dem es zwar Attribute haben kann, aber keinen Inhalt annehmen kann und es keinen Endanhänger hat. Dies ist ein Link in HTML. Um einen Link zu erstellen, wird das <a>-Tag verwendet. Das href-Attribut enthält die URL-Adresse des Links. Beiträge: Es gibt viele Möglichkeiten, wie ein Benutzer Eingaben/s wie: Kommentare: Kommentare können beim Verständnis des Markups helfen und nicht in der Webseite angezeigt werden. Es gibt verschiedene Arten von Markup-Elementen in HTML verwendet: Die Strukturmarkierung gibt den Zweck des Textes an. Golf als Zweitebene. Struktur-Markup bezeichnet keine spezifische Rendering, aber die meisten Web-Browser haben Standard-Stile für Element-Formatierung. Der Inhalt kann mit Cascading Style Sheets (CSS) weiter gestylt werden. Präsentationsmarkup gibt das Erscheinungsbild des Textes an, unabhängig von dessen Zweck z.B.: <b>bold text</b> gibt an, dass visuelle Ausgabegeräte in fettem Text kühn sein sollten, gibt aber wenig Hinweise darauf, welche Geräte dies nicht tun können (z.B. Auralgeräte, die den Text laut lesen). Bei beiden <b>bold text</b> und <i>italic text</i,> gibt es andere Elemente, die äquivalente visuelle Renderings aufweisen können, aber in der Natur eher semantisch sind, wie <strong>strong text</strong> und <em>emphaize text</em>. Es ist einfacher zu erkennen, wie ein auraler Benutzer Agent diese beiden Elemente interpretieren sollte. Sie sind jedoch nicht äquivalent zu ihren Präsentationsgegensätzen: Es wäre für einen Bildschirmleser unerwünscht, den Namen eines Buches z.B. zu betonen, aber auf einem Bildschirm würde ein solcher Name italisiert werden.Die meisten Präsentationsmarkup-Elemente wurden unter der HTML 4.0-Spezifikation für die Verwendung von CSS für das Styling depreciert. Hypertext-Markup macht Teile eines Dokuments in Links zu anderen Dokumenten Ein Ankerelement erzeugt einen Hyperlink im Dokument und sein href-Attribut legt die Ziel-URL des Links fest. Beispielsweise wird das HTML-Markup <a href="https://www.google.com/">Wikipedia</a das Wort Wikipedia als Hyperlink darstellen. Zur Darstellung eines Bildes als Hyperlink wird ein img-Element als Inhalt in das Element eingefügt. Wie z.B. ist img ein leeres Element mit Attributen, aber kein Inhalt oder Verschluss-Tag.<a href="https://example.org"><img src="image.gif alt="descriptive text" wide="50 height="50 border="0">/a. Attribute Die meisten Attribute eines Elements sind Namen-Wert-Paare, getrennt durch = und geschrieben im Startelement-Tag eines Elements. Der Wert kann in einzelne oder doppelte Zitate eingeschlossen werden, obwohl Werte, die aus bestimmten Zeichen bestehen, in HTML nicht zitiert werden können (aber nicht XHTML). Nicht zitierte Attributwerte zu speichern gilt als unsicher. Im Gegensatz zu Namen-Wert-Paar-Attributen gibt es einige Attribute, die das Element einfach durch ihre Anwesenheit im Start-Tag des Elements beeinflussen, wie das Istmap-Attribut für das Img-Element. Es gibt mehrere gemeinsame Attribute, die in vielen Elementen erscheinen können : Das id-Attribut liefert eine dokumentweite eindeutige Kennung für ein Element. Dies wird verwendet, um das Element zu identifizieren, so dass Stylesheets seine Präsentationseigenschaften ändern können, und Skripte können seine Inhalte oder Präsentation ändern, animieren oder löschen. Angepasst an die URL der Seite, bietet es eine weltweit einzigartige Kennung für das Element, typischerweise einen Teilabschnitt der Seite. Zum Beispiel die ID-Attribute in https://en.wikipedia.org/wiki/HTML#Attributes. Das Klassenattribut bietet eine Möglichkeit, ähnliche Elemente zu klassifizieren. Dies kann für semantische oder Präsentationszwecke verwendet werden. Beispielsweise kann ein HTML-Dokument semantisch die Bezeichnung <class="notation> verwenden, um anzuzeigen, dass alle Elemente mit diesem Klassenwert dem Haupttext des Dokuments untergeordnet sind. In der Präsentation können solche Elemente zusammengetragen und als Fußnoten auf einer Seite dargestellt werden, anstatt an dem Ort zu erscheinen, wo sie in der HTML-Quelle auftreten. Klassenattribute werden semantisch in Mikroformaten verwendet. Mehrere Klassenwerte können angegeben werden; beispielsweise <class="notation important>" setzt das Element sowohl in die Notation als auch in die wichtigen Klassen. Ein Autor kann das Stilattribut verwenden, um Präsentationseigenschaften einem bestimmten Element zuzuordnen. Es wird als eine bessere Praxis betrachtet, die id- oder class-Attribute eines Elements zu verwenden, um das Element innerhalb eines Stylesheets auszuwählen, obwohl dies manchmal zu umständlich für eine einfache, spezifische oder Ad-hoc-Styling sein kann. Das Titelattribut wird verwendet, um subtextuelle Erläuterungen an ein Element zu befestigen. In den meisten Browsern wird dieses Attribut als Tooltip angezeigt. Das lang-Attribut identifiziert die natürliche Sprache der Inhalte des Elements, die sich von der des Rests des Dokuments unterscheiden kann. Zum Beispiel in einem englischsprachigen Dokument: Das Abkürzungselement, abbr, kann verwendet werden, um einige dieser Attribute zu demonstrieren: Dieses Beispiel zeigt sich als HTML; in den meisten Browsern sollte der Cursor an der Abkürzung den Titeltext "Hypertext Markup Language" anzeigen. Die meisten Elemente nehmen das sprachbezogene Attribut Dir zur Angabe von Textrichtung, wie z.B. mit rtl für rechts-links Text in z.B. Arabisch, Persisch oder Hebräisch. Zeichen- und Entitätsbezüge Ab Version 4.0 definiert HTML einen Satz von 252 Zeichenentitätsreferenzen und einen Satz von 1.114.050 numerischen Zeichenreferenzen, die beide über einfaches Markup schreiben lassen, anstatt buchstäblich. Ein buchstäblicher Charakter und sein markup Gegenstück werden als gleichwertig angesehen und gleichgestellt. Die Fähigkeit, Zeichen auf diese Weise zu entkommen, erlaubt es, die Zeichen < und & (wenn als &lt; bzw. geschrieben) als Zeichendaten zu interpretieren, anstatt zu markup. Ein Literal < bezeichnet z.B. normalerweise den Beginn eines Tags, und & bezeichnet normalerweise den Beginn einer Zeichenentitätsreferenz oder numerischer Zeichenreferenz; Schreiben als &amp; oder #&x26; oder #&38; erlaubt &amp; in den Inhalt eines Elements oder in den Wert eines Attributs aufzunehmen. Das Doppelquotenzeichen ("), wenn nicht verwendet, um einen Attributwert zu zitieren, muss auch als &quot oder #&x22 oder #&34 entgangen werden, wenn es innerhalb des Attributwertes selbst erscheint.Entsprechend muss das Einzelquotenzeichen ('), wenn nicht verwendet, um einen Attributwert zu zitieren, auch als #&x27 oder #&39 (oder als &apos; in HTML5 oder XHTML-Dokumenten) entbunden werden, wenn es innerhalb des Attributwertes selbst erscheint. Wenn Dokumentautoren die Notwendigkeit übersehen, solche Zeichen zu entkommen, können einige Browser sehr vergeben und versuchen, Kontext zu nutzen, um ihre Absicht zu erraten. Das Ergebnis ist noch ungültiger Markup, der das Dokument für andere Browser und andere Benutzer, die versuchen können, das Dokument für Such- und Indexierungszwecke zu parse. Escaping erlaubt auch, dass Zeichen, die nicht leicht eingegeben werden, oder die nicht in der Zeichencodierung des Dokuments verfügbar sind, innerhalb von Element- und Attributinhalten dargestellt werden. Beispielsweise kann die akut-accented e (é,) ein Charakter, der typischerweise nur auf westeuropäischen und südamerikanischen Tastaturen zu finden ist, in jedem HTML-Dokument als Entitätsreferenz geschrieben werden; oder als numerische Referenzen #&xE9; oder #&233;, mit Zeichen, die auf allen Tastaturen verfügbar sind und in allen Zeichencodierungen unterstützt werden. Unicode-Zeichencodierungen wie UTF-8 sind mit allen modernen Browsern kompatibel und ermöglichen direkten Zugriff auf fast alle Zeichen der weltweiten Schreibsysteme. Datentypen HTML definiert mehrere Datentypen für Elementinhalte, wie Skriptdaten und Stylesheet-Daten, und eine Vielzahl von Arten für Attributwerte, einschließlich IDs, Namen, URIs, Zahlen, Einheiten von Länge, Sprachen, Mediendeskriptoren, Farben, Zeichencodierungen, Daten und Zeiten, und so weiter. Alle diese Datentypen sind Spezialisierungen von Zeichendaten. Dokumenttyp-Deklaration HTML-Dokumente sind erforderlich, um mit einer Dokumententyp-Deklaration (informell ein Doctype) zu beginnen. In Browsern hilft der Doctype, den Rendering-Modus zu definieren – insbesondere ob man Quirks-Modus verwendet. Der ursprüngliche Zweck des Doktyps war es, die Parsierung und Validierung von HTML-Dokumenten durch SGML-Tools basierend auf der Dokumenttypdefinition (DTD) zu ermöglichen. Der DTD, auf den sich der DOCTYPE bezieht, enthält eine maschinenlesbare Grammatik, die den zulässigen und verbotenen Inhalt für ein Dokument angibt, das einem solchen DTD entspricht. Browser hingegen implementieren HTML nicht als Anwendung von SGML und lesen damit den DTD nicht. HTML5 definiert keine DTD; daher ist in HTML5 die Doktyp-Deklaration einfacher und kürzer: Ein Beispiel für einen HTML 4-Doctyp Diese Erklärung verweist auf den DTD für die strenge Version von HTML 4.01. SGML-basierte Validierungsmittel lesen die DTD, um das Dokument richtig zu parsieren und die Validierung durchzuführen. In modernen Browsern aktiviert ein gültiger Doktyp den Standardmodus im Gegensatz zum Quirks-Modus. Darüber hinaus bietet HTML 4.01 Transitional und Frameset DTDs, wie unten erläutert. Transitional Typ ist die inklusiveste, mit aktuellen Tags sowie älteren oder deprecierten Tags, mit dem Strict DTD ohne deprecated Tags. Frameset hat alle Tags, die erforderlich sind, um Frames auf einer Seite zusammen mit den Tags im Übergangstyp enthalten zu machen. Semantische HTML Semantik HTML ist eine Möglichkeit, HTML zu schreiben, die die Bedeutung der verschlüsselten Informationen über seine Präsentation betont (schauen). HTML hat semantische Markup von seiner Inception enthalten, aber hat auch Präsentationsmarkup, wie <font,> <i> und <center> Tags enthalten. Es gibt auch die semantisch neutrale Spanne und div Tags. Seit den späten 1990er Jahren, als Cascading Style Sheets in den meisten Browsern zu arbeiten begann, wurden Web-Autoren ermutigt, die Verwendung von Präsentations-HTML-Markup mit Blick auf die Trennung von Präsentation und Inhalt zu vermeiden. In einer 2001 Diskussion über das Semantische Web gab Tim Berners-Lee u.a. Beispiele für Möglichkeiten, wie intelligente Software-Agenten eines Tages automatisch das Web kriechen und finden, filtern und korrelieren zuvor nicht zusammenhängende, veröffentlichte Fakten zum Nutzen menschlicher Nutzer. Solche Agenten sind noch nicht häufig, aber einige der Ideen von Web 2.0, Maschups und Preisvergleich Websites können nahe kommen. Der Hauptunterschied zwischen diesen Web-Applikations-Hybriden und Berners-Lees semantischen Agenten besteht darin, dass die aktuelle Aggregation und Hybridisierung von Informationen in der Regel von Web-Entwicklern entwickelt wird, die bereits die Web-Standorte und die API-Semantik der spezifischen Daten kennen, die sie mash, vergleichen und kombinieren möchten. Eine wichtige Art von Web-Agenten, die Web-Seiten automatisch kriechen und lesen, ohne vorher Wissen, was es finden könnte, ist der Web-Crawler oder Search-Engine Spinne. Diese Software-Agenten sind abhängig von der semantischen Klarheit der Webseiten, die sie finden, da sie verschiedene Techniken und Algorithmen verwenden, um Millionen von Web-Seiten pro Tag zu lesen und zu indexieren und Web-Nutzer mit Sucheinrichtungen zur Verfügung zu stellen, ohne die die Nützlichkeit des World Wide Web stark reduziert würde.Um die Bedeutung von Textstücken bewerten zu können, die sie in HTML-Dokumenten finden, und auch für diejenigen, die Maasups und andere Hybriden erstellen, sowie für automatisiertere Agenten, wie sie entwickelt werden, müssen die semantischen Strukturen, die in HTML existieren, weit und gleichmäßig angewendet werden, um die Bedeutung des veröffentlichten Textes herauszubringen. Präsentationsmarkup-Tags werden in aktuellen HTML- und XHTML-Empfehlungen abgeschrieben. Die meisten Präsentations-Features von vorherigen Versionen von HTML sind nicht mehr erlaubt, da sie zu einer schlechteren Zugänglichkeit, höheren Kosten für die Wartung der Website und größeren Dokumentengrößen führen. Gute semantische HTML verbessert auch die Zugänglichkeit von Web-Dokumenten (siehe auch Web Content Accessibility Guidelines). Wenn beispielsweise ein Bildschirmleser oder Audio-Browser die Struktur eines Dokuments korrekt ermitteln kann, verschwendet er die Zeit des visuell beeinträchtigten Benutzers nicht, indem er wiederholte oder irrelevante Informationen ausliest, wenn er korrekt markiert ist. Liefer-HTML-Dokumente können mit den gleichen Mitteln wie jede andere Computerdatei geliefert werden. Sie werden jedoch am häufigsten entweder per HTTP von einem Webserver oder per E-Mail geliefert. HTTPThe World Wide Web besteht in erster Linie aus HTML-Dokumenten, die von Webservern zu Webbrowsern über das Hypertext Transfer Protocol (HTTP) übertragen werden. HTTP wird jedoch verwendet, um neben HTML Bilder, Sound und andere Inhalte zu bedienen. Damit der Webbrowser erkennen kann, wie er jedes Dokument bearbeitet, das er erhält, werden weitere Informationen zusammen mit dem Dokument übermittelt. Diese Metadaten enthalten in der Regel den MIME-Typ (z.B. Text/html oder Anwendung/xhtml+xml) und die Zeichencodierung (siehe Zeichencodierung in HTML). In modernen Browsern kann der MIME-Typ, der mit dem HTML-Dokument gesendet wird, beeinflussen, wie das Dokument zunächst interpretiert wird. Ein Dokument, das mit dem XHTML MIME-Typ gesendet wird, wird erwartet, dass gut gebildet XML; Syntax-Fehler können dazu führen, dass der Browser es nicht macht. Dasselbe Dokument, das mit dem HTML MIME-Typ gesendet wird, könnte erfolgreich angezeigt werden, da einige Browser mehr mit HTML versehen sind. Die W3C-Empfehlungen geben an, dass XHTML 1.0-Dokumente, die den in Anlage C der Empfehlung festgelegten Leitlinien folgen, entweder mit MIME-Typ gekennzeichnet werden können. XHTML 1.1 gibt auch an, dass XHTML 1.1 Dokumente mit entweder MIME-Typ markiert werden sollen. HTML E-Mail Die meisten grafischen E-Mail-Clients erlauben die Verwendung einer Untermenge von HTML (oft undefiniert) Formatierung und semantisches Markup, die nicht mit Klartext verfügbar sind. Dazu gehören typografische Informationen wie farbige Überschriften, hervorgehobener und zitierter Text, Inline-Bilder und Diagramme. Viele solcher Clients umfassen sowohl einen GUI-Editor zum Komponieren von HTML-E-Mail-Nachrichten als auch eine Rendering-Engine zum Anzeigen. Die Verwendung von HTML in E-Mail wird von einigen wegen der Kompatibilität Probleme kritisiert, weil es helfen kann, Phishing-Angriffe zu verkleiden, wegen der Barrierefreiheit Probleme für blinde oder visuell beeinträchtigte Menschen, weil es Spam-Filter verwirren kann und weil die Nachrichtengröße größer ist als Klartext. Namenskonventionen Die häufigste Dateiname-Erweiterung für Dateien mit HTML ist html. Eine häufige Abkürzung hierfür ist .htm, der da einige frühe Betriebssysteme und Dateisysteme wie DOS und die durch die FAT-Datenstruktur auferlegten Einschränkungen, begrenzte Dateierweiterungen auf drei Buchstaben entstanden sind. HTML Application Eine HTML Application (HTA; Dateierweiterung .hta) ist eine Microsoft Windows-Anwendung, die HTML und Dynamic HTML in einem Browser verwendet, um die grafische Oberfläche der Anwendung bereitzustellen. Eine regelmäßige HTML-Datei ist auf das Sicherheitsmodell der Sicherheit des Webbrowsers beschränkt, nur auf Webserver zu kommunizieren und nur Web-Seitenobjekte und Website-Cookies zu manipulieren. Ein HTA läuft als voll vertrauenswürdige Anwendung und hat daher mehr Privilegien, wie die Erstellung/Bearbeiten/Entfernung von Dateien und Windows Registry Einträge. Weil sie außerhalb des Sicherheitsmodells des Browsers arbeiten, können HTAs nicht über HTTP ausgeführt werden, sondern müssen (genau wie eine EXE-Datei) heruntergeladen und aus dem lokalen Dateisystem ausgeführt werden. HTML4 Variationen Seit seiner Gründung hat HTML und seine zugehörigen Protokolle relativ schnell Akzeptanz erlangt. In den frühen Jahren der Sprache gab es jedoch keine klaren Standards. Obwohl seine Urheber ursprünglich von HTML als semantische Sprache konzipiert, ohne von Präsentationsdetails, praktische Anwendungen drängt viele Präsentationselemente und Attribute in die Sprache, angetrieben weitgehend von den verschiedenen Browser-Anbietern. Die neuesten Standards rund um HTML spiegeln die Bemühungen wider, die manchmal chaotische Entwicklung der Sprache zu überwinden und eine rationale Grundlage für den Aufbau von sowohl aussagekräftigen als auch gut vertretenen Dokumenten zu schaffen.Um HTML in seine Rolle als semantische Sprache zurückzugeben, hat der W3C Stilsprachen wie CSS und XSL entwickelt, um die Last der Präsentation zu erhöhen. In Verbindung mit der HTML-Spezifikation hat sich die Präsentationselemente langsam wieder entwickelt. Es gibt zwei Achsen, die verschiedene Variationen von HTML wie derzeit angegeben unterscheiden: SGML-basierte HTML versus XML-basierte HTML (als XHTML bezeichnet) auf einer Achse, und strenge versus Übergangs (Loose) gegen Frameset auf der anderen Achse. SGML-basiertes versus XML-basiertes HTML Ein Unterschied in den neuesten HTML-Spezifikationen besteht in der Unterscheidung zwischen der SGML-basierten Spezifikation und der XML-basierten Spezifikation. Die XML-basierte Spezifikation wird in der Regel XHTML genannt, um sie deutlich von der traditionellen Definition zu unterscheiden. Der Root-Element-Name ist jedoch auch im XHTML-spezifischen HTML weiterhin html. Die W3C beabsichtigte, XHTML 1.0 identisch zu HTML 4.01 zu sein, außer wenn Einschränkungen von XML über die komplexeren SGML Workarounds erfordern. Da XHTML und HTML eng miteinander verbunden sind, werden sie manchmal parallel dokumentiert. Unter diesen Umständen konfiszieren einige Autoren die beiden Namen (X)HTML oder X(HTML). Wie HTML 4.01, XHTML 1.0 hat drei Unterspezifikationen: streng, Übergangs- und Frameset. Neben den unterschiedlichen Öffnungserklärungen für ein Dokument sind die Unterschiede zwischen einem HTML 4.01 und XHTML 1.0-Dokument - in jedem der entsprechenden DTDs - weitgehend syntaktisch. Die zugrunde liegende Syntax von HTML ermöglicht viele Verknüpfungen, die XHTML nicht, wie Elemente mit optionalen Öffnungs- oder Schließ-Tags, und sogar leere Elemente, die keinen End-Tag haben dürfen. XHTML hingegen erfordert, dass alle Elemente einen Öffnungs-Tag und einen Schließ-Tag haben. XHTML führt jedoch auch eine neue Verknüpfung ein: Ein XHTML-Tag kann innerhalb desselben Tags geöffnet und geschlossen werden, indem ein Slash vor dem Ende des Tags wie diese: <br/>.Die Einführung dieser Kurzhand, die nicht in der SGML-Deklaration für HTML 4.01 verwendet wird, kann frühere Software nicht vertraut mit dieser neuen Konvention verwirren. Ein Fix dafür ist, einen Raum vor dem Schließen des Tags einzubeziehen, wie z.B.: <br ./> Um die subtilen Unterschiede zwischen HTML und XHTML zu verstehen, betrachten Sie die Transformation eines gültigen und gut ausgebildeten XHTML 1.0 Dokuments, das sich an Anlage C (siehe unten) in ein gültiges HTML 4.01 Dokument hält. Für diese Übersetzung sind folgende Schritte erforderlich: Die Sprache für ein Element sollte mit einem lang Attribut anstelle des XHTML xml:lang Attributs angegeben werden. XHTML verwendet XMLs, die in dem Attribut "Sprachdefining-Funktionalität" erstellt wurden. Entfernen Sie den XML-Namespace (xmlns=URI). HTML hat keine Einrichtungen für Namensräume. Ändern Sie die Dokumenttyp-Deklaration von XHTML 1.0 auf HTML 4.01. (siehe Abschnitt DTD zur weiteren Erläuterung). Wenn vorhanden, entfernen Sie die XML-Deklaration.( Typischerweise ist dies: <?xml version="1.0 encoding="utf-8"?>. Stellen Sie sicher, dass der MIME-Typ des Dokuments auf Text/html gesetzt wird. Für HTML und XHTML kommt dies aus dem vom Server gesendeten HTTP Content-Type-Header. Ändern Sie die XML-Releerelement-Syntax auf ein HTML-Stil leeres Element <(br /> bis <br>). Dies sind die wichtigsten Änderungen, die notwendig sind, um ein Dokument von XHTML 1.0 auf HTML 4.01. zu übersetzen. Um von HTML auf XHTML zu übersetzen würde auch die Hinzufügung von weggelassenen Öffnungs- oder Schließ-Tags erfordern. Ob in HTML oder XHTML kodierend, es kann einfach am besten sein, immer die optionalen Tags innerhalb eines HTML-Dokuments einzubeziehen, anstatt sich zu erinnern, auf welche Tags verzichtet werden kann. Ein gut ausgebildetes XHTML-Dokument entspricht allen Syntaxanforderungen von XML. Ein gültiges Dokument entspricht der Inhaltsspezifikation für XHTML, die die Dokumentenstruktur beschreibt. Der W3C empfiehlt mehrere Konventionen, um eine einfache Migration zwischen HTML und XHTML zu gewährleisten (siehe HTML Compatibility Guidelines). Die folgenden Schritte können nur auf XHTML 1.0-Dokumente angewendet werden: Fügen Sie sowohl xml:lang- als auch lang-Attribute auf beliebigen Elementen, die Sprache zuordnen. Verwenden Sie die Leerzeichen-Syntax nur für Elemente, die in HTML als leer angegeben sind. Enthalten Sie einen zusätzlichen Platz in leeren Element-Tags: z.B. <br /> anstelle von <br>.Include explizite Close-Tags für Elemente, die Inhalte zulassen, aber leer gelassen werden (z.B. div>/div, nicht <div ./)> Überlassen Sie die XML-Deklaration. Durch die sorgfältigen Einhaltung der Kompatibilitätsrichtlinien von W3C sollte ein Nutzer-Agent das Dokument genauso interpretieren können wie HTML oder XHTML. Für Dokumente, die XHTML 1.0 sind und auf diese Weise kompatibel gemacht wurden, erlaubt der W3C, sie entweder als HTML (mit Text/html MIME-Typ) oder als XHTML (mit einer Anwendung/xhtml+xml oder Anwendung/xml MIME-Typ) zu bedienen.Bei der Auslieferung als XHTML sollten Browser einen XML-Parser verwenden, der sich strikt an die XML-Spezifikationen zur Parsierung der Inhalte des Dokuments hält. Transitional gegen strenges HTML 4 definierte drei verschiedene Versionen der Sprache: Strict, Transitional (seit Loose genannt) und Frameset. Die Strict-Version ist für neue Dokumente gedacht und gilt als beste Praxis, während die Transitional- und Frameset-Versionen entwickelt wurden, um es zu erleichtern, Dokumente, die mit älteren HTML-Spezifikationen übereinstimmen oder nicht einer Spezifikation einer Version von HTML 4 entsprechen. Die Transitional- und Frameset-Versionen ermöglichen eine Präsentationsmarkierung, die in der Strict-Version entfällt. Stattdessen werden Kaskadierungsstil-Bögen gefördert, um die Präsentation von HTML-Dokumenten zu verbessern. Da XHTML 1 nur eine XML-Syntax für die durch HTML 4 definierte Sprache definiert, gelten auch für XHTML 1 dieselben Unterschiede. Die Übergangsversion ermöglicht folgende Teile des Vokabulars, die nicht in der Strict-Version enthalten sind: Ein loseres Inhaltsmodell Inline-Elemente und Klartext sind direkt erlaubt in: Körper, Blockquote, Form, Noscript und Noframes Präsentation verwandte Elemente unterstreichen u)(Deprecated. CSS-Attribut (im Gegensatz zu CSS-Attribut) und CSS-Attribut (im Gegensatz zu CSS-Attribut) Verwenden Sie stattdessen das Objektelement.) Die Sprache (Obsolete) Attribut auf Skriptelement (redundant mit dem Typ Attribut). Frame-bezogene Einheiten iframe noframes Ziel (in der Karte, Link und Form Elemente definiert.) auf einer, clientseitigen Bildkarte (Karte,) Link, Form und Basiselemente Die Frameset-Version umfasst alles in der Übergangsversion, sowie das Frameset-Element (an Stelle des Körpers verwendet) und das Rahmenelement. Rahmensatz gegen Übergang Zusätzlich zu den obigen Übergangsdifferenzen geben die Frameset-Spezifikationen (ob XHTML 1.0 oder HTML 4.01) ein anderes Content-Modell an, mit Frameset-Ersatzkörper, der entweder Frame-Elemente oder optional Noframes mit einem Körper enthält. Zusammenfassung der Spezifikationsversionen Wie diese Liste zeigt, werden die losen Versionen der Spezifikation für die ältere Unterstützung beibehalten. Im Gegensatz zu beliebten Missverständnissen bedeutet der Umzug zu XHTML jedoch nicht eine Entfernung dieser Vermächtnis-Unterstützung. Vielmehr steht das X in XML für erweiterbar und das W3C modularisiert die gesamte Spezifikation und öffnet es bis zu unabhängigen Erweiterungen. Die primäre Leistung beim Übergang von XHTML 1.0 auf XHTML 1.1 ist die Modularisierung der gesamten Spezifikation. Die strenge Version von HTML wird in XHTML 1.1 über eine Reihe modularer Erweiterungen zur Basis-XHTML 1.1-Spezifikation eingesetzt. Ebenso findet jemand, der nach den lose (transitionellen) oder Frameset-Spezifikationen sucht, ähnliche erweiterte XHTML 1.1-Unterstützung (viel davon ist in den Legacy- oder Frame-Modulen enthalten).Die Modularisierung ermöglicht es auch, separate Features auf ihrem eigenen Zeitplan zu entwickeln. So wird z.B. XHTML 1.1 eine schnellere Migration auf neue XML-Standards wie MathML (eine Präsentations- und semantische Mathematik auf Basis von XML) und XForms – eine neue hochmoderne Web-Form-Technologie, um die vorhandenen HTML-Formen zu ersetzen. Zusammenfassend wurde die HTML 4-Spezifikation in erster Linie in allen verschiedenen HTML-Implementierungen in eine einzige eindeutig geschriebene Spezifikation auf Basis von SGML eingefügt. XHTML 1.0, portierte diese Spezifikation ebenso wie die neue XML-definierte Spezifikation. Als nächstes nutzt XHTML 1.1 die erweiterbare Natur von XML und modularisiert die gesamte Spezifikation. XHTML 2.0 sollte der erste Schritt sein, um der Spezifikation neue Features in einem standard-body-basierten Ansatz hinzuzufügen. WHATWG HTML versus HTML5 Der HTML Living Standard, der von WHATWG entwickelt wird, ist die offizielle Version, während W3C HTML5 nicht mehr von WHATWG getrennt ist. WYSIWYG-Editoren Es gibt einige WYSIWYG-Editoren (What You See Is What You Get), in denen der Benutzer alles herausgibt, wie es im HTML-Dokument mit einer grafischen Benutzeroberfläche (GUI,) oft ähnlich wie Word-Prozessoren erscheint. Der Editor macht das Dokument anstatt den Code anzuzeigen, so dass Autoren nicht umfangreiches Wissen über HTML benötigen. Das WYSIWYG-Editing-Modell wurde kritisiert, vor allem wegen der geringen Qualität des generierten Codes; es gibt Stimmen, die eine Änderung des WYSIWYM-Modells (Was Sie sehen ist, was Sie meinen). Die WYSIWYG-Editoren bleiben wegen ihrer wahrgenommenen Fehler ein kontroverses Thema, wie: Relying vor allem auf Layout im Gegensatz zu Bedeutung, oft mit Markup, die nicht die beabsichtigte Bedeutung, sondern einfach kopiert das Layout. Oft produzieren extrem Verbose und redundanten Code, die nicht die Kaskadierung Natur von HTML und CSS verwenden. Oft erzeugt man ungrammatisches Markup, genannt Tagsuppe oder semantisch falsches Markup (wie <em> für Italics). Da viele Informationen in HTML-Dokumenten nicht im Layout sind, wurde das Modell für seine "was Sie sehen, ist alles, was Sie erhalten"-Natur kritisiert. Siehe auch Referenzen Externe Links HTML bei Curlie WHATWG's HTML Living Standard W3C's HTML Spezifikation (letzte Version) Dave Raggett's Einführung in HTML Tim Berners-Lee Gibt dem Web eine neue Definition HTML-Entities