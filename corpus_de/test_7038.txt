In der Informatik handelt es sich um einen Wert, der es einem Programm ermöglicht, indirekt auf ein bestimmtes Datum zuzugreifen, wie beispielsweise einen Wert einer Variablen oder einen Datensatz, im Speicher des Computers oder in einem anderen Speichergerät. Die Referenz soll sich auf das Datum beziehen, und der Zugriff auf das Datum wird als Abweisung der Referenz bezeichnet. Eine Referenz unterscheidet sich vom Datum selbst. Typischerweise wird für Bezugnahmen auf Daten, die auf einem bestimmten System im Speicher gespeichert sind, eine Referenz als physikalische Adresse ausgeführt, in der die Daten im Speicher oder in der Speichereinrichtung gespeichert werden. Aus diesem Grund wird eine Referenz oft irrtümlich mit einem Zeiger oder einer Adresse verwechselt und die Daten "angeben". Es kann aber auch auf andere Weise eine Referenz durchgeführt werden, wie z.B. der Offset (Differenz) zwischen der Adresse des Datums und einer bestimmten Basisadresse, als Index in ein Array, oder abstrakter als Griff. In der Vernetzung kann es sich um Netzwerkadressen wie URLs handeln. Das Referenzkonzept darf nicht mit anderen Werten (Schlüsseln oder Kennungen) verwechselt werden, die die Datenposition eindeutig identifizieren, sondern nur durch einen nicht-trivialen Lookup-Betrieb in einer Tabellendatenstruktur Zugriff darauf geben. Referenzen werden in der Programmierung weit verbreitet, insbesondere um große oder mutierbare Daten effizient als Argumente an Prozeduren zu übergeben oder solche Daten unter verschiedenen Anwendungen zu teilen. Insbesondere kann auf eine Größe oder einen Datensatz verwiesen werden, die Referenzen auf andere Daten enthält. Diese Idee ist die Grundlage der indirekten Adressierung und vieler verknüpfter Datenstrukturen, wie z.B. verknüpfte Listen. Referenzen können erhebliche Komplexität in einem Programm verursachen, zum Teil durch die Möglichkeit von dangling und wild Referenzen und zum Teil, weil die Topologie von Daten mit Referenzen ein gerichtetes Diagramm ist, dessen Analyse kann ziemlich kompliziert sein. Vorteile Referenzen erhöhen die Flexibilität bei der Speicherung von Objekten, wie sie zugewiesen werden und wie sie zwischen Codebereichen weitergegeben werden. Solange man auf einen Bezug zu den Daten zugreifen kann, kann man auf die Daten zugreifen, und die Daten selbst müssen nicht bewegt werden. Sie erleichtern auch den Austausch von Daten zwischen verschiedenen Codebereichen; jeder verweist darauf. Der Mechanismus der Referenzen, wenn sich die Umsetzung ändert, ist eine grundlegende Programmiersprache, die fast allen modernen Programmiersprachen gemeinsam ist. Selbst einige Sprachen, die keine direkte Verwendung von Referenzen unterstützen, haben einen internen oder impliziten Gebrauch. Beispielsweise kann der Aufruf durch Referenzaufrufkonvention entweder mit expliziter oder impliziter Verwendung von Referenzen durchgeführt werden. Beispiele Pointer sind die primitivste Referenzart. Aufgrund ihrer intimen Beziehung mit der zugrunde liegenden Hardware sind sie eine der leistungsfähigsten und effizientesten Referenzen. Aber auch aufgrund dieser Beziehung erfordern Pointer ein starkes Verständnis durch den Programmierer der Details der Gedächtnisarchitektur. Da Pointer die Adresse eines Speicherplatzes speichern, kann eine unangemessene Verwendung von Pointern zu einem undefinierten Verhalten in einem Programm führen, insbesondere durch dangling pointers oder wild pointers. Smart Pointer sind undurchsichtige Datenstrukturen, die wie Pointer wirken, aber nur über bestimmte Methoden zugegriffen werden können. Ein Griff ist eine abstrakte Referenz und kann auf verschiedene Weise dargestellt werden. Ein häufiges Beispiel sind Dateigriffe (die FILE-Datenstruktur in der C-Standard-I/O-Bibliothek), die zum Abstrakten von Dateiinhalten verwendet werden. Es stellt in der Regel sowohl die Datei selbst, wie bei der Anforderung eines Schlosses auf der Datei, als auch eine bestimmte Position im Inhalt der Datei dar, wie beim Lesen einer Datei. Bei verteiltem Computing kann die Referenz mehr als eine Adresse oder Kennung enthalten; sie kann auch eine eingebettete Spezifikation der Netzwerkprotokolle enthalten, die zum Auffinden und Zugriff auf das referenzierte Objekt verwendet werden, die Art und Weise Information codiert oder serialisiert wird. So kann beispielsweise eine WSDL-Beschreibung eines Remote-Webdienstes als Referenz betrachtet werden; sie enthält eine vollständige Spezifikation, wie man einen bestimmten Webdienst lokalisiert und bindet. Ein Bezug auf ein live verteiltes Objekt ist ein weiteres Beispiel: Es ist eine vollständige Spezifikation, wie eine kleine Software-Komponente als Proxy zu konstruieren, die anschließend in eine Peer-to-Peer-Interaktion eingreift und durch die die lokale Maschine Zugriff auf Daten gewinnen kann, die repliziert oder nur als schwach konsistenter Nachrichtenstrom existiert. In all diesen Fällen enthält die Referenz den vollen Satz von Anweisungen oder ein Rezept für den Zugriff auf die Daten; in diesem Sinne dient sie dem gleichen Zweck wie eine Kennung oder Adresse im Speicher. Formale Darstellung In der Regel kann eine Referenz als ein Stück von Daten betrachtet werden, die ein eindeutiges Abrufen eines anderen Stücks von Daten ermöglicht. Dazu gehören Primärschlüssel in Datenbanken und Schlüsseln in einem assoziativen Array. Wenn wir eine Reihe von Schlüsseln K und eine Reihe von Datenobjekten D haben, definiert jede gut definierte (einwertige) Funktion von K bis D ∪ {null} eine Art Referenz, wobei null das Bild eines Schlüssels ist, der nichts aussagekräftiges bezieht. Eine alternative Darstellung einer solchen Funktion ist ein gerichtetes Diagramm, das als Erreichbarkeitsdiagramm bezeichnet wird. Dabei ist jedes Datum durch einen Scheitel dargestellt und es gibt eine Kante von u bis v, wenn das Datum in u auf das Datum in v verweist. Der maximale Grad ist eins. Diese Grafiken sind wertvoll in der Müllsammlung, wo sie verwendet werden können, um von unzugänglichen Gegenständen zu trennen. Externe und interne Speicherung In vielen Datenstrukturen bestehen große, komplexe Objekte aus kleineren Objekten. Diese Objekte werden typischerweise auf einer von zwei Arten gespeichert: Bei einer internen Speicherung werden die Inhalte des kleineren Objekts innerhalb des größeren Objekts gespeichert. Bei externer Speicherung werden die kleineren Objekte an ihrer eigenen Stelle zugeordnet und das größere Objekt speichert nur Referenzen auf sie. Die interne Speicherung ist in der Regel effizienter, da es einen Platzaufwand für die Referenzen und dynamische Zuordnungsmetadaten und einen Zeitaufwand zur Ableitung einer Referenz und zur Zuordnung des Speichers für die kleineren Objekte gibt. Die interne Speicherung verbessert auch die Lokalität der Referenz, indem verschiedene Teile desselben großen Objekts in der Nähe des Speichers gehalten werden. Es gibt jedoch eine Vielzahl von Situationen, in denen eine externe Speicherung bevorzugt ist: Ist die Datenstruktur rekursiv, so kann sie sich selbst enthalten. Dies kann nicht intern dargestellt werden. Wird das größere Objekt in einem Bereich mit begrenztem Raum, wie dem Stack, gespeichert, so können wir das Auslaufen aus dem Speicher verhindern, indem wir in einem anderen Speicherbereich große Bauteilobjekte speichern und diese anhand von Referenzen beziehen. Wenn die kleineren Objekte in der Größe variieren können, ist es oft unbequem oder teuer, das größere Objekt so zu vergrößern, dass es sie noch enthalten kann. Referenzen sind oft einfacher zu arbeiten und besser an neue Anforderungen anzupassen. Einige Sprachen, wie Java, Smalltalk, Python und Scheme, unterstützen nicht den internen Speicher. In diesen Sprachen werden alle Objekte durch Referenzen gleichmäßig zugegriffen. Sprachunterstützung In Montagesprachen, den ersten Sprachen, ist es üblich, Referenzen mit entweder Rohspeicheradressen oder Indexen in Tabellen auszudrücken. Diese Arbeit, aber sind etwas schwierig zu verwenden, weil eine Adresse Ihnen nichts über den Wert erzählt, auf den es verweist, nicht einmal wie groß es ist oder wie es zu interpretieren; solche Informationen werden in der Programmlogik kodiert. Das Ergebnis ist, dass Fehlinterpretationen in falschen Programmen auftreten können, was verwirrende Fehler verursacht. Eines der frühesten opaken Referenzen war die der Lisp-Sprachkonszelle, die einfach eine Platte mit zwei Verweisen auf andere Lisp-Objekte, einschließlich möglicherweise andere Konszellen. Diese einfache Struktur wird am häufigsten verwendet, um einzelne verknüpfte Listen zu erstellen, kann aber auch verwendet werden, um einfache binäre Bäume und sogenannte "dotierte Listen", die nicht mit einer Null-Referenz, sondern einem Wert beenden. Eine andere frühe Sprache, Fortran, hat keine explizite Darstellung von Referenzen, aber verwendet sie implizit in seiner Call-by-Referenz, die Semantik. Der Pointer ist heute noch einer der beliebtesten Referenzen. Es ist ähnlich wie bei der Montagedarstellung einer Rohadresse, mit der Ausnahme, dass sie einen statischen Datentyp trägt, der in der Kompilationszeit verwendet werden kann, um sicherzustellen, dass die von ihm genannten Daten nicht falsch interpretiert werden. Da C jedoch ein schwaches Typensystem aufweist, das mit Gussen (explizite Umwandlungen zwischen verschiedenen Pointertypen und zwischen Pointertypen und Integern) verletzt werden kann, ist noch eine Fehlinterpretation möglich, wenn schwieriger. Sein Nachfolger C+ versuchte, die Art der Sicherheit von Pointern mit neuen Cast-Operatoren und intelligenten Pointern in seiner Standardbibliothek zu erhöhen, aber immer noch die Fähigkeit, diese Sicherheitsmechanismen für die Kompatibilität zu umgehen. Eine Reihe von populären Mainstream-Sprachen heute wie Eiffel, Java, C, # und Visual Basic haben eine viel mehr opake Art von Referenz angenommen, in der Regel als einfach als Referenz bezeichnet. Diese Referenzen haben Typen wie C-Pointer, die angeben, wie die von ihnen referenzierten Daten interpretiert werden sollen, aber sie sind typesafe, indem sie nicht als Rohadresse interpretiert werden können und unsichere Konvertierungen nicht zulässig sind. FortranA Fortran Referenz wird am besten als Alias eines anderen Objekts gedacht, wie eine Skalarvariable oder eine Zeile oder Spalte eines Arrays. Es gibt keine Syntax, um die Referenz abzuleiten oder den Inhalt des Schiedsrichters direkt zu manipulieren. Fortran Referenzen können null sein. Wie in anderen Sprachen erleichtern diese Referenzen die Verarbeitung dynamischer Strukturen, wie verlinkte Listen, Warteschlangen und Bäume. Funktionssprachen In allen oben genannten Einstellungen macht das Konzept von Mutable Variablen, Daten, die geändert werden können, oft implizite Verwendung von Referenzen. In Standard ML, OCaml und vielen anderen funktionellen Sprachen sind die meisten Werte persistent: sie können nicht durch Zuordnung geändert werden. Zuordenbare "Referenzzellen" dienen den unvermeidbaren Zwecken von mutierbaren Referenzen in Imperativsprachen und machen die Möglichkeit, explizit geändert zu werden. Solche Referenzzellen können einen beliebigen Wert halten, und so erhält man den polymorphen Typ α ref, wobei α durch die Art des Wertes ersetzt werden soll. Diese mutierbaren Referenzen können über ihre Lebensdauer auf verschiedene Objekte gerichtet werden. Dies ermöglicht beispielsweise den Aufbau von kreisförmigen Datenstrukturen. Die Referenzzelle entspricht funktionell einem Array der Länge 1. Um die Sicherheit und die Effizienz der Implementierungen zu erhalten, können Referenzen nicht in ML eingestrahlt werden, noch kann Pointer arithmetic durchgeführt werden. Es ist wichtig zu beachten, dass im funktionalen Paradigma viele Strukturen, die mit Zeigern in einer Sprache wie C dargestellt würden, mit anderen Einrichtungen wie dem leistungsfähigen algebraischen Datentyp-Mechanismus vertreten sind. Der Programmierer ist dann in der Lage, bestimmte Eigenschaften (wie die Garantie der Unmutbarkeit) während der Programmierung zu genießen, obwohl der Compiler oft Maschinenzeiger "unter der Haube" verwendet. Einige Sprachen, wie Perl, unterstützen symbolische Referenzen, die nur String-Werte sind, die die Namen von Variablen enthalten. Wenn ein Wert, der keine regelmäßige Referenz ist, abgeleitet wird, hält Perl es für eine symbolische Referenz und gibt die Variable mit dem durch den Wert angegebenen Namen. PHP hat eine ähnliche Funktion in Form seiner $var-Syntax. Referenzen in objektorientierten Sprachen Viele objektorientierte Sprachen nutzen umfangreiche Referenzen. Sie können Referenzen verwenden, um Objekte zuzugreifen und zuzuordnen. Referenzen werden auch in Funktions-/Methodenanrufen oder Nachrichtenübermittlung verwendet und Referenzzählungen werden häufig verwendet, um Müllsammlungen von ungenutzten Gegenständen durchzuführen. Siehe auch Referenztyp Abstraktion (Computerwissenschaft)Autovivification Bounded Pointer Dereferenceable Uniform Resource Identifier Magic Cookie Variable (Programmierung) Schwache Referenz Referenzen Externe Links Pointer Fun Mit Binky Einführung in Zeiger in einem 3-minütigen Bildungsvideo – Stanford Computer Science Education Library