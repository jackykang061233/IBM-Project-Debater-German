In der Betriebsforschung ist die Cuckoo-Suche ein Optimierungsalgorithmus, den Xin-She Yang und Suash Deb 2009 entwickelt haben. Es war inspiriert von dem obligate Brutparasitism einiger Kuckuckspezies, indem sie ihre Eier in die Nester von Wirtsvögeln anderer Spezies legen. Einige Wirtsvögel können direkten Konflikt mit den eindringlichen Kuckucks führen. Wenn beispielsweise ein Wirtsvogel entdeckt, dass die Eier nicht ihre eigenen sind, wird es entweder diese fremden Eier wegwerfen oder einfach sein Nest verlassen und ein neues Nest anderswo aufbauen. Einige Kuckuckspezies wie die New World brood-parasitic Tapera haben sich so entwickelt, dass weibliche parasitäre Kuckucks sind oft sehr spezialisiert auf die Mimik in Farben und Muster der Eier von einigen ausgewählten Wirtsarten. Cuckoo-Suche idealisierte solche Zuchtverhalten und kann somit für verschiedene Optimierungsprobleme angewendet werden. Es hat sich gezeigt, dass die Kuckuckussuche ein besonderer Fall der bekannten (μ + λ)-Evolutionsstrategie ist. Metaphor Cuckoo search (CS) verwendet die folgenden Darstellungen: Jedes Ei in einem Nest stellt eine Lösung dar, und ein Kuckuckuckei stellt eine neue Lösung dar. Ziel ist es, die neuen und potenziell besseren Lösungen (Kuckus) zu verwenden, um eine nicht so gute Lösung in den Nestern zu ersetzen. In der einfachsten Form hat jedes Nest ein Ei. Der Algorithmus kann auf kompliziertere Fälle erweitert werden, in denen jedes Nest mehrere Eier aufweist, die eine Reihe von Lösungen darstellen. CS basiert auf drei idealisierten Regeln: Jeder Kuckuck legt ein Ei zu einer Zeit, und gießt sein Ei in einem zufällig ausgewählten Nest; Die besten Nester mit hoher Qualität von Eiern werden zur nächsten Generation übertragen; die Anzahl der verfügbaren Wirtsnester ist fixiert, und das von einem Kuckuck gelegte Ei wird vom Wirtsvogel mit einer Wahrscheinlichkeit p a ε (0, 1 ) {\displaystyle p_{a}\in (0,1}) entdeckt. In diesem Fall kann der Wirtsvogel das Ei wegwerfen / das Nest verlassen und ein völlig neues Nest bauen. Darüber hinaus entdeckten Yang und Deb, dass die zufällige Walk-Stil Suche besser durch Lévy-Flüge statt einfache zufällige Spaziergang durchgeführt wird. Algorithmen Der Pseudo-Code kann als: Zielfunktion: f ( x ) , x = ( x 1 , x 2 , ... , x d ) ; {\displaystyle f(\mathbf {x},\)quad \mathbf {x} =(x_{1},x_{2},\dots x_{d;\}) Generieren Sie eine anfängliche Population von n {\displaystyle n} Wirtsnestern; Während (t<MaxGeneration) oder (Stop-Kriterium) Holen Sie sich einen Cuckoo zufällig (say, i) und ersetzen Sie seine Lösung durch die Durchführung von Lévy-Flüge; Bewerten Sie seine Qualität/Leistung F i {\displaystyle F_{i} [Für die Maximierung, F i a f ( x i ) {\displaystyle F_{i}\propto f(\mathbf {_i}) ]; Wählen Sie ein Nest unter n (say, j) zufällig; wenn ( F i > F j {\displaystyle F_{i}>F_{j ), Ersetzen j durch die neue Lösung; enden, wenn ein Bruchteil (p a {\displaystyle p_{a}) der schlechteren Nester verlassen und neue gebaut werden; Halten Sie die besten Lösungen / Nester; Rangieren Sie die Lösungen / Nester und finden Sie den aktuellen Algorithmus am besten; Passen Sie die aktuellen besten Lösungen für die nächste Generation; Ende, während Ein wichtiger Vorteil dieser Einfachheit ist. In der Tat gibt es im Vergleich mit anderen populations- oder agentenbasierten metaheuristischen Algorithmen wie Partikelschwarmoptimierung und Harmoniesuche im Wesentlichen nur einen einzigen Parameter p a {\displaystyle p_{a} in CS (außer der Populationsgröße n {\displaystyle n} .) Daher ist es sehr einfach zu implementieren. Zufällige Spaziergänge und die Stufengröße Ein wichtiges Thema sind die Anwendungen von Lévy-Flüge und zufällige Spaziergänge in der generischen Gleichung zur Generierung neuer Lösungen x t + 1 = x t + s E t, {\displaystyle \mathbf {x} {_t+1}=\mathbf {x} t}+sE_{t, wobei E t {displaystyle E_{t} aus einer Standard-Normalverteilung mit Null-Mittel- und Einheitsabweichung gezogen wird. Selbstverständlich können die zufälligen Spaziergänge auch mit der Ähnlichkeit zwischen dem Ei des Kuckucks und dem Ei des Wirtes verbunden werden, das bei der Umsetzung schwierig sein kann. Hier bestimmt die Schrittgröße s {\displaystyle s}, wie weit ein zufälliger Walker für eine bestimmte Anzahl von Iterationen gehen kann. Die Generierung der Lévy-Schrittgröße ist oft schwierig, und ein Vergleich von drei Algorithmen (einschließlich Mantegnas) wurde von Leccardi durchgeführt, die eine Implementierung von Chamberset al.'s Ansatz gefunden, um die rechnerisch effizienteste durch die geringe Anzahl der benötigten Zufallszahlen zu sein. Ist s zu groß, so wird die erzeugte neue Lösung zu weit von der alten Lösung entfernt sein (oder sogar außerhalb der Grenzen springen). Dann ist eine solche Bewegung unwahrscheinlich zu akzeptieren. Wenn s zu klein ist, ist die Änderung zu klein, um signifikant zu sein, und folglich ist diese Suche nicht effizient. So ist eine richtige Schrittgröße wichtig, um die Suche so effizient wie möglich zu halten. Als Beispiel für einfache isotrope zufällige Spaziergänge wissen wir, dass die durchschnittliche Distanz r {\displaystyle r} im d-Dimensionsraum gereist ist r 2 = 2 d D t, {\displaystyle r^{2}=2dDt, wobei D = s 2 / 2 τ {\displaystyle D = s^{2}/2\tau } ist der effektive Diffusionskoeffizient. Hier s {\displaystyle s} ist die Stufengröße oder die Distanz, die bei jedem Sprung zurückgelegt wird, und τ {\displaystyle \tau } ist die Zeit für jeden Sprung. Die obige Gleichung bedeutet, dass s 2 = τ r 2 t d . {\displaystyle s^{2}={\frac {\tau r^{2}{t\;d. Für eine typische Längenskala L einer interessierenden Dimension ist die lokale Suche typischerweise in einem Bereich von r = L / 10 {\displaystyle r=L/10} begrenzt.Für τ = 1 {\displaystyle \tau = 1} und t=100 bis 1000 haben wir s ≈ 0,01 L {\displaystyle s\approx 0.01L} für d=1 und s ≈ 0,001 L {\displaystyle s\approx 0.001L} für d=10. Daher können wir für die meisten Probleme s/L=0,001 bis 0,01 verwenden. Obwohl die genaue Ableitung eine detaillierte Analyse des Verhaltens von Lévy-Flüge erfordert. Algorithm- und Konvergenzanalyse wird fruchtbar sein, denn es gibt viele offene Probleme im Zusammenhang mit Metaheuristik Theoretische Analyse Als wesentliche Anstrengungen sind theoretische Analysen erforderlich, um die Leistungen von CS-Basisalgorithmen zu verbessern: Theoretische Analyse der Konvergenz von CS-basierten Algorithmen Bereitstellung der ausreichenden und notwendigen Bedingungen für die Steuerparametereinstellungen Verbesserte Cuckoo Search Algorithms Convergence of Cuckoo Search Algorithms Convergence von Cuckoo Search Algorithmus kann durch genetische Ersatz verlassener Nester erheblich verbessert werden (anstelle der Verwendung der zufälligen Ersetzungen aus der ursprünglichen Methode). Änderungen des Algorithmus wurden auch durch zusätzliches Interbreeding von besten (hohe Qualität) Nestern vorgenommen und dieser Ansatz wurde erfolgreich auf eine Reihe von industriellen Optimierungsproblemen angewendet. = Referenzen ==