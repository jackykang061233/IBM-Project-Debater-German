Softwarequalität bezieht sich auf zwei miteinander verbundene, aber unterschiedliche Begriffe: Software funktionelle Qualität zeigt, wie gut es einem bestimmten Entwurf entspricht oder entspricht, basierend auf funktionellen Anforderungen oder Spezifikationen. Dieser Attribut kann auch als Eignung zum Zweck einer Software oder als Vergleich mit Wettbewerbern auf dem Markt als lohnendes Produkt bezeichnet werden. Es ist der Grad, an dem die richtige Software produziert wurde. Software-Strukturqualität bezieht sich darauf, wie sie nicht-funktionale Anforderungen erfüllt, die die Erfüllung der funktionalen Anforderungen, wie Robustheit oder Aufrechterhaltung, unterstützen. Es hat viel mehr zu tun mit dem Grad, an dem die Software benötigt wird. Viele Aspekte der strukturellen Qualität lassen sich nur statischer anhand der Analyse der internen Struktur der Software (siehe Software-Parameter) auf der Ebene der Einheit, Systemebene (in einigen Fällen, die als End-to-end-Test bezeichnet werden), beurteilen, wie ihre Architektur den gesunden Grundsätzen der Softwarearchitektur entspricht, die in einem Papier über das Thema der Object Management Group (OMG) dargelegt sind. Manche Strukturqualitäten, wie die Nutzbarkeit, können jedoch nur dynamisch beurteilt werden (Nutzer oder andere, die in ihrem Auftrag mit der Software interagieren, oder zumindest einige Prototypen oder teilweise Umsetzung; selbst die Interaktion mit einer in Pappe hergestellten Modellversion stellt einen dynamischen Test dar, da diese Version als Prototyp angesehen werden kann). Andere Aspekte wie Zuverlässigkeit könnten nicht nur die Software, sondern auch die zugrunde liegende Hardware umfassen, so dass sie sowohl statisch als auch dynamisch bewertet werden kann (Stresstest). Funktionsqualität wird in der Regel dynamisch bewertet, aber es ist auch möglich, statische Tests (wie Softwareprüfungen) zu verwenden. Historisch wurden die Struktur, die Einstufung und die Terminologie der für das Software-Qualitätsmanagement geltenden Eigenschaften und Parameter von der ISO 9126 und der nachfolgenden Norm ISO/IEC 25000 abgeleitet oder gewonnen. Auf der Grundlage dieser Modelle (siehe Modelle) hat das Konsortium für IT Software Quality (CISQ) fünf wichtige wünschenswerte strukturelle Merkmale definiert, die für ein Stück Software benötigt werden, um Geschäftswert zu erbringen: Zuverlässigkeit, Effizienz, Sicherheit, Aufrechterhaltungsfähigkeit und (angemessene) Größe. Messung der Softwarequalität quantifizierte, in welchem Umfang ein Software-Programm oder Systemraten an jeder dieser fünf Dimensionen entsprechen. Eine aggregierte Maßnahme der Softwarequalität lässt sich durch eine qualitative oder quantitative Bewertung oder eine Mischung aus beiden und dann ein Gewichtungssystem berechnen, das die Prioritäten widerspiegelt. Diese Ansicht der Softwarequalität, die auf einem linearen Dauerum platziert wird, wird durch die Analyse von "kritischen Programmierungsfehlern" ergänzt, die unter bestimmten Umständen zu katastrophalen Ausbrüchen oder Leistungsverschlechtern führen können, die ein bestimmtes System ungeeignet für die Nutzung unabhängig von der Bewertung auf der Grundlage von aggregierten Messungen machen. Diese auf Systemebene festgestellten Programmierungsfehler machen bis zu 90 Prozent der Produktionsprobleme aus, während auf der Ebene der Einheit, auch wenn viel mehr, Programmierungsfehler weniger als 10 Prozent der Produktionsprobleme ausmachen (siehe auch neunty-ninety-Regel). Infolgedessen hat die Codequalität ohne den Kontext des gesamten Systems, wie W. Edwards Deming beschrieben, einen begrenzten Wert. Um die Messung, Analyse, Analyse und Kommunikation von Softwarequalitätsmessungen, Konzepte und Techniken der Informationsdarstellung zu sehen, bieten interaktive Mittel, insbesondere, wenn mehrere Softwarequalitätsmaßnahmen miteinander verknüpft werden müssen oder Komponenten einer Software oder eines Systems. Software-Karten sind beispielsweise ein spezielles Konzept, das "die Informationen über Softwareentwicklung, Softwarequalität und Systemdynamik zum Ausdruck bringen". Softwarequalität spielt auch in der Freisetzungsphase eines Softwareprojekts eine Rolle. Konkret sind die Qualität und die Einrichtung der Freisetzungsprozesse (auch Pfandverfahren), die Konfigurationsmanagement wichtige Teile eines gesamten Software-Engineering-Prozesses. Motivation Software-Qualität wird durch mindestens zwei Hauptperspektiven motiviert: Risikomanagement: Softwareausfall hat mehr als Unannehmlichkeiten verursacht. Softwarefehler können menschliche Todesfälle verursachen (siehe zum Beispiel: Liste der Software-Probleme). Die Ursachen reichen von schlecht konzipierten Benutzerschnittstellen bis zu direkten Programmierungsfehlern, beispielsweise Boeing 737 oder Unintended Beschleunigungsfälle oder Therac-25-Fälle. Dies führte zu Anforderungen für die Entwicklung einiger Arten von Software, insbesondere und historisch für Software, die in medizinischen und anderen Geräten eingebettet sind, die kritische Infrastrukturen regulieren: ["Engineering eingebettete Software], siehe Java-Programme ein Drittel eines zweiten Mal, um die Müllabfuhr durchzuführen und die Benutzeroberfläche zu aktualisieren und Flugzeuge, die aus dem Himmel fallen." In den Vereinigten Staaten bietet der FAA-Zertifizierungsdienst für Luftfahrzeuge Softwareprogramme, Politik, Beratung und Ausbildung, die sich auf Software und Komplexe elektronische Hardware konzentrieren, die sich auf das Bordprodukt auswirken (ein Produkt ist ein Flugzeug, ein Motor oder ein Propeller). Zertifizierungsstandards wie DO-178C, ISO 26262, IEC 62304, usw. stellen Leitlinien vor. Kostenmanagement: Wie in anderen Bereichen des Ingenieurwesens ist ein Software-Produkt oder Service, das von guten Software-Qualitätskosten weniger getragen wird, einfacher zu verstehen und kosteneffizienter zu ändern, um die Geschäftsbedürfnisse zu drängen. Industriedaten zeigen, dass die schlechte Anwendung der strukturellen Qualität in Kerngeschäftsanwendungen (wie Unternehmensressourcenplanung (ERP), Kundenbeziehungsmanagement (CRM) oder große Transaktionsverarbeitungssysteme im Finanzdienstleistungsbereich) zu Kosten, Zeitüberschreitungen und Abfallentsorgung in Form von Rework (siehe Muda (Japanese Term) führt. Darüber hinaus ist die schlechte strukturelle Qualität stark mit hohen Folgen verbunden, die durch beschädigte Daten, Anwendungen, Sicherheitsverletzungen und Leistungsprobleme verursacht werden. CISQ berichtet über die Kosten einer schlechten Qualität schätzt Auswirkungen von: 2,08 Billion Dollar im Jahr 2020 2,84 Billionen US$ im Jahr 2018 die Kosten eines Daten- Breach-Bericht 2020 zufolge die durchschnittlichen globalen Kosten eines Datenverstoßes:3.86 Millionen Definitionen ISO Software-Qualität sind „Kapazität eines Software-Produkts, das den Anforderungen entspricht“. für andere kann es gleich sein mit Kunden- oder Wertsteigerung oder sogar fehlerhaftem Niveau. ASQ ASQ verwendet folgende Definition: Softwarequalität beschreibt die wünschenswerten Eigenschaften von Softwareprodukten. Es gibt zwei Hauptansätze: Mangelmanagement und Qualitätsmerkmale. NIST Software Assurance (SA) erstreckt sich sowohl auf das Eigentum als auch auf den Prozess, um es zu erreichen:[Justifizierbar] Vertrauen, dass Software frei von Schwachstellen ist, entweder absichtlich in die Software oder versehentlich während ihres Lebenszyklus eingeführt wird und dass die Software-Funktionen auf die vorgesehene Weise Die geplanten und systematischen Maßnahmen, die gewährleisten, dass Software-Lebenszyklusprozesse und Produkte den Anforderungen, Normen und Verfahren entsprechen, definiert der PMBOK-Leitfaden „Software Extension“ selbst, aber die Softwarequalitätssicherung (SQA) als "ein kontinuierlicher Prozess, der andere Software-Prozesse prüft, um sicherzustellen, dass diese Prozesse eingehalten werden (einschließlich eines Software-Qualitätsmanagementplans)." Andere allgemeine und historische Die erste Definition der Qualitätsgeschichte ist von Shewhart Anfang des 20. Jahrhunderts: "Es gibt zwei gemeinsame Aspekte der Qualität: eine von ihnen muss die Qualität einer Sache als objektive Realität betrachten, die unabhängig von der Existenz des Menschen ist. Die andere muss mit dem tun, was wir denken, fühlen oder verstehen, die sich aus der objektiven Realität ergeben. In anderen Worten gibt es eine subjektive Qualität. " Küchenhamand Pfleeger, weitere Berichterstattung über die Lehren von David Garvin, fünf verschiedene Perspektiven für die Qualität: In der überentalen Perspektive geht es um den metaphysikalischen Aspekt der Qualität. In diesem Sinne ist es "eine Sache, auf die wir als Ideal arbeiten, aber nie vollständig umsetzen können". Man kann kaum definiert werden, aber ähnelt dem, was ein Bundesrichter einmal über Obscenity kommentiert hat: „Ich weiß, dass es mir ist, wenn ich es sehe. Die Benutzerperspektive ist besorgt über die Eignung des Produkts für einen bestimmten Kontext der Verwendung. Da die überfällige Ansicht ethereal ist, ist der Nutzer der Ansicht konkreter, in den Produkteigenschaften verankert, die den Bedürfnissen der Nutzer entsprechen. Die Produktionsperspektive entspricht der Qualität der Anforderungen. Dieser Aspekt der Qualität wird durch Normen wie ISO 9001 hervorgehoben, die Qualität definiert als "das Maß, an dem eine Reihe von typischen Merkmalen Anforderungen erfüllt" (ISO/IEC 9001). Die Produktperspektive bedeutet, dass Qualität durch Messung der inhärenten Merkmale des Produkts geschätzt werden kann. Endgültige Qualitätsperspektive ist wertbasierte. In dieser Perspektive wird anerkannt, dass die unterschiedlichen Qualitätsperspektiven für verschiedene Akteure unterschiedliche Bedeutung oder Wert haben können. Das Problem, das bei Versuchen besteht, die Qualität eines Produkts zu definieren, wurde vom Master Walter A. Shewhart erklärt. Die Schwierigkeit, Qualität zu definieren, besteht darin, die künftigen Bedürfnisse des Nutzers in messbare Merkmale zu übersetzen, damit ein Produkt entwickelt werden kann und sich zu einem Preis herausstellt, den der Nutzer zahlen wird. Dies ist nicht einfach, und sobald ein fairer Erfolg in der Endeavor fühlt, stellt er fest, dass sich die Bedürfnisse des Verbrauchers geändert haben, haben sich die Wettbewerber in usw. bewegt. Qualität ist eine Kundenentscheidung, keine Entschlossenheit des Ingenieurs, nicht eine Marketing-Bemessungsgrundlage, oder eine allgemeine Managementbestimmung. Sie basiert auf der tatsächlichen Erfahrung des Kunden mit dem Produkt oder dem Dienst, gemessen an seinen Anforderungen -- angegeben oder nichtig, bewusst oder einfach zu verstehen, technisch oder völlig subjektiv - und repräsentiert immer ein wettbewerbsfähiges Ziel auf einem wettbewerbsfähigen Markt. Die Wortqualität hat mehrere Bedeutungen. Zwei dieser Begriffe dominieren die Verwendung des Wortes: 1 Qualität besteht aus diesen Produktmerkmalen, die dem Bedarf der Kunden entsprechen und dadurch die Produktzufriedenheit gewährleisten. 2 Qualitaet besteht aus Unzulänglichkeiten. In einem Handbuch wie ders ist es jedoch zweckmäßig, auf eine kurze Definition der Wortqualität als "Appness for use" zu standardisieren. Tom DeMarco hat vorgeschlagen, "eine Produktqualität ist eine Funktion, wie viel sie die Welt für bessere Produkte verändert". Dies kann so ausgelegt werden, dass funktionelle Qualität und Benutzerzufriedenheit wichtiger sind als die strukturelle Qualität bei der Bestimmung der Softwarequalität. Eine weitere Definition, die von Gerald Reb in Quality Software Management: System-Ansatz, verwendet wird, ist „Qualität ist für einige Menschen wert“. In dieser Definition wird betont, dass Qualität in der Regel subjektiv ist – je nach Person wird die Qualität der gleichen Software anders aussehen. Eine Stärke dieser Definition ist die Fragen, die sie Softwareteams auffordert, zu erwägen, wie "Wer sind die Menschen, die unsere Software schätzen wollen?" und "Was wird für sie wertvoll sein?". Andere Bedeutungen und Kontroversen Eines der Herausforderungen bei der Definition von Qualität ist, dass "jeder einzelne sie verstehen" und andere Definitionen der Softwarequalität auf der Erweiterung der verschiedenen Beschreibungen des Konzepts der Qualität basieren könnten. Softwarequalität wird auch häufig mit Qualitätssicherung oder Problemlösungsmanagement oder Qualitätskontrolle oder DevOps gemischt. Überschneidet mit den genannten Bereichen (siehe auch die Definitionen von PMI), ist aber eindeutig, da sie sich nicht nur auf Tests, sondern auch auf Prozesse, Management, Verbesserungen, Bewertungen usw. konzentrieren. Messung Obwohl die in diesem Abschnitt vorgestellten Konzepte sowohl für die strukturelle als auch für die funktionelle Softwarequalität gelten, wird die Messung der letzteren im Wesentlichen durch Tests durchgeführt [siehe Hauptartikel: Softwareprüfung]. Tests sind jedoch nicht ausreichend: Laut einer Studie sind einzelne Programmierer weniger als 50 % effizient bei der Suche nach Fehlern in ihrer eigenen Software. Die meisten Testformen sind nur 35 % effizient. Dies macht es schwierig, [Software] Qualität zu bestimmen. Einführung einer Software-Qualitätsmessung geht davon aus, inwieweit ein System oder eine Software die gewünschten Merkmale aufweisen. Dies kann durch qualitative oder quantitative Mittel oder eine Mischung aus beiden erreicht werden. In beiden Fällen gibt es für jedes gewünschte Merkmal eine Reihe von messbaren Eigenschaften, deren Existenz in einem Teil von Software oder System eher korreliert und mit diesem Merkmal verbunden ist. Zum Beispiel ist ein mit der Portabilität verbundenes Leistungskennzeichen die Anzahl zielunabhängiger Aussagen in einem Programm. Genauer gesagt, mit Hilfe des Konzepts für die Qualität der Einsatzfähigkeit sind diese messbaren Eigenschaften die Art, die durchgesetzt werden müssen, um das, was in der oben genannten Software-Qualitätsdefinition, zu ermöglichen. Struktur, Einstufung und Terminologie der für die Software-Qualitätsmanagement geltenden Eigenschaften wurden aus der ISO 9126-3 und dem anschließenden ISO/IEC 25000:2005 Qualitätsmodell abgeleitet oder gewonnen. Hauptschwerpunkt ist die interne Strukturqualität. Unterklassen wurden geschaffen, um bestimmte Bereiche wie die Betriebsanwendungsarchitektur und technische Merkmale wie Datenzugriff und Manipulation oder den Begriff der Transaktionen zu bewältigen. Der Abhängigkeitsbaum zwischen den Merkmalen der Softwarequalität und ihren messbaren Eigenschaften ist in der Abbildung zu Recht vertreten, wo jeder der 5 Merkmale, die für den Nutzer (Recht) oder den Inhaber des Geschäftssystems relevant sind, von messbaren Eigenschaften (Link): Anwendungsarchitektur Coding Praxis Praxispraxis Anwendungsbereich Komplexität der Anwendungsbereichmäßigkeit Dokumentationspflicht Technik und Funktion des VolumenCorrelations zwischen Programmierungsfehlern und Produktionsfehlern, die zeigen, dass bei 92 % der Gesamtfehler im Code enthalten sind. Diese zahlreichen Code-Level-Fragen zählen schließlich nur 10 Prozent der Produktionsfehler. Bad Software-Engineering-Verfahren auf der Architekturebene machen nur 8 Prozent der Gesamtfehler aus, verbrauchen aber über die Hälfte der Anstrengungen, die bei der Festsetzung von Problemen unternommen wurden, und führen zu 90 Prozent der ernsten Zuverlässigkeit, Sicherheit und Effizienz in der Produktion. Codebasierte Analyse Viele der bestehenden Software-Maßnahmen zählen zu den strukturellen Bestandteilen der Anwendung, die sich aus der Festlegung des Quellecodes für solche individuellen Anweisungen ergeben, die Kontrollstrukturen (Complexity) und Gegenstände. Maßgeblich für die Qualität von Software ist die Quantifizierung eines Systems oder von Softwareraten an diesen Dimensionen. Die Analyse kann unter Verwendung eines qualitativen oder quantitativen Ansatzes oder einer Mischung aus beiden durchgeführt werden, um eine Gesamtsicht (z.B. gewichteter Durchschnitt(en) zu vermitteln, die relative Bedeutung der gemessenen Faktoren widerspiegelt]. Diese Ansicht der Softwarequalität auf linearem Dauerumsatz muss durch die Ermittlung diskreter kritischer Programmierungsfehler ergänzt werden. Diese Schwachstellen können keinen Testfall darstellen, aber sie sind das Ergebnis schlechter Praktiken, die unter bestimmten Umständen zu katastrophalen Ausbrüchen, Leistungsverschlechtern, Sicherheitsverletzungen, beschädigten Daten führen können, und meine anderen Probleme, die ein bestimmtes System tatsächlich ungeeignet machen, unabhängig von seiner Bewertung auf der Grundlage von aggregierten Messungen. Ein bekanntes Beispiel für die Anfälligkeit ist die gemeinsame Weakness-Enumeration, ein Speicher von Schwachstellen im Quellencode, der Anwendungen, die Sicherheitsverletzungen ausgesetzt sind. Die Messung kritischer Anwendungsmerkmale umfasst die Messung der strukturellen Eigenschaften der Architektur, der Kodierung und der Online-Dokumentation, wie im oben genannten Bild dargestellt. Jedes Merkmal ist daher von Eigenschaften auf zahlreichen Ebenen der abstrakten Anwendung betroffen, und alle müssen die Berechnung der charakteristischen Maßnahme enthalten, wenn es sich um einen wertvollen Vorhersehbarkeitsvorhersage für das Geschäft handelt. Boehm und seine Kollegen in TRW (Boehm, 1978) wurde zunächst vorgeschlagen, charakteristische Maßnahmen zu berechnen, die in der oben genannten Zahl dargestellt wurden. Diese Eigenschaften können anhand der Ergebnisse einer statischen Analyse des Antragscodes gemessen werden. Selbst dynamische Merkmale von Anwendungen wie Zuverlässigkeit und Leistungsfähigkeit haben ihre ursächlichen Wurzeln in der statischen Struktur der Anwendung. Strukturqualitätsanalyse und -messung werden durch die Analyse des Quellencodes, der Architektur, des Software-Rahmens, der Datenbank-Regelung in Bezug auf Grundsätze und Normen durchgeführt, die zusammen die Konzeption und logische Architektur eines Systems definieren. Dies unterscheidet sich von der Basis-, lokalen, Komponenten-Code-Analyse, die in der Regel durch Entwicklungsinstrumente durchgeführt wird, die in erster Linie mit Durchführungsbelangen in Betracht kommen und bei der Abschwächung und Testaktivitäten von entscheidender Bedeutung sind. Zuverlässigkeit Die Ursachen der schlechten Zuverlässigkeit finden sich in einer Kombination aus der Nichteinhaltung guter architektonischer und kodifizierender Praktiken. Diese Nichteinhaltung kann durch Messung der statischen Qualitätsmerkmale eines Antrags festgestellt werden. Bewertung der statischen Eigenschaften, die der Zuverlässigkeit eines Antrags zugrunde liegen, liefert eine Schätzung des Risikoniveaus der Unternehmen und die Wahrscheinlichkeit möglicher Anwendungsausfälle und Mängel, die der Antrag beim Betrieb erfahren wird. Bewertung der Zuverlässigkeit erfordert mindestens die folgenden bewährten Verfahren für Software-Engineering und technische Eigenschaften: Je nach Anwendungsarchitektur und den verwendeten Dritten (wie externen Bibliotheken oder Rahmen) sollten die Zollkontrollen entsprechend den Vorgaben der oben genannten Liste bewährter Verfahren definiert werden, um eine bessere Bewertung der Zuverlässigkeit der gelieferten Software sicherzustellen. Effizienz wie Zuverlässigkeit werden die Ursachen von Leistungsuneffizienz häufig bei Verletzungen guter architektonischer und schlüsselfertiger Praktiken festgestellt, die durch die Messung der statischen Qualitätsmerkmale einer Anwendung ermittelt werden können. In diesen statischen Eigenschaften werden potenzielle Leistungsengpässe und künftige Skalierbarkeitsprobleme vorhergesagt, insbesondere für Anwendungen, die eine hohe Ausführungsgeschwindigkeit für komplexe Algorithmen oder enorme Datenmengen erfordern. Leistungseffizienz muss mindestens die folgenden bewährten Verfahren für die Software-Engineering-Technologie und technische Eigenschaften prüfen: Anwendungsarchitekturpraxis Geeignete Wechselwirkungen mit teuren und/oder entlegenen Ressourcen Datenzugriffsleistung und Datenmanagement Memory, Netz- und CD-Weltraummanagement-konformität mit Coding-Verfahren (Beste Programmierpraktiken) Sicherheitssoftware-Qualität umfasst Softwaresicherheit. Viele Sicherheitsanfälligkeiten ergeben sich aus schlechtem Programmieren und architektonischen Praktiken, wie etwa der Injektion von SQL oder der grenzüberschreitenden Schrift. Diese werden in Listen dokumentiert, die von CWE gehalten werden, und das SEI/Computer Emergency Center (CERT) an der University of Carnegie Mellon. Bewertung der Sicherheit erfordert mindestens die Kontrolle der folgenden bewährten Verfahren und technischen Merkmale des Software-Engineering: Umsetzung, Management eines sicherheitsrelevanten und härteren Entwicklungsprozesses, z.B. des Sicherheitsentwicklungs-Lebenszyklus (Microsoft) oder des Safe Engineering Framework von IBM. Sichere Anwendung Architekturpraxis Multi-layer-Design Compliance Security Best Practices (Input Validierung, SQL Injektion, Cross-Site Drehbuching, Access Control usw.) Sichere und gute Programmierungspraxis Fehler & Ausnahmen Die Aufrechterhaltungsfähigkeit umfasst Konzepte der modularen Funktion, der Verständlichkeit, der Veränderungsfähigkeit, der Prüffähigkeit, der Reusibilität und der Übertragbarkeit von einem Entwicklungsteam auf ein anderes. Diese nehmen nicht die Form kritischer Fragen auf der Code-Ebene an.Unzulängliche Erhaltungsfähigkeit ist in der Regel das Ergebnis von Tausenden von geringfügigen Verstößen mit bewährten Praktiken in der Dokumentation, der Komplexitätsvermeidungsstrategie und den grundlegenden Programmierungspraktiken, die den Unterschied zwischen sauberem und leicht zu lesenden Code gegenüber unorganisiertem und schwer zu lesenden Code machen. Bewertung der Aufrechterhaltungsfähigkeit erfordert die Kontrolle der folgenden bewährten Verfahren und technischen Eigenschaften des Software-Engineering: Nachhaltigkeit steht in engem Zusammenhang mit dem Konzept des technischen Schuldenstands von Ward Cunnningham, der Ausdruck der Kosten ist, die sich aus mangelnder Instandhaltung ergeben. Gründe, warum die Aufrechterhaltungsfähigkeit niedrig ist, können als gütlich und vorsätzlich gegen unaufhörlich eingestuft werden, und haben oft ihren Ursprung in der Unfähigkeit der Entwickler, fehlende Zeit und Ziele, ihre Pflegelosigkeit und Diskrepansionen bei der Schaffung von Kosten und Nutzen aus der Dokumentation und insbesondere dem Wartungsarbeiten an der Quelle. GrößeMeasing Software-Größe erfordert, dass der gesamte Quellcode korrekt zusammengetragen wird, einschließlich Datenbank-Strukturschriften, Datenmanipulationscode, Bauteile, Konfigurationsdateien usw. Im Wesentlichen sind zwei Arten von Softwaregrößen zu messen, die technische Größe (Fußabdruck) und die funktionelle Größe: Es gibt mehrere Software-Techniken, die weithin beschrieben wurden. Die häufigste technische Methode ist die Anzahl der Leitungen des Code (#LOC) pro Technologie, Anzahl der Dateien, Funktionen, Klassen, Tabellen usw., aus denen die Rückführungsstellen berechnet werden können; die häufigste für die Messung der Funktionsgröße ist die Analyse. Funktionalitätspunktanalyse misst die Größe der Software aus Sicht der Nutzer. Funktionalitätspunkt sizing erfolgt auf der Grundlage der Nutzeranforderungen und bietet eine genaue Darstellung der beiden Größe für den Entwickler/Stimator und Wert (Funktionsbestimmung) und spiegelt die Geschäftsfunktion wider, die dem Kunden zu liefern ist. Die Methode umfasst die Identifizierung und Gewichtung der erkennbaren Inputs, Outputs und Datenlager. In Verbindung mit zahlreichen Maßnahmen zur Quantifizierung und Bewertung von Software-Lieferungen und Leistung (Entwicklungskosten pro Funktion, Lieferung von Mängeln pro Funktionpunkt; Funktionspunkte pro Monat). Die Standardanalyse der Funktionpunkte wird von der International Function Point Benutzer Group (IFPUG) unterstützt. Es kann früh in der Software-Entwicklungszyklus angewendet werden, und es ist nicht abhängig von Codelinien wie der etwas ungenauen Backfiring-Methode. Die Methode ist eine Technologie-Agnostik und kann für vergleichende Analysen zwischen Organisationen und Branchen verwendet werden. Seit der Einführung der Funktionsfähigkeit Punktanalyse haben sich mehrere Variationen entwickelt, und die Familie der funktionalen Methoden zur Verbesserung der Methoden hat sich erweitert, um solche Maßnahmen wie COSMIC, NESMA, Use Case Points, FP Lite, frühes und schnelles FP und die jüngsten Geschichtespunkte einzubeziehen. Funktionspunkte haben jedoch eine Geschichte der statistischen Genauigkeit und wurden in zahlreichen Anwendungsentwicklungsmanagements (ADM) oder Outsourcing-Verpflichtungen als gemeinsame Arbeitseinheit genutzt, die als Währung dient, durch die Dienstleistungen erbracht und Leistung gemessen wird. Eine gemeinsame Beschränkung der Funktionsweise Punkt-Methode ist, dass es ein manueller Prozess ist und daher arbeitsintensive und kostspielige Initiativen wie Anwendungen oder Outsourcing-Verpflichtungen sein können. Dieser negative Aspekt der Anwendung der Methode kann sein, was die IT-Leiter der Industrie dazu veranlasst haben, das Konsortium für IT-Software-Qualität zu bilden, das sich auf die Einführung eines Ausgleichsstandards für die Automatisierung der Softwaregröße konzentriert, während die IFPUG einen manuellen Ansatz fördert, da die meisten ihrer Aktivitäten auf RP-Konsultationen basieren. CISQ definiert Bewertung der Größe der Software zur Unterstützung von Kostenschätzungen, Fortschrittsverfolgung oder anderen verwandten Software-Projektmanagementaktivitäten. Zwei Normen werden verwendet: automatisierte Funktionpunkte zur Messung der funktionalen Größe der Software und der automatischen Verbesserungspunkte, um die Größe des funktionalen und nichtfunktionellen Code in einer Maßnahme zu messen. Ermittlung kritischer Programmierungsfehler kritischer Programmierungsfehler sind spezifische architektonische und/oder kodifizierende schlechte Praktiken, die zu einem höchstmöglichen, sofortigen oder langfristigen Ausfallrisiko führen. Diese sind oft technologieabhängig und hängen stark von Kontext, Geschäftszielen und Risiken ab. Manche können die Einhaltung von Konventen in Betracht ziehen, während andere – diejenigen, die zum Beispiel den Boden für einen Wissenstransfer vorbereiten – sie als absolut kritisch betrachten. Kritische Programmierung Fehler können auch nach GUSQ-Parametern klassifiziert werden. Grundbeispiel unten: Zuverlässigkeit Vermeidung von Softwaremustern, die zu unerwartetem Verhalten führen (Uninitialisierte variable, Nullpunkter usw.) of, Verfahren und Funktionen, die ein Ein-, Aktualisierungs-, Tabellen- oder Auswahlverfahren durchführen, müssen Multi-thread-Funktionen enthalten, sollten neutral sein, z.B. servlets oder strukturierende Aktionsklassen dürfen keine Fälle/Nicht-Ende statische Effizienz aufweisen, die die Zentralisierung von Kundenanfragen (in Zukunft und Daten) gewährleisten, um den NetzverkehrAvoid-Regime zu verringern, dass keine Indexierung gegen große Sicherheitstabellen verwendet wird, die keine statischen für die Datenverarbeitung und die Vermeidung von Fehlern bei der Endfehlern enthalten. Sicherstellung der Inputsvalidierung, um zu vermeiden, dass Klärchen oder 5% Injektionen Mängel bei der Erhaltungsfähigkeit vertiefter Erbbäume und Nester beibehalten werden, um die Kompatibilitätsmodulen zu verbessern, sollte locker gekoppelt (fanout, Intermediäre) sein, um die Anwendbarkeit von Änderungen zu vermeiden, die homogene Konventskonventionen für die Identifizierung operationeller Qualitätsmodelle Neue Vorschläge für Qualitätsmodelle wie Squale und Quamoco propagate eine direkte Integration der Definition von Qualitätsmerkmalen und Messung. Durch die Zersetzung von Qualitätsmerkmalen oder sogar die Festlegung zusätzlicher Schichten werden die komplexen, abstrakten Qualitätsmerkmale (wie Zuverlässigkeit oder Erhaltungsfähigkeit) funktionstüchtiger und messbarer. Diese Qualitätsmodelle wurden in industriellen Kontexten angewandt, wurden jedoch nicht weit verbreitet. Trivia "Eine Wissenschaft ist so reif wie ihre Messinstrumente." " Ich weiß, wann ich es sehe. " „Sie können nicht kontrollieren, was Sie nicht messen können.“(Tom DeMarco) „Sie können die Qualität in ein Produkt nicht prüfen“, (W Edwards Deming) „Die bittere Qualität bleibt lange, nachdem das Süßen der Erfüllung des Zeitplans vergessen wurde.“(Anonymous) „Wenn Sie nicht mit einem Spekulation beginnen, ist jedes Stück von Code, das Sie schreiben, ein Patch.“(Les Lamport) Lesen Sie auch Android OS Quality Guidelines, einschließlich Checklisten für UI, Security usw. Juli 2021 Association of Maritime Managers in Information Technology & Communications (AMMITEC). Maritime Software Quality Guidelines. September 2017 Capers Jones und Olivier Bonsignour, "The Economics of Software Quality", "Groom-Wesley Professional, 1. Dezember 2011, ISBN: @0-258220-9 CAT Lab - CNES Code Analysis Tool Laboratory (on Github)Girish Suryanarayana, Software-Prozess versus Design Quality: Tug of War?Ho-Won Jung, Seung-Gweon Kim und Chang-Sin Chung. Messung der Produktqualität von Software: Erhebung von ISO/IEC 9126. IEC Software, 21(5):10–13, September/Oktober 2004. Internationale Organisation für Normung. Software Engineering – Produktqualität – Teil 1: Qualitätsmodell. ISO, Genf, Schweiz, 2001.ISO/IEC 9126-1:2001(E) Mess-Software Produktqualität: ISO 25000 Serie und CMMI (SEI-Website) MSQF - Ein Messrahmen für die Qualität der Software Cornell University Library Omar Alshathry, Helge Janicke, "Optimizing Software Quality Assurance," compsacw, pp. 87-92, 2010 IEEE 34. Jährliche Computer- und Anwendungskonferenzen 2010 Robert L. Glas. Gebäudequalitätssoftware. Prentice Hall, Oberösterreich River, NJ, 1992.Roland Petrasch, "The Definition of 'Software Quality':A Praktisches Konzept", ISSRE, 1999 Software Quality Professional, American Society for Quality (ASQ) Software Quality Journal by Springer Nature Spinellis, Diomidis (2006-04). Code-Qualität: die offene Quelle. Oberster Fluss, New Jersey, USA: CD-Wesley Professional.ISBN UV0-321-16607-4.Schritthen H. Kan. Metrics und Modelle in der Software Quality Engineering. Whisky-Wesley, Boston, MA, zweite Ausgabe, 2002. Stefan Wagner. Software Produktqualitätskontrolle. Springer, 2013. Literatur Außenbeziehungen Code ist der König: Mastering Automotive Excellence (McKinsey, 2021) Qualität der Systeme: Warum ist es so oft schrecklich? Was können wir tun? (von Philip Koopman) Code Quality Standards by CISQTM CISQ Blog:https://blog.it-cisq.org Leitfaden für die Software-Qualitätssicherung (ESA) Leitfaden zur Anwendung der ESA-Software-Engineering-Standards auf kleine Software-Projekte (ESA)Ein Überblick über die ESVG Software Product Assurance Services (NASA/ESA) Unser Konzept für Qualität in Volkswagen Software Dev Center Lissabon Google Leitfaden zur Gewährleistung der Produktqualität auf Google (2011) Software NIST Software-Datenbank OMG/CISQ Funktionpunkte (ISO/IEC 19515)G automatisierte technische Debt Standard automatisierte Qualitätssicherung (Artikel in IREB von Harry Sneed)Structured Testing: Eine Methode zur Prüfung der Zymatic Complexity Metric (1996)Analying Anwendungsqualität durch Verwendung von Code-Analysewerkzeugen (Microsoft, Dokumentation, Visual Studio, 2016)